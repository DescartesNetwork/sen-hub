{"version":3,"file":"static/js/src_store_index_ts.0a5f783e.chunk.js","mappings":"6KACA,IAIA,EAHGA,aCSH,EARgB,CACdC,IAAAA,EACAC,OCKmC,CAInCC,YAAa,CACXC,WAAY,UAMdC,QAAS,CACPD,WAAY,UAMdE,WAAY,CACVF,WAAY,SDxBA,YEWhB,EARiB,WAAqC,IAApCG,EAAmC,uDAAjB,QAClC,MAAoB,gBAAhBC,EAAAA,KACG,CACLC,KAAMF,EACNG,gBAAiB,kBAAmC,CAAEC,QAArC,EAAGA,QAA2CC,KAA9C,EAAYA,U,uECN3BC,GAAQC,EAAAA,EAAAA,gBAAe,CAC3BC,WAAAA,EAAAA,EACAC,UAAUA,EAAAA,EAAAA,GAAS,SACnBC,QAAS,CACPC,GAAAA,EAAAA,WAMJ,a,kCCRAC,OAAOC,UAAUC,OAAS,WACxB,OAAOC,KAAKC,YAsBd,IAAMR,GAAaS,EAAAA,EAAAA,sBAAqB,CACtCC,kBAAmB,CACjBC,eAfJ,SAAiBC,GACf,MACiB,qBAARA,GACC,OAARA,GACe,kBAARA,GACQ,mBAARA,GACQ,kBAARA,GACPC,MAAMC,QAAQF,IAblB,SAAuBG,GACrB,GAAY,OAARA,EAAc,OAAO,EACzB,IAAMC,EAAQC,OAAOC,eAAeH,GACpC,OAAiB,OAAVC,GAAmD,OAAjCC,OAAOC,eAAeF,GAW7CG,CAAcP,IACC,kBAARA,MAUX,O,yICrBMQ,EAAW,WACf,IAAMC,EAAQC,OAAOC,WACrB,OAAIF,EAAQ,IAAY,KACpBA,EAAQ,IAAY,KACpBA,EAAQ,IAAY,KACpBA,EAAQ,KAAa,KACrBA,EAAQ,KAAa,KAClB,OAQHG,EAAsB,CAC1BH,MAAOC,OAAOC,WACdE,MAAOL,IACPM,UCjCO,iBAAkBJ,QAAUK,UAAUC,eAAiB,GDwCnDC,GAASC,EAAAA,EAAAA,kBAAiB,GAAD,OAXzB,KAWyB,6BAAmB,6FACjDT,EAAQC,OAAOC,WACfE,EAAQL,IAFyC,kBAGhD,CAAEC,MAAAA,EAAOI,MAAAA,IAHuC,4CAqBzD,GAXcM,EAAAA,EAAAA,aAAY,CACxBrC,KAtBW,KAuBX8B,aAAAA,EACAQ,SAAU,GACVC,cAAe,SAACC,GACTA,EAAQC,QACXN,EAAOO,WACP,SAACC,EAAD,OAAUzC,EAAV,EAAUA,QAAmBqB,OAAOqB,OAAOD,EAAOzC,SAIxD","sources":["configs/env.ts","configs/index.ts","configs/basics.config.ts","store/devTools.ts","store/index.ts","store/middleware.ts","store/ui.reducer.tsx","helpers/util.ts"],"sourcesContent":["export type Env = 'development' | 'staging' | 'production'\nconst env: Env =\n  (process.env.REACT_APP_ENV as Env) ||\n  (process.env.NODE_ENV as Env) ||\n  'development'\nexport default env\n","import env from './env'\nimport basics from './basics.config'\n\nconst configs = {\n  env,\n  basics: basics[env],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { Env } from './env'\n\n/**\n * Contructor\n */\n\ntype Config = {\n  subversion: 'devnet' | 'alpha' | 'beta' | null\n}\n\nconst configs: Record<Env, Config> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    subversion: 'devnet',\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    subversion: 'devnet',\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    subversion: 'beta',\n  },\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import configs from 'configs'\n\ntype Sanitizer = {\n  payload: any\n  type: string\n}\n\n// Bugfix: https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nconst devTools = (appName: string = 'SenOS'): any => {\n  if (configs.env !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: Sanitizer) => ({ payload, type }),\n  }\n}\n\nexport default devTools\n","import { configureStore } from '@reduxjs/toolkit'\nimport middleware from './middleware'\nimport devTools from './devTools'\n\nimport ui from './ui.reducer'\n\nconst store = configureStore({\n  middleware,\n  devTools: devTools('SenOS'),\n  reducer: {\n    ui,\n  },\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type RootDispatch = typeof store.dispatch\nexport default store\n","import { getDefaultMiddleware } from '@reduxjs/toolkit'\n\n// Need it cause https://github.com/GoogleChromeLabs/jsbi/issues/30\ndeclare global {\n  interface BigInt {\n    toJSON: (this: bigint) => string\n  }\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString()\n}\n\nfunction isPlainObject(obj: object): boolean {\n  if (obj === null) return false\n  const proto = Object.getPrototypeOf(obj)\n  return proto !== null && Object.getPrototypeOf(proto) === null\n}\n\nfunction isPlain(val: any): boolean {\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint'\n  )\n}\n\nconst middleware = getDefaultMiddleware({\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n})\n\nexport default middleware\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\nimport { isTouchable } from 'helpers/util'\n\n/**\n * Interface & Utility\n */\n\ntype Infix = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n\nexport type State = {\n  width: number\n  infix: Infix\n  touchable: boolean\n}\n\nconst getInfix = (): Infix => {\n  const width = window.innerWidth\n  if (width < 576) return 'xs'\n  if (width < 768) return 'sm'\n  if (width < 992) return 'md'\n  if (width < 1200) return 'lg'\n  if (width < 1400) return 'xl'\n  return 'xxl'\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'ui'\nconst initialState: State = {\n  width: window.innerWidth,\n  infix: getInfix(),\n  touchable: isTouchable(),\n}\n\n/**\n * Actions\n */\n\nexport const resize = createAsyncThunk(`${NAME}/resize`, async () => {\n  const width = window.innerWidth\n  const infix = getInfix()\n  return { width, infix }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      resize.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","export const isTouchable = () => {\n  return 'ontouchstart' in window || navigator.maxTouchPoints > 0\n}\n\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nexport const openNewTab = (href: string) => {\n  return window.open(href, '_blank')\n}\n"],"names":["process","env","basics","development","subversion","staging","production","appName","configs","name","actionSanitizer","payload","type","store","configureStore","middleware","devTools","reducer","ui","BigInt","prototype","toJSON","this","toString","getDefaultMiddleware","serializableCheck","isSerializable","val","Array","isArray","obj","proto","Object","getPrototypeOf","isPlainObject","getInfix","width","window","innerWidth","initialState","infix","touchable","navigator","maxTouchPoints","resize","createAsyncThunk","createSlice","reducers","extraReducers","builder","addCase","fulfilled","state","assign"],"sourceRoot":""}