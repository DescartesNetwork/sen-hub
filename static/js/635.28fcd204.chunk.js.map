{"version":3,"file":"static/js/635.28fcd204.chunk.js","mappings":"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","sources":["store/middleware.ts","configs/env.ts","configs/basics.config.ts","configs/sol.config.ts","configs/index.ts","store/devTools.ts","store/wallet.reducer.ts","store/accounts.reducer.ts","store/mints.reducer.ts","store/pools.reducer.ts","store/index.ts","store/ui.reducer.tsx","helpers/util.ts"],"sourcesContent":["import { getDefaultMiddleware } from '@reduxjs/toolkit'\n\n// Need it cause https://github.com/GoogleChromeLabs/jsbi/issues/30\ndeclare global {\n  interface BigInt {\n    toJSON: (this: bigint) => string\n  }\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString()\n}\n\nfunction isPlainObject(obj: object): boolean {\n  if (obj === null) return false\n  const proto = Object.getPrototypeOf(obj)\n  return proto !== null && Object.getPrototypeOf(proto) === null\n}\n\nfunction isPlain(val: any): boolean {\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint'\n  )\n}\n\nconst middleware = getDefaultMiddleware({\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n})\n\nexport default middleware\n","export type Env = 'development' | 'staging' | 'production'\nconst env: Env =\n  (process.env.REACT_APP_ENV as Env) ||\n  (process.env.NODE_ENV as Env) ||\n  'development'\nexport default env\n","import { Env } from './env'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Config = {\n  appId: string\n  url: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n}\n\nconst configs: Record<Env, Config> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { Env } from './env'\n\nconst SOLVARS = {\n  spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n  splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n}\n\n/**\n * Contructor\n */\ntype Config = {\n  node: string\n  cluster: 'devnet' | 'testnet' | 'mainnet'\n  chainId: 101 | 102 | 103\n  senAddress: string\n  swapAddress: string\n  taxmanAddress: string\n} & typeof SOLVARS\n\nconst configs: Record<Env, Config> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    node: 'https://api.devnet.solana.com',\n    chainId: 103,\n    cluster: 'devnet',\n    senAddress: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n    ...SOLVARS,\n    swapAddress: '4erFSLP7oBFSVC1t35jdxmbfxEhYCKfoM6XdG2BLR3UF',\n    taxmanAddress: '8UaZw2jDhJzv5V53569JbCd3bD4BnyCfBH3sjwgajGS9',\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    node: 'https://api.devnet.solana.com',\n    cluster: 'devnet',\n    chainId: 103,\n    senAddress: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n    ...SOLVARS,\n    swapAddress: '4erFSLP7oBFSVC1t35jdxmbfxEhYCKfoM6XdG2BLR3UF',\n    taxmanAddress: '8UaZw2jDhJzv5V53569JbCd3bD4BnyCfBH3sjwgajGS9',\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    node: 'https://api.mainnet-beta.solana.com',\n    cluster: 'mainnet',\n    chainId: 101,\n    senAddress: 'SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M',\n    ...SOLVARS,\n    swapAddress: 'SSW7ooZ1EbEognq5GosbygA3uWW1Hq1NsFq6TsftCFV',\n    taxmanAddress: '9doo2HZQEmh2NgfT3Yx12M89aoBheycYqH1eaR5gKb3e',\n  },\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import env from './env'\nimport basics from './basics.config'\nimport sol from './sol.config'\n\nconst configs = {\n  env,\n  basics: basics[env],\n  sol: sol[env],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import configs from 'configs'\n\ntype Sanitizer = {\n  payload: any\n  type: string\n}\n\n// Bugfix: https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nconst devTools = (appName: string = 'SenHub'): any => {\n  if (configs.env !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: Sanitizer) => ({ payload, type }),\n  }\n}\n\nexport default devTools\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { Lamports, SPLT, Swap, WalletInterface } from '@senswap/sen-js'\n\nimport configs from 'configs'\n\n/**\n * Interface & Utility\n */\n\ndeclare global {\n  interface Window {\n    senos: {\n      wallet: WalletInterface\n      lamports: Lamports\n      splt: SPLT\n      swap: Swap\n    }\n  }\n}\n\nexport type State = {\n  visible: boolean\n  address: string\n  lamports: bigint\n}\n\nconst initializeWindowSenOs = async (wallet: any) => {\n  const {\n    sol: { spltAddress, splataAddress, node, swapAddress },\n  } = configs\n  window.senos = {\n    wallet: wallet,\n    lamports: new Lamports(node),\n    splt: new SPLT(spltAddress, splataAddress, node),\n    swap: new Swap(swapAddress, spltAddress, splataAddress, node),\n  }\n}\n\nconst destroyWindowSenOs = async () => {\n  if (window.senos?.wallet) window.senos.wallet.disconnect()\n  await initializeWindowSenOs(null)\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'wallet'\nconst initialState: State = {\n  visible: false,\n  address: '',\n  lamports: BigInt(0),\n}\n\n/**\n * Actions\n */\n\nexport const openWallet = createAsyncThunk(`${NAME}/openWallet`, async () => {\n  return { visible: true }\n})\n\nexport const closeWallet = createAsyncThunk(`${NAME}/closeWallet`, async () => {\n  return { visible: false }\n})\n\nexport const connectWallet = createAsyncThunk(\n  `${NAME}/connectWallet`,\n  async (wallet: any) => {\n    if (!wallet) throw new Error('Invalid wallet instance')\n    await initializeWindowSenOs(wallet)\n    const address = await wallet.getAddress()\n    const lamports = await window.senos.lamports.getLamports(address)\n    return { address, lamports: BigInt(lamports), visible: false }\n  },\n)\n\nexport const updateWallet = createAsyncThunk(\n  `${NAME}/updateWallet`,\n  async ({ lamports }: Partial<State>) => {\n    return { lamports }\n  },\n)\n\nexport const disconnectWallet = createAsyncThunk(\n  `${NAME}/disconnectWallet`,\n  async () => {\n    await destroyWindowSenOs()\n    window.location.reload() // Reset all redux store\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        openWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        closeWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        connectWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updateWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        disconnectWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, AccountData } from '@senswap/sen-js'\n\n/**\n * Interface & Utility\n */\n\nexport type State = Record<string, AccountData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'accounts'\nconst initialState: State = {}\n\n/**\n * Actions\n */\n\nexport const getAccounts = createAsyncThunk(\n  `${NAME}/getAccounts`,\n  async ({ owner }: { owner: string }) => {\n    if (!account.isAddress(owner))\n      throw new Error('Invalid owner/wallet address')\n    const { splt } = window.senos\n    const ownerPublicKey = account.fromAddress(owner)\n    const { value } = await splt.connection.getTokenAccountsByOwner(\n      ownerPublicKey,\n      { programId: splt.spltProgramId },\n    )\n    let bulk: State = {}\n    value.forEach(({ pubkey, account: { data: buf } }) => {\n      const address = pubkey.toBase58()\n      const data = splt.parseAccountData(buf)\n      return (bulk[address] = data)\n    })\n    return bulk\n  },\n)\n\nexport const getAccount = createAsyncThunk<\n  State,\n  { address: string },\n  { state: any }\n>(`${NAME}/getAccount`, async ({ address }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid account address')\n  const {\n    accounts: { [address]: data },\n  } = getState()\n  if (data) return { [address]: data }\n  const { splt } = window.senos\n  const raw = await splt.getAccountData(address)\n  return { [address]: raw }\n})\n\nexport const upsetAccount = createAsyncThunk<\n  State,\n  { address: string; data: AccountData },\n  { state: any }\n>(`${NAME}/upsetAccount`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\nexport const deleteAccount = createAsyncThunk(\n  `${NAME}/deleteAccount`,\n  async ({ address }: { address: string }) => {\n    if (!account.isAddress(address)) throw new Error('Invalid address')\n    return { address }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(getAccounts.fulfilled, (state, { payload }) => payload)\n      .addCase(\n        getAccount.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetAccount.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        deleteAccount.fulfilled,\n        (state, { payload }) => void delete state[payload.address],\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, MintData } from '@senswap/sen-js'\n\n/**\n * Interface & Utility\n */\n\nexport type State = Record<string, MintData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'mints'\nconst initialState: State = {}\n\n/**\n * Actions\n */\n\nexport const getMint = createAsyncThunk<\n  State,\n  { address: string; force: boolean },\n  { state: any }\n>(`${NAME}/getMint`, async ({ address, force }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid mint address')\n  if (!force) {\n    const {\n      accounts: { [address]: data },\n    } = getState()\n    if (data) return { [address]: data }\n  }\n  const { splt } = window.senos\n  const raw = await splt.getMintData(address)\n  return { [address]: raw }\n})\n\nexport const upsetMint = createAsyncThunk<\n  State,\n  { address: string; data: MintData },\n  { state: any }\n>(`${NAME}/upsetMint`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\nexport const deleteMint = createAsyncThunk(\n  `${NAME}/deleteMint`,\n  async ({ address }: { address: string }) => {\n    if (!account.isAddress(address)) throw new Error('Invalid address')\n    return { address }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        getMint.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetMint.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        deleteMint.fulfilled,\n        (state, { payload }) => void delete state[payload.address],\n      ),\n})\n\nexport default slice.reducer\n","import { AccountInfo, PublicKey } from '@solana/web3.js'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, PoolData } from '@senswap/sen-js'\nimport configs from 'configs'\n\nconst {\n  sol: { taxmanAddress },\n} = configs\n\n/**\n * Interface & Utility\n */\n\nexport type State = Record<string, PoolData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'pools'\nconst initialState: State = {}\n\n/**\n * Actions\n */\n\nexport const getPools = createAsyncThunk(`${NAME}/getPools`, async () => {\n  const { swap } = window.senos\n  // Get all pools\n  const value: Array<{ pubkey: PublicKey; account: AccountInfo<Buffer> }> =\n    await swap.connection.getProgramAccounts(swap.swapProgramId, {\n      filters: [\n        { dataSize: 257 },\n        { memcmp: { bytes: taxmanAddress, offset: 65 } },\n      ],\n    })\n  let bulk: State = {}\n  value.forEach(({ pubkey, account: { data: buf } }) => {\n    const address = pubkey.toBase58()\n    const data = swap.parsePoolData(buf)\n    bulk[address] = data\n  })\n  return bulk\n})\n\nexport const getPool = createAsyncThunk<\n  State,\n  { address: string },\n  { state: any }\n>(`${NAME}/getPool`, async ({ address }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid pool address')\n  const {\n    pools: { [address]: data },\n  } = getState()\n  if (data) return { [address]: data }\n  const { swap } = window.senos\n  const raw = await swap.getPoolData(address)\n  return { [address]: raw }\n})\n\nexport const upsetPool = createAsyncThunk<\n  State,\n  { address: string; data: PoolData },\n  { state: any }\n>(`${NAME}/upsetPool`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid pool address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(getPools.fulfilled, (state, { payload }) => payload)\n      .addCase(\n        getPool.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetPool.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { configureStore } from '@reduxjs/toolkit'\nimport middleware from './middleware'\nimport devTools from './devTools'\n\nimport ui from './ui.reducer'\nimport wallet from './wallet.reducer'\nimport accounts from './accounts.reducer'\nimport mints from './mints.reducer'\nimport pools from './pools.reducer'\n\nconst store = configureStore({\n  middleware,\n  devTools: devTools('SenHub'),\n  reducer: {\n    ui,\n    wallet,\n    accounts,\n    mints,\n    pools,\n  },\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type RootDispatch = typeof store.dispatch\nexport default store\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\nimport { isTouchable } from 'helpers/util'\n\n/**\n * Interface & Utility\n */\n\ntype Infix = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n\nexport type State = {\n  width: number\n  infix: Infix\n  touchable: boolean\n}\n\nconst getInfix = (): Infix => {\n  const width = window.innerWidth\n  if (width < 576) return 'xs'\n  if (width < 768) return 'sm'\n  if (width < 992) return 'md'\n  if (width < 1200) return 'lg'\n  if (width < 1400) return 'xl'\n  return 'xxl'\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'ui'\nconst initialState: State = {\n  width: window.innerWidth,\n  infix: getInfix(),\n  touchable: isTouchable(),\n}\n\n/**\n * Actions\n */\n\nexport const resize = createAsyncThunk(`${NAME}/resize`, async () => {\n  const width = window.innerWidth\n  const infix = getInfix()\n  return { width, infix }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      resize.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","export const isTouchable = () => {\n  return 'ontouchstart' in window || navigator.maxTouchPoints > 0\n}\n\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nexport const openNewTab = (href: string) => {\n  return window.open(href, '_blank')\n}\n"],"names":["BigInt","prototype","toJSON","this","toString","getDefaultMiddleware","serializableCheck","isSerializable","val","Array","isArray","obj","proto","Object","getPrototypeOf","isPlainObject","process","REACT_APP_ENV","shared","appId","url","development","staging","production","SOLVARS","spltAddress","splataAddress","configs","node","chainId","cluster","senAddress","swapAddress","taxmanAddress","env","basics","sol","appName","name","actionSanitizer","payload","type","initializeWindowSenOs","wallet","window","senos","lamports","Lamports","splt","SPLT","swap","Swap","destroyWindowSenOs","disconnect","NAME","initialState","visible","address","openWallet","createAsyncThunk","closeWallet","connectWallet","Error","getAddress","getLamports","updateWallet","disconnectWallet","location","reload","createSlice","reducers","extraReducers","builder","addCase","fulfilled","state","assign","getAccounts","owner","account","ownerPublicKey","connection","getTokenAccountsByOwner","programId","spltProgramId","value","bulk","forEach","pubkey","buf","data","toBase58","parseAccountData","getAccount","getState","accounts","getAccountData","raw","upsetAccount","deleteAccount","getMint","force","getMintData","upsetMint","deleteMint","getPools","getProgramAccounts","swapProgramId","filters","dataSize","memcmp","bytes","offset","parsePoolData","getPool","pools","getPoolData","upsetPool","configureStore","middleware","devTools","reducer","ui","mints","getInfix","width","innerWidth","infix","touchable","navigator","maxTouchPoints","resize"],"sourceRoot":""}