{"version":3,"file":"static/js/src_app_bootstrap_app_tsx-node_modules_prop-types_index_js.c17214e1.chunk.js","mappings":"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","sources":["app/model/main.controller.tsx","app/configs/manifest.config.ts","app/configs/sol.config.ts","app/configs/index.ts","app/view/index.tsx","app/model/devTools.ts","app/model/index.ts","app/bootstrap.app.tsx","shared/pdb/index.ts","shared/pdb/ipfs.ts","shared/runtime.ts","shared/storage.ts","shared/dataloader/constant.ts","shared/dataloader/request.ts","shared/dataloader/cache.ts","shared/dataloader/index.ts","shared/util.ts","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/react/jsx-runtime.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\nexport type State = {\n  counter: number\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'main'\nconst initialState: State = {\n  counter: 0,\n}\n\n/**\n * Actions\n */\n\nexport const increaseCounter = createAsyncThunk<State, void, { state: any }>(\n  `${NAME}/increaseCounter`,\n  async (_, { getState }) => {\n    const {\n      main: { counter },\n    } = getState()\n    return { counter: counter + 1 }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      increaseCounter.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  appId: string\n  url: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  spltAddress: string\n  splataAddress: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    node: 'https://api.devnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    node: 'https://api.testnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    node: 'https://api.mainnet-beta.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { env, net } from 'shared/runtime'\nimport manifest from './manifest.config'\nimport sol from './sol.config'\n\nconst configs = {\n  manifest: manifest[env],\n  sol: sol[net],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { useCallback, useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useWallet } from '@senhub/providers'\n\nimport { Row, Col, Typography, Button, Space } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\n\nimport { AppDispatch, AppState } from 'app/model'\nimport { increaseCounter } from 'app/model/main.controller'\nimport configs from 'app/configs'\nimport { createPDB } from 'shared/pdb'\n\nconst {\n  manifest: { appId },\n} = configs\n\nconst View = () => {\n  const {\n    wallet: { address },\n  } = useWallet()\n  const dispatch = useDispatch<AppDispatch>()\n  const { counter } = useSelector((state: AppState) => state.main)\n\n  const pdb = useMemo(() => createPDB(address, appId), [address])\n  const increase = useCallback(() => dispatch(increaseCounter()), [dispatch])\n  useEffect(() => {\n    if (pdb) pdb.setItem('counter', counter)\n  }, [pdb, counter])\n\n  return (\n    <Row gutter={[24, 24]} align=\"middle\">\n      <Col span={24}>\n        <Space align=\"center\">\n          <IonIcon name=\"newspaper-outline\" />\n          <Typography.Title level={4}>App View</Typography.Title>\n        </Space>\n      </Col>\n      <Col span={24}>\n        <Typography.Text>Address: {address}</Typography.Text>\n      </Col>\n      <Col>\n        <Typography.Text>Counter: {counter}</Typography.Text>\n      </Col>\n      <Col>\n        <Button onClick={increase}>Increase</Button>\n      </Col>\n    </Row>\n  )\n}\n\nexport default View\n","import { PublicKey } from '@solana/web3.js'\nimport BN from 'bn.js'\n\n// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nexport const devTools = (appName: string): any => {\n  if (process.env.REACT_APP_ENV !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\n// BigInt Serialization Middleware\n// https://redux-toolkit.js.org/api/serializabilityMiddleware\nconst isPlain = (val: any): boolean => {\n  const isPlainObject = (obj: object): boolean => {\n    if (obj === null) return false\n    const proto = Object.getPrototypeOf(obj)\n    return proto !== null && Object.getPrototypeOf(proto) === null\n  }\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint' ||\n    val instanceof PublicKey ||\n    val instanceof BN ||\n    val instanceof Buffer\n  )\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString() // https://github.com/GoogleChromeLabs/jsbi/issues/30\n}\nexport const bigintSerializationMiddleware = {\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n}\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'app/model/devTools'\n\nimport main from 'app/model/main.controller'\n\n/**\n * Isolated store\n */\nconst model = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools(process.env.REACT_APP_ID as string),\n  reducer: {\n    main,\n  },\n})\n\nexport type AppState = ReturnType<typeof model.getState>\nexport type AppDispatch = typeof model.dispatch\nexport default model\n","import { Provider } from 'react-redux'\nimport { WalletProvider, UIProvider } from '@senhub/providers'\n\nimport View from 'app/view'\n\nimport model from 'app/model'\nimport configs from 'app/configs'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const Page = () => {\n  return (\n    <UIProvider appId={appId} antd>\n      <WalletProvider>\n        <Provider store={model}>\n          <View />\n        </Provider>\n      </WalletProvider>\n    </UIProvider>\n  )\n}\n","import localForage from 'localforage'\nimport { account } from '@senswap/sen-js'\nimport IPFS from './ipfs'\n\n/**\n * Persistent Database\n */\nclass PDB {\n  readonly dbName: string\n  private driver: any\n  private ipfs: IPFS\n\n  constructor(walletAddress: string) {\n    if (!account.isAddress(walletAddress)) throw new Error('Invalid address')\n    this.dbName = walletAddress\n    this.driver = [localForage.WEBSQL, localForage.LOCALSTORAGE]\n    this.ipfs = new IPFS()\n  }\n\n  /**\n   * Local\n   */\n\n  createInstance = (appId: string): LocalForage => {\n    return localForage.createInstance({\n      driver: this.driver,\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  dropInstance = async (appId: string): Promise<void> => {\n    const instance = this.createInstance(appId)\n    await instance.clear()\n    return await localForage.dropInstance({\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  all = async (): Promise<any> => {\n    let data: any = {}\n    const appIds = (\n      ((await this.createInstance('sentre').getItem('appIds')) as string[]) ||\n      []\n    )\n      .flat()\n      .concat(['sentre'])\n    for (const appId of appIds) {\n      data[appId] = {}\n      const instance = this.createInstance(appId)\n      await instance.iterate((value: string, key: string) => {\n        data[appId][key] = value\n      })\n    }\n    return data\n  }\n\n  /**\n   * Cloud\n   */\n\n  fetch = async (cid: string) => {\n    return await this.ipfs.get(cid)\n  }\n\n  backup = async () => {\n    const data = await this.all()\n    return await this.ipfs.set(data)\n  }\n\n  restore = async (cid: string) => {\n    // Download data\n    const data = await this.fetch(cid)\n    // Apply to storage\n    for (const appId in data) {\n      const instance = await this.createInstance(appId)\n      for (const key in data[appId]) {\n        const value = data[appId][key]\n        await instance.setItem(key, value)\n      }\n    }\n    return data\n  }\n}\n\nexport default PDB\n\n/**\n * High abtraction pdb for app\n */\nexport const createPDB = (walletArress: string, appId: string) => {\n  return account.isAddress(walletArress)\n    ? new PDB(walletArress).createInstance(appId)\n    : undefined\n}\n","import { create, isIPFS } from 'ipfs-core'\nimport { asyncWait } from 'shared/util'\n\nclass IPFS {\n  private _ipfs: any = async () => {\n    try {\n      if (!window.ipfs) window.ipfs = await create()\n      return window.ipfs\n    } catch (er) {\n      await asyncWait(500)\n      return await this._ipfs()\n    }\n  }\n\n  static isCID = (cid: string | undefined | null): boolean => {\n    try {\n      if (!cid) return false\n      return isIPFS.multihash(cid)\n    } catch (er) {\n      return false\n    }\n  }\n\n  get = async (cid: string) => {\n    if (!IPFS.isCID(cid)) throw new Error('Invalid CID')\n    const ipfs = await this._ipfs()\n    const stream = await ipfs.cat(cid)\n    let raw = ''\n    for await (const chunk of stream) raw += Buffer.from(chunk).toString()\n    const data = JSON.parse(raw)\n    return data\n  }\n\n  set = async (data: object): Promise<string> => {\n    if (!data) throw new Error('Empty data')\n    const raw = JSON.stringify(data)\n    const ipfs = await this._ipfs()\n    const { cid } = await ipfs.add(raw)\n    return cid.toString()\n  }\n}\n\nexport default IPFS\n","import { Connection } from '@solana/web3.js'\nimport storage from './storage'\n\n/**\n * Environment\n */\nconst getEnv = () => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return 'development'\n    case 'staging':\n      return 'staging'\n    case 'production':\n      return 'production'\n    default:\n      return 'development'\n  }\n}\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = getEnv()\n\n/**\n * Network\n */\nconst getNetwork = () => {\n  switch (storage.get('network')) {\n    case 'devnet':\n      return 'devnet'\n    case 'testnet':\n      return 'testnet'\n    case 'mainnet':\n      return 'mainnet'\n    default:\n      return 'mainnet'\n  }\n}\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = getNetwork()\n\nexport const onSwitchNetwork = (value: Net) => {\n  storage.set('network', value)\n  return window.location.reload()\n}\n\n/**\n * Chain ID\n */\nconst getChainId = () => {\n  switch (net) {\n    case 'devnet':\n      return 103\n    case 'testnet':\n      return 102\n    case 'mainnet':\n      return 101\n    default:\n      return 101\n  }\n}\nexport type ChainId = 101 | 102 | 103\nexport const chainId: ChainId = getChainId()\n\n/**\n * RPC Node\n */\nconst CLUSTERS: Record<Net, string[]> = {\n  devnet: [\n    'https://api.devnet.solana.com',\n    'https://psytrbhymqlkfrhudd.dev.genesysgo.net:8899/',\n  ],\n  testnet: ['https://api.testnet.solana.com'],\n  mainnet: [\n    'https://ssc-dao.genesysgo.net/',\n    'https://solana-api.projectserum.com',\n    'https://solitary-autumn-water.solana-mainnet.quiknode.pro/dcbac9d444818a20ac583541dec35b44c6840888/',\n  ],\n}\nconst getRPC = () => {\n  const rpcs = CLUSTERS[net]\n  const rpc = rpcs[Math.floor(Math.random() * rpcs.length)]\n  console.log('Debug OS RPC:', rpc)\n  return rpc\n}\nexport const rpc: string = getRPC()\n\n/**\n * Ping Solana cluster\n * @param nodeRpc - Solana's RPC cluster\n * @returns ping time\n */\nexport const pingCluster = async (nodeRpc: string): Promise<number> => {\n  const connection = new Connection(nodeRpc)\n  const start = Date.now()\n  await connection.getVersion()\n  const end = Date.now()\n  return end - start\n}\n","const KEY = 'sentre'\nconst driver = window.localStorage\n\nconst convert = (value: string | null) => {\n  try {\n    if (!value) return null\n    return JSON.parse(value)\n  } catch (e) {\n    return null\n  }\n}\n\nconst storage = {\n  set: (key: string, value: any) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') data = {}\n    data[key] = value\n    driver.setItem(KEY, JSON.stringify(data))\n  },\n  get: (key: string) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') return null\n    return data[key]\n  },\n  clear: (key: string) => {\n    storage.set(key, null)\n  },\n}\n\nexport default storage\n","export type LimitConfig = {\n  calls: number\n  time: number\n}\n\nexport type CacheConfig = {\n  ttl: number // millisecond\n}\n\nexport type SingleFlightConfig = {\n  limit?: LimitConfig\n  cache?: CacheConfig\n}\n\n// 10 request per 1 second\nexport const DEFAULT_LIMIT_CONFIG: LimitConfig = {\n  calls: 10,\n  time: 1000,\n}\n\n// 10 request per 1 second\nexport const DEFAULT_CACHE_CONFIG: CacheConfig = {\n  ttl: 30000,\n}\n\nexport const DEFAULT_SINGLE_FLIGHT_CONFIG: SingleFlightConfig = {\n  limit : DEFAULT_LIMIT_CONFIG,\n  cache: DEFAULT_CACHE_CONFIG\n}","export interface IRequestQueue {\n  key: string\n  add(resolve: any, reject: any): void\n  resolves(data: any): void\n  rejects(error: any): void\n}\n\nexport class RequestQueue implements IRequestQueue {\n  key = ''\n  private resolveQueue: any[] = []\n  private rejectQueue: any[] = []\n  constructor(key: string) {\n    this.key = key\n  }\n\n  add(resolve: any, reject: any) {\n    this.resolveQueue.push(resolve)\n    this.rejectQueue.push(reject)\n  }\n\n  resolves(data: any) {\n    while (this.resolveQueue.length > 0) {\n      const resolve = this.resolveQueue.shift()\n      resolve(data)\n    }\n  }\n\n  rejects(error: any) {\n    while (this.rejectQueue.length > 0) {\n      const reject = this.rejectQueue.shift()\n      reject(error)\n    }\n  }\n}\n","import { DEFAULT_CACHE_CONFIG } from './constant'\nimport { CacheConfig } from './constant'\n\nexport class SingleFlightCache {\n  private static mapCache = new Map<string, any>()\n\n  static set(\n    key: string,\n    value: any,\n    configs: CacheConfig = DEFAULT_CACHE_CONFIG,\n  ) {\n    this.mapCache.set(key, value)\n    setTimeout(() => {\n      this.mapCache.delete(key)\n    }, configs.ttl)\n  }\n\n  static get(key: string) {\n    return this.mapCache.get(key)\n  }\n}\n","import { DEFAULT_SINGLE_FLIGHT_CONFIG, SingleFlightConfig } from './constant'\n\nimport { IRequestQueue, RequestQueue } from './request'\nimport { SingleFlightCache } from './cache'\n\nexport class DataLoader {\n  static mapInstance = new Map<string, SingleFlight>()\n\n  private static getSingleFlight(configs: SingleFlightConfig): SingleFlight {\n    const instanceKey = JSON.stringify(configs)\n    if (this.mapInstance.has(instanceKey)) {\n      const instance = this.mapInstance.get(instanceKey)\n      if (instance) return instance\n    }\n\n    let newSingleFlight = new SingleFlight(configs)\n    this.mapInstance.set(instanceKey, newSingleFlight)\n    return newSingleFlight\n  }\n\n  static async load<T>(\n    requestKey: string | object,\n    callback: () => Promise<T>,\n    configs: SingleFlightConfig = {},\n  ): Promise<T> {\n    if (typeof requestKey === 'object') requestKey = JSON.stringify(requestKey)\n\n    let singleFlight = DataLoader.getSingleFlight(configs)\n    DataLoader.mapInstance.set(requestKey, singleFlight)\n    const newRequest = new RequestQueue(requestKey)\n    return singleFlight.load<T>(newRequest, callback)\n  }\n}\n\nclass SingleFlight {\n  private config: SingleFlightConfig\n  private intervalRequest: any\n  private timeLogs: number[] = []\n\n  private mapRequestCalling = new Map<string, IRequestQueue>()\n  private requestQueue: IRequestQueue[] = []\n\n  constructor(configs: SingleFlightConfig) {\n    this.config = Object.assign(DEFAULT_SINGLE_FLIGHT_CONFIG, configs)\n  }\n\n  async load<T>(newRequest: IRequestQueue, callback: () => Promise<T>) {\n    const cacheData = SingleFlightCache.get(newRequest.key)\n    if (cacheData) return Promise.resolve(cacheData)\n\n    let isFetch = false\n    let request = this.mapRequestCalling.get(newRequest.key)\n    if (!request) {\n      request = newRequest\n      isFetch = true\n      this.mapRequestCalling.set(request.key, request)\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!request) return reject('Not found request!')\n      request.add(resolve, reject)\n      if (isFetch) {\n        this.fetch<T>(request, callback)\n      }\n    })\n  }\n\n  private fetch<T>(request: IRequestQueue, callback: () => Promise<T>) {\n    if (!this.validateLimit()) {\n      return this.addRequestQueue(request, callback)\n    }\n    this.createTimeLogs()\n\n    callback()\n      .then((response) => {\n        SingleFlightCache.set(request.key, response, this.config.cache)\n        request.resolves(response)\n      })\n      .catch((error) => {\n        request.rejects(error)\n      })\n      .finally(() => {\n        this.mapRequestCalling.delete(request.key)\n        this.fetchRequestQueue(callback)\n      })\n  }\n\n  private fetchRequestQueue(callback: () => Promise<any>) {\n    if (!this.validateLimit()) return\n    const request = this.requestQueue.shift()\n    if (request) this.load(request, callback)\n\n    if (this.requestQueue.length === 0 && this.intervalRequest) {\n      clearInterval(this.intervalRequest)\n    }\n  }\n\n  private addRequestQueue(\n    request: IRequestQueue,\n    callback: () => Promise<any>,\n  ) {\n    this.requestQueue.push(request)\n    this.intervalRequest = setInterval(() => {\n      this.fetchRequestQueue(callback)\n    }, this.config.limit?.time)\n  }\n\n  private validateLimit(): boolean {\n    return true\n  }\n\n  private createTimeLogs() {\n    if (!this.config.limit) return\n\n    const now = new Date().getTime()\n    this.timeLogs.push(now)\n    if (this.timeLogs.length > this.config.limit?.calls) {\n      this.timeLogs.shift()\n    }\n  }\n}\n","import { account, utils } from '@senswap/sen-js'\nimport numbro from 'numbro'\n\nimport { net } from 'shared/runtime'\nimport { DataLoader } from './dataloader'\n\n/**\n * Delay by async/await\n * @param ms - milisenconds\n * @returns\n */\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\n/**\n * Shorten a long address\n * @param address - The long address\n * @param num - The number of the heading and trailing characters\n * @param delimiter - The delimiter\n * @returns Shortened address\n */\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\n/**\n * Build a explorer url by context including addresses or transaction ids\n * @param addressOrTxId - Address or TxId\n * @returns\n */\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://explorer.solana.com/address/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://explorer.solana.com/tx/${addressOrTxId}?cluster=${net}`\n}\n\n/**\n * Wrapped Numbro - https://numbrojs.com/old-format.html\n * @param value - value\n * @returns\n */\nexport const numeric = (\n  value?: number | string | BigInt,\n): ReturnType<typeof numbro> => {\n  if (!value) return numbro('0')\n  return numbro(value)\n}\n\n/**\n * Generate a random color\n * @param seed - Seed\n * @param opacity - Opacity\n * @returns\n */\nexport const randomColor = (seed?: string, opacity?: string | number) => {\n  let hash = Math.floor(Math.random() * 16777215)\n  if (seed) {\n    hash = 0\n    for (let i = 0; i < seed.length; i++) {\n      hash = seed.charCodeAt(i) + ((hash << 5) - hash)\n    }\n  }\n  var rgb = [0, 0, 0]\n  for (let i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 255\n    rgb[i] = value\n  }\n  return `rgba(${rgb[0]}, 100, ${rgb[1]},${opacity || 1})`\n}\n\n/**\n * Fetch coingecko data with cache\n * @param ticket - Token ticket\n * @returns\n */\nexport const fetchCGK = async (ticket = '') => {\n  return DataLoader.load('fetchCGK' + ticket, () => utils.parseCGK(ticket))\n}\n\n/**\n * Randomly choose an element in the input array\n * @param arr - Original array of elements\n * @returns\n */\nexport const randChoose = <T>(arr: T[]): T => {\n  const rand = Math.floor(Math.random() * arr.length)\n  return arr[rand]\n}\n\n/**\n * Randomize a subarray in the input array with a specific number of elements\n * @param arr - Original array of elements\n * @param num - Number of elements in randomized subarray\n * @returns\n */\nexport const randElements = <T>(arr: T[], num: number): T[] => {\n  if (arr.length < num) return [...arr]\n  const re: T[] = []\n  while (re.length < num) {\n    const el = randChoose(arr)\n    if (!re.includes(el)) re.push(el)\n  }\n  return re\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n"],"names":["NAME","increaseCounter","createAsyncThunk","async","_","getState","main","counter","createSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","payload","Object","assign","shared","appId","process","url","devnet","node","spltAddress","splataAddress","testnet","mainnet","manifest","development","staging","production","env","sol","net","configs","wallet","address","useWallet","dispatch","useDispatch","useSelector","pdb","useMemo","createPDB","increase","useCallback","useEffect","setItem","Row","gutter","align","Col","span","Space","Typography","level","Button","onClick","BigInt","prototype","toJSON","this","toString","bigintSerializationMiddleware","serializableCheck","isSerializable","val","Array","isArray","obj","proto","getPrototypeOf","isPlainObject","PublicKey","BN","Buffer","configureStore","middleware","getDefaultMiddleware","devTools","reducer","Page","UIProvider","antd","WalletProvider","Provider","store","model","PDB","constructor","walletAddress","dbName","driver","ipfs","createInstance","localForage","storeName","dropInstance","instance","clear","all","data","appIds","getItem","flat","concat","iterate","value","key","fetch","get","cid","backup","set","restore","account","Error","IPFS","walletArress","undefined","_ipfs","window","create","er","asyncWait","isCID","stream","cat","raw","chunk","from","JSON","parse","stringify","add","isIPFS","storage","getNetwork","chainId","getChainId","CLUSTERS","rpc","rpcs","Math","floor","random","length","console","log","getRPC","KEY","localStorage","convert","e","DEFAULT_CACHE_CONFIG","ttl","DEFAULT_SINGLE_FLIGHT_CONFIG","limit","calls","time","cache","RequestQueue","resolveQueue","rejectQueue","resolve","reject","push","resolves","shift","rejects","error","SingleFlightCache","mapCache","setTimeout","delete","Map","DataLoader","instanceKey","mapInstance","has","newSingleFlight","SingleFlight","requestKey","callback","singleFlight","getSingleFlight","newRequest","load","config","intervalRequest","timeLogs","mapRequestCalling","requestQueue","cacheData","Promise","isFetch","request","validateLimit","addRequestQueue","createTimeLogs","then","response","catch","finally","fetchRequestQueue","clearInterval","setInterval","now","Date","getTime","ms","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes"],"sourceRoot":""}