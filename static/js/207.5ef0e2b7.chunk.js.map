{"version":3,"file":"static/js/207.5ef0e2b7.chunk.js","mappings":"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","sources":["../node_modules/@project-serum/sol-wallet-adapter/src/index.ts","../node_modules/@senswap/sen-js/dist/index.js","../node_modules/@solana/web3.js/src/util/to-buffer.ts","../node_modules/@solana/web3.js/src/util/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/account.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/util/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/message.ts","../node_modules/@solana/web3.js/src/util/assert.ts","../node_modules/@solana/web3.js/src/transaction.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/util/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/util/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/system-program.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/@solana/web3.js/node_modules/cross-fetch/dist/browser-ponyfill.js","../node_modules/@solana/web3.js/src/epoch-schedule.ts","../node_modules/@solana/web3.js/src/errors.ts","../node_modules/@solana/web3.js/src/util/promise-timeout.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/util/url.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/ed25519-program.ts","../node_modules/@solana/web3.js/src/stake-program.ts","../node_modules/@solana/web3.js/src/secp256k1-program.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@solana/web3.js/src/util/send-and-confirm-raw-transaction.ts","../node_modules/@solana/web3.js/src/util/cluster.ts","../node_modules/@solana/web3.js/src/index.ts","../node_modules/js-file-download/file-download.js","../node_modules/numeral/numeral.js","../node_modules/object-assign/index.js","../node_modules/react-dynamic-remote-component/src/utils.ts","../node_modules/react-dynamic-remote-component/src/attach-script.ts","../node_modules/react-dynamic-remote-component/src/load-module.ts","../node_modules/react-dynamic-remote-component/src/RemoteComponent.tsx","../node_modules/react-dynamic-remote-component/src/suspend.ts","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/jsx-runtime.js"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { PublicKey, Transaction } from '@solana/web3.js';\nimport bs58 from 'bs58';\n\ntype InjectedProvider = { postMessage: (params: unknown) => void };\n\nexport default class Wallet extends EventEmitter {\n  private _providerUrl: URL | undefined;\n  private _injectedProvider?: InjectedProvider;\n  private _publicKey: PublicKey | null = null;\n  private _popup: Window | null = null;\n  private _handlerAdded = false;\n  private _nextRequestId = 1;\n  private _autoApprove = false;\n  private _responsePromises: Map<\n    number,\n    [(value: string) => void, (reason: Error) => void]\n  > = new Map();\n\n  constructor(provider: unknown, private _network: string) {\n    super();\n    if (isInjectedProvider(provider)) {\n      this._injectedProvider = provider;\n    } else if (isString(provider)) {\n      this._providerUrl = new URL(provider);\n      this._providerUrl.hash = new URLSearchParams({\n        origin: window.location.origin,\n        network: this._network,\n      }).toString();\n    } else {\n      throw new Error(\n        'provider parameter must be an injected provider or a URL string.',\n      );\n    }\n  }\n\n  handleMessage = (\n    e: MessageEvent<{\n      id: number;\n      method: string;\n      params: {\n        autoApprove: boolean;\n        publicKey: string;\n      };\n      result?: string;\n      error?: string;\n    }>,\n  ): void => {\n    if (\n      (this._injectedProvider && e.source === window) ||\n      (e.origin === this._providerUrl?.origin && e.source === this._popup)\n    ) {\n      if (e.data.method === 'connected') {\n        const newPublicKey = new PublicKey(e.data.params.publicKey);\n        if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {\n          if (this._publicKey && !this._publicKey.equals(newPublicKey)) {\n            this.handleDisconnect();\n          }\n          this._publicKey = newPublicKey;\n          this._autoApprove = !!e.data.params.autoApprove;\n          this.emit('connect', this._publicKey);\n        }\n      } else if (e.data.method === 'disconnected') {\n        this.handleDisconnect();\n      } else if (e.data.result || e.data.error) {\n        const promises = this._responsePromises.get(e.data.id);\n        if (promises) {\n          const [resolve, reject] = promises;\n          if (e.data.result) {\n            resolve(e.data.result);\n          } else {\n            reject(new Error(e.data.error));\n          }\n        }\n      }\n    }\n  };\n\n  private handleConnect() {\n    if (!this._handlerAdded) {\n      this._handlerAdded = true;\n      window.addEventListener('message', this.handleMessage);\n      window.addEventListener('beforeunload', this._beforeUnload);\n    }\n    if (this._injectedProvider) {\n      return new Promise<void>((resolve) => {\n        void this.sendRequest('connect', {});\n        resolve();\n      });\n    } else {\n      window.name = 'parent';\n      this._popup = window.open(\n        this._providerUrl?.toString(),\n        '_blank',\n        'location,resizable,width=460,height=675',\n      );\n      return new Promise((resolve) => {\n        this.once('connect', resolve);\n      });\n    }\n  }\n\n  private handleDisconnect() {\n    if (this._handlerAdded) {\n      this._handlerAdded = false;\n      window.removeEventListener('message', this.handleMessage);\n      window.removeEventListener('beforeunload', this._beforeUnload);\n    }\n    if (this._publicKey) {\n      this._publicKey = null;\n      this.emit('disconnect');\n    }\n    this._responsePromises.forEach(([, reject], id) => {\n      this._responsePromises.delete(id);\n      reject(new Error('Wallet disconnected'));\n    });\n  }\n\n  private async sendRequest(method: string, params: Record<string, unknown>) {\n    if (method !== 'connect' && !this.connected) {\n      throw new Error('Wallet not connected');\n    }\n    const requestId = this._nextRequestId;\n    ++this._nextRequestId;\n    return new Promise((resolve, reject) => {\n      this._responsePromises.set(requestId, [resolve, reject]);\n      if (this._injectedProvider) {\n        this._injectedProvider.postMessage({\n          jsonrpc: '2.0',\n          id: requestId,\n          method,\n          params: {\n            network: this._network,\n            ...params,\n          },\n        });\n      } else {\n        this._popup?.postMessage(\n          {\n            jsonrpc: '2.0',\n            id: requestId,\n            method,\n            params,\n          },\n          this._providerUrl?.origin ?? '',\n        );\n\n        if (!this.autoApprove) {\n          this._popup?.focus();\n        }\n      }\n    });\n  }\n\n  get publicKey(): PublicKey | null {\n    return this._publicKey;\n  }\n\n  get connected(): boolean {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove(): boolean {\n    return this._autoApprove;\n  }\n\n  async connect(): Promise<void> {\n    if (this._popup) {\n      this._popup.close();\n    }\n    await this.handleConnect();\n  }\n\n  async disconnect(): Promise<void> {\n    if (this._injectedProvider) {\n      await this.sendRequest('disconnect', {});\n    }\n    if (this._popup) {\n      this._popup.close();\n    }\n    this.handleDisconnect();\n  }\n\n  private _beforeUnload = (): void => {\n    void this.disconnect();\n  };\n\n  async sign(\n    data: Uint8Array,\n    display: unknown,\n  ): Promise<{\n    signature: Buffer;\n    publicKey: PublicKey;\n  }> {\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Data must be an instance of Uint8Array');\n    }\n\n    const response = (await this.sendRequest('sign', {\n      data,\n      display,\n    })) as { publicKey: string; signature: string };\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    return {\n      signature,\n      publicKey,\n    };\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const response = (await this.sendRequest('signTransaction', {\n      message: bs58.encode(transaction.serializeMessage()),\n    })) as { publicKey: string; signature: string };\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    transaction.addSignature(publicKey, signature);\n    return transaction;\n  }\n\n  async signAllTransactions(\n    transactions: Transaction[],\n  ): Promise<Transaction[]> {\n    const response = (await this.sendRequest('signAllTransactions', {\n      messages: transactions.map((tx) => bs58.encode(tx.serializeMessage())),\n    })) as { publicKey: string; signatures: string[] };\n    const signatures = response.signatures.map((s) => bs58.decode(s));\n    const publicKey = new PublicKey(response.publicKey);\n    transactions = transactions.map((tx, idx) => {\n      tx.addSignature(publicKey, signatures[idx]);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async diffieHellman(\n    publicKey: Uint8Array,\n  ): Promise<{ publicKey: Uint8Array; secretKey: Uint8Array }> {\n    if (!(publicKey instanceof Uint8Array)) {\n      throw new Error('Data must be an instance of Uint8Array');\n    }\n    const response = (await this.sendRequest('diffieHellman', {\n      publicKey,\n    })) as {\n      publicKey: Uint8Array;\n      secretKey: Uint8Array;\n    };\n    return response;\n  }\n}\n\nfunction isString(a: unknown): a is string {\n  return typeof a === 'string';\n}\n\nfunction isInjectedProvider(a: unknown): a is InjectedProvider {\n  return (\n    isObject(a) && 'postMessage' in a && typeof a.postMessage === 'function'\n  );\n}\n\nfunction isObject(a: unknown): a is Record<string, unknown> {\n  return typeof a === 'object' && a !== null;\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Farming = exports.Swap = exports.SPLT = exports.Lamports = exports.utils = exports.schema = exports.keystore = exports.account = exports.RawWallet = void 0;\n__exportStar(require(\"./rawWallet\"), exports);\nvar rawWallet_1 = require(\"./rawWallet\");\nObject.defineProperty(exports, \"RawWallet\", { enumerable: true, get: function () { return rawWallet_1.default; } });\nvar account_1 = require(\"./account\");\nObject.defineProperty(exports, \"account\", { enumerable: true, get: function () { return account_1.default; } });\n__exportStar(require(\"./default\"), exports);\n__exportStar(require(\"./keystore\"), exports);\nvar keystore_1 = require(\"./keystore\");\nObject.defineProperty(exports, \"keystore\", { enumerable: true, get: function () { return keystore_1.default; } });\n__exportStar(require(\"./schema\"), exports);\nvar schema_1 = require(\"./schema\");\nObject.defineProperty(exports, \"schema\", { enumerable: true, get: function () { return schema_1.default; } });\nvar utils_1 = require(\"./utils\");\nObject.defineProperty(exports, \"utils\", { enumerable: true, get: function () { return utils_1.default; } });\nvar lamports_1 = require(\"./lamports\");\nObject.defineProperty(exports, \"Lamports\", { enumerable: true, get: function () { return lamports_1.default; } });\n__exportStar(require(\"./splt\"), exports);\nvar splt_1 = require(\"./splt\");\nObject.defineProperty(exports, \"SPLT\", { enumerable: true, get: function () { return splt_1.default; } });\n__exportStar(require(\"./swap\"), exports);\nvar swap_1 = require(\"./swap\");\nObject.defineProperty(exports, \"Swap\", { enumerable: true, get: function () { return swap_1.default; } });\n__exportStar(require(\"./farming\"), exports);\nvar farming_1 = require(\"./farming\");\nObject.defineProperty(exports, \"Farming\", { enumerable: true, get: function () { return farming_1.default; } });\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from 'crypto-hash';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import * as nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (\n  property: string = 'publicKey',\n): BufferLayout.Layout => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): BufferLayout.Layout => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: any, offset: any) => {\n    const data = _decode(buffer, offset);\n    return data['chars'].toString('utf8');\n  };\n\n  rsl.encode = (str: any, buffer: any, offset: any) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  (rsl as any).alloc = (str: any) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS: {\n  [type in SystemInstructionType]: InstructionType;\n} = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n}({}));\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport fetch from 'cross-fetch';\nimport type {Response} from 'cross-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: SimulatedTransactionAccountInfo[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          pick({\n            executable: boolean(),\n            owner: string(),\n            lamports: number(),\n            data: array(string()),\n            rentEpoch: optional(number()),\n          }),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger with signatures only\n */\nexport type ConfirmedBlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: (url: string, options: any) => Promise<Response>;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = (url: string, options: any) => {\n      return new Promise<Response>((resolve, reject) => {\n        fetchMiddleware(url, options, async (url: string, options: any) => {\n          try {\n            resolve(await fetch(url, options));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      });\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlockSignatures\" message\n */\nconst GetConfirmedBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch infor for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: Function,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retring calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get total supply: ' + res.error.message);\n    }\n    return res.result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a processed transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const result = await this.getBlock(slot, {commitment});\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const result = await this.getTransaction(signature, {commitment});\n    if (!result) return result;\n    const {message, signatures} = result.transaction;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        if (err instanceof Error) {\n          console.error(\n            `${rpcMethod} error for argument`,\n            rpcArgs,\n            err.message,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import * as nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        publicKeyOffset,\n        publicKeyInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  | 'AuthorizeWithSeed'\n  | 'Authorize'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Split'\n  | 'Withdraw'\n  | 'Merge';\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS: {\n  [type in StakeInstructionType]: InstructionType;\n} = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport {keccak_256} from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256.update(toBuffer(publicKey)).digest()).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedVoterPubkey = args.authorizedVoterPubkey;\n    this.authorizedWithdrawerPubkey = args.authorizedWithdrawerPubkey;\n    this.commission = args.commission;\n    this.votes = args.votes;\n    this.rootSlot = args.rootSlot;\n    this.epoch = args.epoch;\n    this.credits = args.credits;\n    this.lastEpochCredits = args.lastEpochCredits;\n    this.epochCredits = args.epochCredits;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedVoterPubkey: new PublicKey(va.authorizedVoterPubkey),\n      authorizedWithdrawerPubkey: new PublicKey(va.authorizedWithdrawerPubkey),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      epoch: va.epoch,\n      credits: va.credits,\n      lastEpochCredits: va.lastEpochCredits,\n      epochCredits: va.epochCredits,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n","module.exports = function(data, filename, mime, bom) {\n    var blobData = (typeof bom !== 'undefined') ? [bom, data] : [data]\n    var blob = new Blob(blobData, {type: mime || 'application/octet-stream'});\n    if (typeof window.navigator.msSaveBlob !== 'undefined') {\n        // IE workaround for \"HTML7007: One or more blob URLs were\n        // revoked by closing the blob for which they were created.\n        // These URLs will no longer resolve as the data backing\n        // the URL has been freed.\"\n        window.navigator.msSaveBlob(blob, filename);\n    }\n    else {\n        var blobURL = (window.URL && window.URL.createObjectURL) ? window.URL.createObjectURL(blob) : window.webkitURL.createObjectURL(blob);\n        var tempLink = document.createElement('a');\n        tempLink.style.display = 'none';\n        tempLink.href = blobURL;\n        tempLink.setAttribute('download', filename);\n\n        // Safari thinks _blank anchor are pop ups. We only want to set _blank\n        // target if the browser does not support the HTML5 download attribute.\n        // This allows you to download files in desktop safari if pop up blocking\n        // is enabled.\n        if (typeof tempLink.download === 'undefined') {\n            tempLink.setAttribute('target', '_blank');\n        }\n\n        document.body.appendChild(tempLink);\n        tempLink.click();\n\n        // Fixes \"webkit blob resource error 1\"\n        setTimeout(function() {\n            document.body.removeChild(tempLink);\n            window.URL.revokeObjectURL(blobURL);\n        }, 200)\n    }\n}\n","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","import { RemoteModule } from \"./types\";\n\nexport const getRemoteModuleId = ({ url, module, scope }: RemoteModule) =>\n  [url, scope, module].join();\n","import { RemoteModule } from \"./types\";\nimport { getRemoteModuleId } from \"./utils\";\n\nexport const attachScript = (remoteModule: RemoteModule) => {\n  const id = getRemoteModuleId(remoteModule);\n\n  const existingElement = document.getElementById(id);\n\n  if (existingElement) {\n    //@ts-expect-error\n    if (window[remoteModule.scope]) return Promise.resolve(true);\n    else\n      return new Promise((resolve) => {\n        existingElement.onload = (e) => {\n          resolve(true);\n        };\n      });\n  }\n  const element = document.createElement(\"script\");\n  element.src = remoteModule.url;\n  element.type = \"text/javascript\";\n  element.async = true;\n  element.id = id;\n\n  const scriptLoadPromise = new Promise<HTMLScriptElement>(\n    (resolve, reject) => {\n      element.onload = () => resolve(element);\n      element.onerror = (e) => {\n        reject(e);\n      };\n    }\n  );\n\n  document.head.appendChild(element);\n\n  return scriptLoadPromise;\n};\n\nexport const detachScript = (id: string) => {\n  const element = document.getElementById(id);\n  if (element) document.head.removeChild(element);\n};\n","/* eslint-disable no-unreachable */\nexport const loadModule = (url: string, scope: string, module: string) => {\n  return async () => {\n    try {\n      //@ts-expect-error\n      await __webpack_init_sharing__(\"default\");\n      //@ts-expect-error\n      const container = window[scope];\n\n      if (!container.isInitialized) {\n        container.isInitialized = true;\n        //@ts-expect-error\n        await container.init(__webpack_share_scopes__.default);\n      }\n      //@ts-expect-error\n      const factory = await window[scope].get(module);\n\n      const Module = factory();\n\n      return Module;\n    } catch (e) {\n      const error = new Error(\n        `There was a problem loading the remote module. Please check the parameters (url: ${url} scope: ${scope} module: ${module})`\n      );\n      error.name = \"RemoteModuleLoadingError\";\n      throw error;\n    }\n  };\n};\n","import { FC } from \"react\";\nimport { attachScript } from \"./attach-script\";\nimport { loadModule } from \"./load-module\";\nimport { RemoteModule } from \"./types\";\nimport { suspend } from \"./suspend\";\nimport { getRemoteModuleId } from \"./utils\";\n\nexport type RemoteComponentProps = RemoteModule & {\n  unLoadScriptOnUnmount?: boolean;\n  exportName?: \"string\";\n};\n\nexport const getModule = (remoteModule: RemoteModule) => {\n  window.remoteModuleDictionary = window.remoteModuleDictionary || {};\n  const id = getRemoteModuleId(remoteModule);\n  const existingModule = window.remoteModuleDictionary[id];\n\n  if (existingModule) return existingModule;\n  else {\n    window.remoteModuleDictionary[id] = new Promise(async (resolve, reject) => {\n      try {\n        await attachScript(remoteModule);\n\n        const _module = await loadModule(\n          remoteModule.url,\n          remoteModule.scope,\n          remoteModule.module\n        )();\n\n        resolve(_module);\n      } catch (e) {\n        reject(e);\n      }\n    });\n    return window.remoteModuleDictionary[id];\n  }\n};\n\nconst getModuleSuspended = (remoteModule: RemoteModule) => {\n  window.remoteObjectDictionary = window.remoteObjectDictionary || {};\n  const id = getRemoteModuleId(remoteModule);\n  const existingCaller = window.remoteObjectDictionary[id];\n  if (existingCaller) return existingCaller();\n  else {\n    const caller = suspend(getModule(remoteModule));\n    window.remoteObjectDictionary[id] = caller;\n    return caller();\n  }\n};\n\nexport const useRemoteModule = (remoteModule: RemoteModule) => {\n  return getModuleSuspended(remoteModule);\n};\n\nexport const RemoteComponent: FC<RemoteComponentProps> = ({\n  unLoadScriptOnUnmount = true,\n  exportName = \"default\",\n  ...remoteModule\n}) => {\n  const { [exportName]: Component } = getModuleSuspended(remoteModule);\n\n  return <Component />;\n};\n","export const suspend = (promise: Promise<any>) => {\n  let result: any;\n  let status = \"pending\";\n\n  const suspender = promise.then(\n    (response) => {\n      status = \"success\";\n      result = response;\n    },\n    (error) => {\n      status = \"error\";\n      result = error;\n    }\n  );\n\n  return () => {\n    switch (status) {\n      case \"pending\": {\n        throw suspender;\n      }\n      case \"error\": {\n        throw result;\n      }\n      default: {\n        return result;\n      }\n    }\n  };\n};\n","/** @license React v17.0.2\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';require(\"object-assign\");var f=require(\"react\"),g=60103;exports.Fragment=60107;if(\"function\"===typeof Symbol&&Symbol.for){var h=Symbol.for;g=h(\"react.element\");exports.Fragment=h(\"react.fragment\")}var m=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,k){var b,d={},e=null,l=null;void 0!==k&&(e=\"\"+k);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(l=a.ref);for(b in a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n"],"names":["Wallet","provider","_network","a","_publicKey","_popup","_handlerAdded","_nextRequestId","_autoApprove","_responsePromises","Map","handleMessage","e","_injectedProvider","source","window","origin","_providerUrl","data","method","newPublicKey","PublicKey","params","publicKey","equals","handleDisconnect","autoApprove","emit","result","error","promises","get","id","resolve","reject","Error","_beforeUnload","disconnect","isObject","postMessage","isString","URL","hash","URLSearchParams","location","network","toString","this","addEventListener","Promise","sendRequest","name","open","once","removeEventListener","forEach","delete","connected","requestId","set","jsonrpc","focus","close","handleConnect","display","Uint8Array","response","signature","transaction","message","serializeMessage","addSignature","transactions","messages","map","tx","signatures","s","idx","__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","__exportStar","exports","p","prototype","hasOwnProperty","call","value","Farming","Swap","SPLT","Lamports","utils","schema","keystore","account","RawWallet","require","rawWallet_1","default","account_1","keystore_1","schema_1","utils_1","lamports_1","splt_1","swap_1","farming_1","toBuffer","arr","Buffer","constructor","encode","serialize","SOLANA_SCHEMA","decode","deserialize","decodeUnchecked","deserializeUnchecked","key","MAX_SEED_LENGTH","isPublicKeyData","decoded","bs58","_bn","eq","toBase58","toBytes","b","toArrayLike","zeroPad","createWithSeed","buffer","fromPublicKey","programId","sha256","createProgramAddress","seeds","seed","is_on_curve","publicKeyBytes","findProgramAddress","nonce","seedsWithNonce","address","err","isOnCurve","kind","fields","naclLowLevel","nacl","r","t","chk","num","den","den2","den4","den6","neq25519","gf1","I","c","d","_keypair","secretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","rustString","rsl","_decode","_encode","chars","str","decodeLength","bytes","len","size","elem","encodeLength","rem_len","args","ix","isAccountSigner","index","header","isAccountWritable","numRequiredSignatures","accountKeys","length","isProgramId","indexToProgramIds","has","programIds","nonProgramIds","filter","numKeys","keyCount","shortvec","instructions","instruction","programIdIndex","keyIndicesCount","accounts","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","signDataLayout","Layout","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","keys","recentBlockhash","signData","from","byteArray","accountCount","i","dataSlice","Message","DEFAULT_SIGNATURE","PACKET_DATA_SIZE","opts","add","items","item","TransactionInstruction","compileMessage","nonceInfo","console","feePayer","accountMetas","accountMeta","pubkey","isSigner","isWritable","x","y","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","feePayerIndex","payerMeta","signedKeys","unsignedKeys","meta","invariant","keyIndex","_compile","every","pair","setSigners","signers","seen","sign","uniqueSigners","signer","partialSign","_partialSign","_addSignature","findIndex","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","Transaction","populate","sigPubkeyPair","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","sendOptions","options","skipPreflight","preflightCommitment","commitment","connection","status","JSON","sleep","ms","setTimeout","encodeData","type","allocLength","alloc","layoutFields","decodeData","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","span","fromAccountData","nonceAccount","NonceAccount","authorizedPubkey","feeCalculator","decodeInstructionType","typeIndex","instructionTypeLayout","layout","decodeCreateAccount","SYSTEM_INSTRUCTION_LAYOUTS","fromPubkey","newAccountPubkey","lamports","space","decodeTransfer","toPubkey","decodeTransferWithSeed","basePubkey","decodeAllocate","accountPubkey","decodeAllocateWithSeed","decodeAssign","decodeAssignWithSeed","decodeCreateWithSeed","decodeNonceInitialize","authorized","noncePubkey","decodeNonceAdvance","decodeNonceWithdraw","decodeNonceAuthorize","newAuthorizedPubkey","checkProgramId","SystemProgram","checkKeyLength","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","createAccount","transfer","assign","base","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","getMinNumSignatures","Math","Loader","load","balanceNeeded","program","programInfo","payer","sendAndConfirmTransaction","dataLayout","chunkSize","offset","array","BPF_LOADER_PROGRAM_ID","global","self","__self__","F","fetch","DOMException","support","Symbol","Blob","viewClasses","isArrayBufferView","ArrayBuffer","isView","obj","indexOf","normalizeName","String","test","TypeError","toLowerCase","normalizeValue","iteratorFor","iterator","next","shift","done","Headers","headers","append","Array","isArray","getOwnPropertyNames","consumed","body","bodyUsed","fileReaderReady","reader","onload","onerror","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","buf","slice","view","byteLength","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","DataView","_bodyArrayBuffer","rejected","arrayBuffer","then","text","readAsText","readBlobAsText","fromCharCode","join","readArrayBufferAsText","formData","json","parse","oldValue","callback","thisArg","push","values","entries","methods","Request","input","url","credentials","mode","signal","upcased","toUpperCase","normalizeMethod","referrer","form","trim","split","replace","decodeURIComponent","parseHeaders","rawHeaders","line","parts","Response","bodyInit","ok","statusText","clone","redirectStatuses","redirect","RangeError","stack","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","withCredentials","responseType","setRequestHeader","onreadystatechange","readyState","send","polyfill","ponyfill","ctx","module","trailingZeros","n","getEpoch","getEpochAndSlotIndex","slot","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","firstNormalEpoch","getFirstSlotInEpoch","getLastSlotInEpoch","promiseTimeout","timeoutPromise","timeoutId","clearTimeout","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","code","unknown","optional","any","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","boolean","firstNormalSlot","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","logs","executable","owner","rentEpoch","unitsConsumed","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","version","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","writable","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockSignaturesRpcResult","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","lastFetch","transactionSignatures","simulatedSignatures","client","commitmentOrConfig","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","endpoint","useHttps","Number","makeWebsocketUrl","fetchWithMiddleware","clientBrowser","agent","too_many_requests_retries","waitTime","res","createRpcClient","requests","batch","createRpcBatchRequest","autoconnect","max_reconnects","Infinity","_wsOnOpen","bind","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","getBalanceAndContext","_buildArgs","_rpcRequest","unsafeRes","getBalance","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","_args","ownerAddress","getParsedTokenAccountsByOwner","getLargestAccounts","arg","config","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getAccountInfo","getMultipleAccountsInfo","publicKeys","getStakeActivation","getProgramAccounts","extra","configOrCommitment","encoding","getParsedProgramAccounts","confirmTransaction","decodedSignature","assert","start","Date","subscriptionCommitment","confirmPromise","subscriptionId","timeoutMs","_confirmTransactionInitialTimeout","duration","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","getSignatureStatus","getSignatureStatuses","getTransactionCount","getTotalSupply","getInflationGovernor","getInflationReward","addresses","getEpochInfo","getEpochSchedule","epochSchedule","EpochSchedule","getLeaderSchedule","getMinimumBalanceForRentExemption","getRecentBlockhashAndContext","getRecentPerformanceSamples","limit","getFeeCalculatorForBlockhash","getRecentBlockhash","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","getTransaction","getConfirmedBlock","getBlocks","endSlot","getConfirmedBlockSignatures","transactionDetails","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","methodName","_rpcBatchRequest","getConfirmedSignaturesForAddress","firstAvailableBlock","block","highestConfirmedRoot","getConfirmedSignaturesForAddress2","confirmedSignatureInfo","info","getSignaturesForAddress","getNonceAndContext","accountInfo","getNonce","requestAirdrop","to","_recentBlockhash","timeSinceFetch","_blockhashInfo","expired","_pollNewBlockhash","startTime","MS_PER_SLOT","simulateTransaction","transactionOrMessage","disableCache","includes","encodedTransaction","logTrace","traceIndent","SendTransactionError","sendTransaction","sendRawTransaction","sendEncodedTransaction","setInterval","clearInterval","_subscribe","sub","_rpcWebSocket","rpcMethod","_unsubscribe","unsubscribeId","_resetSubscriptions","_updateSubscriptions","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","_rpcWebSocketIdleTimeout","_accountChangeSubscriptions","_programAccountChangeSubscriptions","filters","_slotSubscriptions","_slotUpdateSubscriptions","_signatureSubscriptions","_rootSubscriptions","_logsSubscriptions","mentions","notification","onAccountChange","removeAccountChangeListener","subInfo","accountId","onProgramAccountChange","removeProgramAccountChangeListener","onLogs","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","override","onSignature","onSignatureWithOptions","removeSignatureListener","onRootChange","removeRootChangeListener","generate","Keypair","fromSecretKey","keypair","encoder","fromSeed","ED25519_INSTRUCTION_LAYOUT","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","Ed25519Program","createInstructionWithPrivateKey","privateKey","STAKE_CONFIG_ID","Lockup","decodeInitialize","STAKE_INSTRUCTION_LAYOUTS","lockup","stakePubkey","Authorized","decodeDelegate","decodeAuthorize","stakeAuthorizationType","decodeAuthorizeWithSeed","authorityOwner","authorityBase","authoritySeed","decodeSplit","splitStakePubkey","decodeMerge","sourceStakePubKey","decodeWithdraw","decodeDeactivate","StakeProgram","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeAuthorizationLayout","Staker","Withdrawer","initialize","staker","withdrawer","unixTimestamp","custodian","delegate","authorize","custodianPubkey","newAuthorized","authorizeWithSeed","merge","withdraw","deactivate","ecdsaSign","SECP256K1_INSTRUCTION_LAYOUT","publicKeyToEthAddress","keccak_256","Secp256k1Program","ethAddress","recoveryId","createInstructionWithEthAddress","rawAddress","ethAddressOffset","ethAddressInstructionIndex","pkey","publicKeyCreate","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","fromConfigData","configKeys","rawInfo","assertType","ValidatorInfo","VOTE_PROGRAM_ID","VoteAccountLayout","va","VoteAccount","authorizedVoterPubkey","authorizedWithdrawerPubkey","votes","credits","lastEpochCredits","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL","filename","mime","bom","navigator","msSaveBlob","blobURL","createObjectURL","webkitURL","tempLink","document","createElement","style","href","setAttribute","download","appendChild","click","removeChild","revokeObjectURL","define","numeral","_","VERSION","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","Numeral","_input","_value","unformatFunction","regexp","isNumeral","isNaN","regexps","unformat","match","stringToNumber","numberToFormat","format","roundingFunction","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","leadingCount","abbr","trillion","billion","million","thousand","decimal","neg","RegExp","abbreviations","toFixed","delimiters","abbreviation","stringOriginal","currency","symbol","pow","min","search","insert","subString","reduce","arguments","multiplier","correctionFactor","accum","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","localeData","reset","register","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","warn","substr","fn","inputString","formatFunction","round","corrFactor","cback","curr","currI","O","subtract","multiply","divide","difference","ordinal","splice","suffixes","binary","unformatRegex","concat","suffix","bytesMultiplier","symbols","before","after","toExponential","hours","floor","minutes","seconds","timeArray","getOwnPropertySymbols","propIsEnumerable","propertyIsEnumerable","toObject","test1","test2","test3","letter","shouldUseNative","target","getRemoteModuleId","attachScript","remoteModule","existingElement","element","scriptLoadPromise","loadModule","__webpack_init_sharing__","container","__webpack_share_scopes__","factory","Module","getModuleSuspended","existingCaller","caller","suspender","suspend","_module","getModule","useRemoteModule","f","g","for","h","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","ref","__self","__source","q","l","defaultProps","$$typeof","props","_owner","jsx","jsxs"],"sourceRoot":""}