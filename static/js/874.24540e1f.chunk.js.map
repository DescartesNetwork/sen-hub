{"version":3,"file":"static/js/874.24540e1f.chunk.js","mappings":"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","sources":["shared/pdb/ipfs.ts","shared/util.ts","shared/pdb/index.ts","shared/antd/ionicon/assets/icon-telegram.svg","shared/antd/ionicon/customs.tsx","shared/antd/ionicon/index.tsx","app/model/main.controller.tsx","app/configs/manifest.config.ts","app/configs/sol.config.ts","app/configs/index.ts","app/page/index.tsx","app/widget/index.tsx","shared/devTools.ts","app/model/index.ts","app/bootstrap.app.tsx","shared/runtime.ts","shared/storage.ts"],"sourcesContent":["import { create, isIPFS } from 'ipfs-core'\nimport { asyncWait } from 'shared/util'\n\nclass IPFS {\n  private _ipfs: any = async () => {\n    try {\n      if (!window.ipfs) window.ipfs = await create()\n      return window.ipfs\n    } catch (er) {\n      await asyncWait(500)\n      return await this._ipfs()\n    }\n  }\n\n  static isCID = (cid: string | undefined | null): boolean => {\n    try {\n      if (!cid) return false\n      return isIPFS.multihash(cid)\n    } catch (er) {\n      return false\n    }\n  }\n\n  get = async (cid: string) => {\n    if (!IPFS.isCID(cid)) throw new Error('Invalid CID')\n    const ipfs = await this._ipfs()\n    const stream = await ipfs.cat(cid)\n    let raw = ''\n    for await (const chunk of stream) raw += Buffer.from(chunk).toString()\n    const data = JSON.parse(raw)\n    return data\n  }\n\n  set = async (data: object): Promise<string> => {\n    if (!data) throw new Error('Empty data')\n    const raw = JSON.stringify(data)\n    const ipfs = await this._ipfs()\n    const { path: cid } = await ipfs.add(raw)\n    return cid as string\n  }\n}\n\nexport default IPFS\n","import { account } from '@senswap/sen-js'\nimport numbro from 'numbro'\nimport { net } from 'shared/runtime'\n\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://explorer.solana.com/address/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://explorer.solana.com/tx/${addressOrTxId}?cluster=${net}`\n}\n\nexport const numeric = (\n  value?: number | string | BigInt,\n): ReturnType<typeof numbro> => {\n  if (!value) return numbro('0')\n  return numbro(value)\n}\n","import localForage from 'localforage'\nimport { account } from '@senswap/sen-js'\nimport IPFS from './ipfs'\n\n/**\n * Persistent Database\n */\nclass PDB {\n  readonly dbName: string\n  private driver: any\n  private ipfs: IPFS\n\n  constructor(walletAddress: string) {\n    if (!account.isAddress(walletAddress)) throw new Error('Invalid address')\n    this.dbName = walletAddress\n    this.driver = [localForage.WEBSQL, localForage.LOCALSTORAGE]\n    this.ipfs = new IPFS()\n  }\n\n  /**\n   * Local\n   */\n\n  createInstance = (appId: string): LocalForage => {\n    return localForage.createInstance({\n      driver: this.driver,\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  dropInstance = async (appId: string): Promise<void> => {\n    const instance = this.createInstance(appId)\n    await instance.clear()\n    return await localForage.dropInstance({\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  all = async (): Promise<any> => {\n    let data: any = {}\n    const appIds = (\n      ((await this.createInstance('sentre').getItem('appIds')) as string[]) ||\n      []\n    )\n      .flat()\n      .concat(['sentre'])\n    for (const appId of appIds) {\n      data[appId] = {}\n      const instance = this.createInstance(appId)\n      await instance.iterate((value: string, key: string) => {\n        data[appId][key] = value\n      })\n    }\n    return data\n  }\n\n  /**\n   * Cloud\n   */\n\n  fetch = async (cid: string) => {\n    return await this.ipfs.get(cid)\n  }\n\n  backup = async () => {\n    const data = await this.all()\n    return await this.ipfs.set(data)\n  }\n\n  restore = async (cid: string) => {\n    // Download data\n    const data = await this.fetch(cid)\n    // Apply to storage\n    for (const appId in data) {\n      const instance = await this.createInstance(appId)\n      for (const key in data[appId]) {\n        const value = data[appId][key]\n        await instance.setItem(key, value)\n      }\n    }\n    return data\n  }\n}\n\nexport default PDB\n\n/**\n * High abtraction pdb for app\n */\nexport const createPDB = (walletArress: string, appId: string) => {\n  return account.isAddress(walletArress)\n    ? new PDB(walletArress).createInstance(appId)\n    : undefined\n}\n","var _path;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgIconTelegram({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"inherit\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 50 50\",\n    width: \"50px\",\n    height: \"50px\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M46.137,6.552c-0.75-0.636-1.928-0.727-3.146-0.238l-0.002,0C41.708,6.828,6.728,21.832,5.304,22.445 c-0.259,0.09-2.521,0.934-2.288,2.814c0.208,1.695,2.026,2.397,2.248,2.478l8.893,3.045c0.59,1.964,2.765,9.21,3.246,10.758 c0.3,0.965,0.789,2.233,1.646,2.494c0.752,0.29,1.5,0.025,1.984-0.355l5.437-5.043l8.777,6.845l0.209,0.125 c0.596,0.264,1.167,0.396,1.712,0.396c0.421,0,0.825-0.079,1.211-0.237c1.315-0.54,1.841-1.793,1.896-1.935l6.556-34.077 C47.231,7.933,46.675,7.007,46.137,6.552z M22,32l-3,8l-3-10l23-17L22,32z\"\n  })));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgIconTelegram);\nexport default __webpack_public_path__ + \"static/media/icon-telegram.2450489f40d03000fe65fc1c6f238d85.svg\";\nexport { ForwardRef as ReactComponent };","import IconTele from './assets/icon-telegram.svg'\n\nexport const CUSTOM_ICONS: Record<string, string> = {\n  'logo-telegram': IconTele,\n}\n","/**\n * IonIcon 5\n * Credit https://ionic.io/ionicons\n */\n\nimport { forwardRef } from 'react'\nimport { CUSTOM_ICONS } from './customs'\n\n/**\n * IonIcon\n * @param name The icon name. You can find it here https://ionic.io/ionicons\n * @param className To modify the span class\n */\nconst IonIcon = forwardRef<\n  HTMLElement,\n  { name: string; className?: string } & any\n>(({ name, className, ...props }, ref) => {\n  const cln = className ? 'anticon ' + className : 'anticon'\n\n  return (\n    <span className={cln} {...props}>\n      {CUSTOM_ICONS[name] ? (\n        <ion-icon ref={ref} src={CUSTOM_ICONS[name]} />\n      ) : (\n        <ion-icon ref={ref} name={name} />\n      )}\n    </span>\n  )\n})\n\nexport default IonIcon\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\nexport type State = {\n  counter: number\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'main'\nconst initialState: State = {\n  counter: 0,\n}\n\n/**\n * Actions\n */\n\nexport const increaseCounter = createAsyncThunk<State, void, { state: any }>(\n  `${NAME}/increaseCounter`,\n  async (_, { getState }) => {\n    const {\n      main: { counter },\n    } = getState()\n    return { counter: counter + 1 }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      increaseCounter.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string' ||\n  typeof process.env.REACT_APP_SENHUB !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  appId: string\n  url: string\n  senhub: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n  senhub: process.env.REACT_APP_SENHUB,\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  spltAddress: string\n  splataAddress: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    node: 'https://api.devnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    node: 'https://api.testnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    node: 'https://api.mainnet-beta.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { env, net } from 'shared/runtime'\nimport manifest from './manifest.config'\nimport sol from './sol.config'\n\nconst configs = {\n  manifest: manifest[env],\n  sol: sol[net],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { useCallback, useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { createPDB } from 'shared/pdb'\n\nimport { Row, Col, Typography, Button, Space } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { AppDispatch, AppState } from 'app/model'\nimport { increaseCounter } from 'app/model/main.controller'\nimport { useWallet } from 'senhub/providers'\nimport configs from 'app/configs'\n\nconst {\n  manifest: { appId },\n} = configs\n\nconst Page = () => {\n  const {\n    wallet: { address },\n  } = useWallet()\n  const dispatch = useDispatch<AppDispatch>()\n  const { counter } = useSelector((state: AppState) => state.main)\n\n  const pdb = useMemo(() => createPDB(address, appId), [address])\n  const increase = useCallback(() => dispatch(increaseCounter()), [dispatch])\n  useEffect(() => {\n    if (pdb) pdb.setItem('counter', counter)\n  }, [pdb, counter])\n\n  return (\n    <Row gutter={[24, 24]} align=\"middle\">\n      <Col span={24}>\n        <Space align=\"center\">\n          <IonIcon name=\"newspaper-outline\" />\n          <Typography.Title level={4}>Page</Typography.Title>\n        </Space>\n      </Col>\n      <Col span={24}>\n        <Typography.Text>Address: {address}</Typography.Text>\n      </Col>\n      <Col>\n        <Typography.Text>Counter: {counter}</Typography.Text>\n      </Col>\n      <Col>\n        <Button onClick={increase}>Increase</Button>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Page\n","import { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Row, Col, Typography, Space, Button } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { AppDispatch, AppState } from 'app/model'\nimport { increaseCounter } from 'app/model/main.controller'\nimport { env } from 'shared/runtime'\nimport { useUI } from 'senhub/providers'\n\nconst Widget = () => {\n  const {\n    ui: { width, infix },\n  } = useUI()\n  const dispatch = useDispatch<AppDispatch>()\n  const { counter } = useSelector((state: AppState) => state.main)\n  const increase = useCallback(() => dispatch(increaseCounter()), [dispatch])\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Space align=\"center\">\n          <IonIcon name=\"apps-outline\" />\n          <Typography.Title level={4}>Widget</Typography.Title>\n        </Space>\n      </Col>\n      <Col span={24}>\n        <Typography.Text>\n          Env: {env} - {width}px - {infix}\n        </Typography.Text>\n      </Col>\n      <Col>\n        <Typography.Text>Counter: {counter}</Typography.Text>\n      </Col>\n      <Col>\n        <Button onClick={increase}>Increase</Button>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Widget\n","// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nexport const devTools = (appName: string): any => {\n  if (process.env.REACT_APP_ENV !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\n// BigInt Serialization Middleware\n// https://redux-toolkit.js.org/api/serializabilityMiddleware\nconst isPlain = (val: any): boolean => {\n  const isPlainObject = (obj: object): boolean => {\n    if (obj === null) return false\n    const proto = Object.getPrototypeOf(obj)\n    return proto !== null && Object.getPrototypeOf(proto) === null\n  }\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint'\n  )\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString() // https://github.com/GoogleChromeLabs/jsbi/issues/30\n}\nexport const bigintSerializationMiddleware = {\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n}\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'shared/devTools'\n\nimport main from 'app/model/main.controller'\n\n/**\n * Isolated store\n */\nconst model = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools('myapp'),\n  reducer: {\n    main,\n  },\n})\n\nexport type AppState = ReturnType<typeof model.getState>\nexport type AppDispatch = typeof model.dispatch\nexport default model\n","import { Provider } from 'react-redux'\nimport { WalletProvider, UIProvider } from 'senhub/providers'\n\nimport PageView from 'app/page'\nimport WidgetView from 'app/widget'\n\nimport model from 'app/model'\nimport configs from 'app/configs'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const Page = () => {\n  return (\n    <UIProvider appId={appId} antd>\n      <WalletProvider>\n        <Provider store={model}>\n          <PageView />\n        </Provider>\n      </WalletProvider>\n    </UIProvider>\n  )\n}\n\nexport const widgetConfig: WidgetConfig = {\n  size: 'small',\n  type: 'solid',\n}\n\nexport const Widget = () => {\n  return (\n    <UIProvider appId={appId} antd>\n      <Provider store={model}>\n        <WidgetView />\n      </Provider>\n    </UIProvider>\n  )\n}\n","import storage from './storage'\n\n/**\n * Environment\n */\nconst getEnv = () => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return 'development'\n    case 'staging':\n      return 'staging'\n    case 'production':\n      return 'production'\n    default:\n      return 'development'\n  }\n}\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = getEnv()\n\n/**\n * Network\n */\nconst getNetwork = () => {\n  switch (storage.get('network')) {\n    case 'devnet':\n      return 'devnet'\n    case 'testnet':\n      return 'testnet'\n    case 'mainnet':\n      return 'mainnet'\n    default:\n      return 'mainnet'\n  }\n}\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = getNetwork()\n\nexport const onSwitchNetwork = (value: Net) => {\n  storage.set('network', value)\n  return window.location.reload()\n}\n","const KEY = 'sentre'\nconst driver = window.localStorage\n\nconst convert = (value: string | null) => {\n  if (!value) return null\n  try {\n    return JSON.parse(value)\n  } catch (e) {\n    return null\n  }\n}\n\nconst storage = {\n  set: (key: string, value: any) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') data = {}\n    data[key] = value\n    driver.setItem(KEY, JSON.stringify(data))\n  },\n  get: (key: string) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') return null\n    return data[key]\n  },\n  clear: (key: string) => {\n    storage.set(key, null)\n  },\n}\n\nexport default storage\n"],"names":["IPFS","_ipfs","async","window","ipfs","create","er","ms","Promise","resolve","setTimeout","this","get","isCID","cid","Error","stream","cat","raw","chunk","Buffer","from","toString","JSON","parse","set","data","stringify","path","add","isIPFS","PDB","constructor","walletAddress","dbName","driver","createInstance","appId","localForage","name","storeName","dropInstance","instance","clear","all","appIds","getItem","flat","concat","iterate","value","key","fetch","backup","restore","setItem","account","CUSTOM_ICONS","forwardRef","className","props","ref","cln","src","NAME","increaseCounter","createAsyncThunk","_","getState","main","counter","createSlice","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","payload","Object","assign","shared","process","url","senhub","devnet","node","spltAddress","splataAddress","testnet","mainnet","manifest","development","staging","production","env","sol","net","configs","wallet","address","useWallet","dispatch","useDispatch","useSelector","pdb","useMemo","walletArress","undefined","createPDB","increase","useCallback","useEffect","Row","gutter","align","Col","span","Space","Typography","level","Button","onClick","ui","width","infix","useUI","BigInt","prototype","toJSON","bigintSerializationMiddleware","serializableCheck","isSerializable","val","Array","isArray","obj","proto","getPrototypeOf","isPlainObject","configureStore","middleware","getDefaultMiddleware","devTools","reducer","Page","UIProvider","antd","WalletProvider","Provider","store","model","widgetConfig","size","type","Widget","storage","getNetwork","KEY","localStorage","convert","e"],"sourceRoot":""}