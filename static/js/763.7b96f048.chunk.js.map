{"version":3,"file":"static/js/763.7b96f048.chunk.js","mappings":"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","sources":["../node_modules/@senswap/sen-js/dist/index.js","../node_modules/@solana/spl-token-registry/src/lib/tokenlist.ts","../node_modules/@solana/web3.js/src/util/to-buffer.ts","../node_modules/@solana/web3.js/src/util/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/account.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/util/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/message.ts","../node_modules/@solana/web3.js/src/util/assert.ts","../node_modules/@solana/web3.js/src/transaction.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/util/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/util/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/system-program.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/@solana/web3.js/node_modules/cross-fetch/dist/browser-ponyfill.js","../node_modules/@solana/web3.js/src/epoch-schedule.ts","../node_modules/@solana/web3.js/src/errors.ts","../node_modules/@solana/web3.js/src/util/promise-timeout.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/util/url.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/ed25519-program.ts","../node_modules/@solana/web3.js/src/stake-program.ts","../node_modules/@solana/web3.js/src/secp256k1-program.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@solana/web3.js/src/util/send-and-confirm-raw-transaction.ts","../node_modules/@solana/web3.js/src/util/cluster.ts","../node_modules/@solana/web3.js/src/index.ts","../node_modules/cross-fetch/dist/browser-ponyfill.js","../node_modules/flexsearch/dist/flexsearch.bundle.js","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/jsx-runtime.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Farming = exports.Swap = exports.SPLT = exports.Lamports = exports.utils = exports.schema = exports.keystore = exports.account = exports.RawWallet = void 0;\n__exportStar(require(\"./rawWallet\"), exports);\nvar rawWallet_1 = require(\"./rawWallet\");\nObject.defineProperty(exports, \"RawWallet\", { enumerable: true, get: function () { return rawWallet_1.default; } });\nvar account_1 = require(\"./account\");\nObject.defineProperty(exports, \"account\", { enumerable: true, get: function () { return account_1.default; } });\n__exportStar(require(\"./default\"), exports);\n__exportStar(require(\"./keystore\"), exports);\nvar keystore_1 = require(\"./keystore\");\nObject.defineProperty(exports, \"keystore\", { enumerable: true, get: function () { return keystore_1.default; } });\n__exportStar(require(\"./schema\"), exports);\nvar schema_1 = require(\"./schema\");\nObject.defineProperty(exports, \"schema\", { enumerable: true, get: function () { return schema_1.default; } });\nvar utils_1 = require(\"./utils\");\nObject.defineProperty(exports, \"utils\", { enumerable: true, get: function () { return utils_1.default; } });\nvar lamports_1 = require(\"./lamports\");\nObject.defineProperty(exports, \"Lamports\", { enumerable: true, get: function () { return lamports_1.default; } });\n__exportStar(require(\"./splt\"), exports);\nvar splt_1 = require(\"./splt\");\nObject.defineProperty(exports, \"SPLT\", { enumerable: true, get: function () { return splt_1.default; } });\n__exportStar(require(\"./swap\"), exports);\nvar swap_1 = require(\"./swap\");\nObject.defineProperty(exports, \"Swap\", { enumerable: true, get: function () { return swap_1.default; } });\n__exportStar(require(\"./farming\"), exports);\nvar farming_1 = require(\"./farming\");\nObject.defineProperty(exports, \"Farming\", { enumerable: true, get: function () { return farming_1.default; } });\n","import { fetch } from 'cross-fetch';\n\nimport tokenlist from './../tokens/solana.tokenlist.json';\n\nexport enum ENV {\n  MainnetBeta = 101,\n  Testnet = 102,\n  Devnet = 103,\n}\n\nexport interface TokenList {\n  readonly name: string;\n  readonly logoURI: string;\n  readonly tags: { [tag: string]: TagDetails };\n  readonly timestamp: string;\n  readonly tokens: TokenInfo[];\n}\n\nexport interface TagDetails {\n  readonly name: string;\n  readonly description: string;\n}\n\nexport interface TokenExtensions {\n  readonly website?: string;\n  readonly bridgeContract?: string;\n  readonly assetContract?: string;\n  readonly address?: string;\n  readonly explorer?: string;\n  readonly twitter?: string;\n  readonly github?: string;\n  readonly medium?: string;\n  readonly tgann?: string;\n  readonly tggroup?: string;\n  readonly discord?: string;\n  readonly serumV3Usdt?: string;\n  readonly serumV3Usdc?: string;\n  readonly coingeckoId?: string;\n  readonly imageUrl?: string;\n  readonly description?: string;\n}\n\nexport interface TokenInfo {\n  readonly chainId: number;\n  readonly address: string;\n  readonly name: string;\n  readonly decimals: number;\n  readonly symbol: string;\n  readonly logoURI?: string;\n  readonly tags?: string[];\n  readonly extensions?: TokenExtensions;\n}\n\nexport type TokenInfoMap = Map<string, TokenInfo>;\n\nexport const CLUSTER_SLUGS: { [id: string]: ENV } = {\n  'mainnet-beta': ENV.MainnetBeta,\n  testnet: ENV.Testnet,\n  devnet: ENV.Devnet,\n};\n\nexport class GitHubTokenListResolutionStrategy {\n  repositories = [\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/src/tokens/solana.tokenlist.json',\n  ];\n\n  resolve = () => {\n    return queryJsonFiles(this.repositories);\n  };\n}\n\nexport class CDNTokenListResolutionStrategy {\n  repositories = [\n    'https://cdn.jsdelivr.net/gh/solana-labs/token-list@main/src/tokens/solana.tokenlist.json',\n  ];\n\n  resolve = () => {\n    return queryJsonFiles(this.repositories);\n  };\n}\n\nconst queryJsonFiles = async (files: string[]) => {\n  const responses: TokenList[] = (await Promise.all(\n    files.map(async (repo) => {\n      try {\n        const response = await fetch(repo);\n        const json = (await response.json()) as TokenList;\n        return json;\n      } catch {\n        console.info(\n          `@solana/token-registry: falling back to static repository.`\n        );\n        return tokenlist;\n      }\n    })\n  )) as TokenList[];\n\n  return responses\n    .map((tokenlist: TokenList) => tokenlist.tokens)\n    .reduce((acc, arr) => (acc as TokenInfo[]).concat(arr), []);\n};\n\nexport enum Strategy {\n  GitHub = 'GitHub',\n  Static = 'Static',\n  Solana = 'Solana',\n  CDN = 'CDN',\n}\n\nexport class SolanaTokenListResolutionStrategy {\n  resolve = () => {\n    throw new Error(`Not Implemented Yet.`);\n  };\n}\n\nexport class StaticTokenListResolutionStrategy {\n  resolve = () => {\n    return tokenlist.tokens;\n  };\n}\n\nexport class TokenListProvider {\n  static strategies = {\n    [Strategy.GitHub]: new GitHubTokenListResolutionStrategy(),\n    [Strategy.Static]: new StaticTokenListResolutionStrategy(),\n    [Strategy.Solana]: new SolanaTokenListResolutionStrategy(),\n    [Strategy.CDN]: new CDNTokenListResolutionStrategy(),\n  };\n\n  resolve = async (\n    strategy: Strategy = Strategy.CDN\n  ): Promise<TokenListContainer> => {\n    return new TokenListContainer(\n      await TokenListProvider.strategies[strategy].resolve()\n    );\n  };\n}\n\nexport class TokenListContainer {\n  constructor(private tokenList: TokenInfo[]) {}\n\n  filterByTag = (tag: string) => {\n    return new TokenListContainer(\n      this.tokenList.filter((item) => (item.tags || []).includes(tag))\n    );\n  };\n\n  filterByChainId = (chainId: number | ENV) => {\n    return new TokenListContainer(\n      this.tokenList.filter((item) => item.chainId === chainId)\n    );\n  };\n\n  excludeByChainId = (chainId: number | ENV) => {\n    return new TokenListContainer(\n      this.tokenList.filter((item) => item.chainId !== chainId)\n    );\n  };\n\n  excludeByTag = (tag: string) => {\n    return new TokenListContainer(\n      this.tokenList.filter((item) => !(item.tags || []).includes(tag))\n    );\n  };\n\n  filterByClusterSlug = (slug: string) => {\n    if (slug in CLUSTER_SLUGS) {\n      return this.filterByChainId(CLUSTER_SLUGS[slug]);\n    }\n    throw new Error(\n      `Unknown slug: ${slug}, please use one of ${Object.keys(CLUSTER_SLUGS)}`\n    );\n  };\n\n  getList = () => {\n    return this.tokenList;\n  };\n}\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from 'crypto-hash';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import * as nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (\n  property: string = 'publicKey',\n): BufferLayout.Layout => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): BufferLayout.Layout => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: any, offset: any) => {\n    const data = _decode(buffer, offset);\n    return data['chars'].toString('utf8');\n  };\n\n  rsl.encode = (str: any, buffer: any, offset: any) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  (rsl as any).alloc = (str: any) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS: {\n  [type in SystemInstructionType]: InstructionType;\n} = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n}({}));\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport fetch from 'cross-fetch';\nimport type {Response} from 'cross-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: SimulatedTransactionAccountInfo[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          pick({\n            executable: boolean(),\n            owner: string(),\n            lamports: number(),\n            data: array(string()),\n            rentEpoch: optional(number()),\n          }),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger with signatures only\n */\nexport type ConfirmedBlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: (url: string, options: any) => Promise<Response>;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = (url: string, options: any) => {\n      return new Promise<Response>((resolve, reject) => {\n        fetchMiddleware(url, options, async (url: string, options: any) => {\n          try {\n            resolve(await fetch(url, options));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      });\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlockSignatures\" message\n */\nconst GetConfirmedBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch infor for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: Function,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retring calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get total supply: ' + res.error.message);\n    }\n    return res.result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a processed transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const result = await this.getBlock(slot, {commitment});\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const result = await this.getTransaction(signature, {commitment});\n    if (!result) return result;\n    const {message, signatures} = result.transaction;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        if (err instanceof Error) {\n          console.error(\n            `${rpcMethod} error for argument`,\n            rpcArgs,\n            err.message,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import * as nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        publicKeyOffset,\n        publicKeyInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  | 'AuthorizeWithSeed'\n  | 'Authorize'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Split'\n  | 'Withdraw'\n  | 'Merge';\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS: {\n  [type in StakeInstructionType]: InstructionType;\n} = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport {keccak_256} from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256.update(toBuffer(publicKey)).digest()).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedVoterPubkey = args.authorizedVoterPubkey;\n    this.authorizedWithdrawerPubkey = args.authorizedWithdrawerPubkey;\n    this.commission = args.commission;\n    this.votes = args.votes;\n    this.rootSlot = args.rootSlot;\n    this.epoch = args.epoch;\n    this.credits = args.credits;\n    this.lastEpochCredits = args.lastEpochCredits;\n    this.epochCredits = args.epochCredits;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedVoterPubkey: new PublicKey(va.authorizedVoterPubkey),\n      authorizedWithdrawerPubkey: new PublicKey(va.authorizedWithdrawerPubkey),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      epoch: va.epoch,\n      credits: va.credits,\n      lastEpochCredits: va.lastEpochCredits,\n      epochCredits: va.epochCredits,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n","var __self__ = (function (root) {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = root.DOMException\n}\nF.prototype = root;\nreturn new F();\n})(typeof self !== 'undefined' ? self : this);\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  return exports;\n\n}({}));\n})(__self__);\ndelete __self__.fetch.polyfill\nexports = __self__.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = __self__.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = __self__.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = __self__.Headers\nexports.Request = __self__.Request\nexports.Response = __self__.Response\nmodule.exports = exports\n","/**!\r\n * FlexSearch.js v0.7.21 (Bundle)\r\n * Copyright 2018-2021 Nextapps GmbH\r\n * Author: Thomas Wilkerling\r\n * Licence: Apache-2.0\r\n * https://github.com/nextapps-de/flexsearch\r\n */\n(function _f(self){'use strict';try{if(module)self=module}catch(e){}self._factory=_f;var t;function u(a){return\"undefined\"!==typeof a?a:!0}function aa(a){const b=Array(a);for(let c=0;c<a;c++)b[c]=v();return b}function v(){return Object.create(null)}function ba(a,b){return b.length-a.length}function x(a){return\"string\"===typeof a}function C(a){return\"object\"===typeof a}function D(a){return\"function\"===typeof a};function ca(a,b){var c=da;if(a&&(b&&(a=E(a,b)),this.H&&(a=E(a,this.H)),this.J&&1<a.length&&(a=E(a,this.J)),c||\"\"===c)){a=a.split(c);if(this.filter){b=this.filter;c=a.length;const d=[];for(let e=0,f=0;e<c;e++){const g=a[e];g&&!b[g]&&(d[f++]=g)}a=d}return a}return a}const da=/[\\p{Z}\\p{S}\\p{P}\\p{C}]+/u,ea=/[\\u0300-\\u036f]/g;\nfunction fa(a,b){const c=Object.keys(a),d=c.length,e=[];let f=\"\",g=0;for(let h=0,k,m;h<d;h++)k=c[h],(m=a[k])?(e[g++]=F(b?\"(?!\\\\b)\"+k+\"(\\\\b|_)\":k),e[g++]=m):f+=(f?\"|\":\"\")+k;f&&(e[g++]=F(b?\"(?!\\\\b)(\"+f+\")(\\\\b|_)\":\"(\"+f+\")\"),e[g]=\"\");return e}function E(a,b){for(let c=0,d=b.length;c<d&&(a=a.replace(b[c],b[c+1]),a);c+=2);return a}function F(a){return new RegExp(a,\"g\")}function ha(a){let b=\"\",c=\"\";for(let d=0,e=a.length,f;d<e;d++)(f=a[d])!==c&&(b+=c=f);return b};var ja={encode:ia,F:!1,G:\"\"};function ia(a){return ca.call(this,(\"\"+a).toLowerCase(),!1)};const ka={},G={};function la(a){I(a,\"add\");I(a,\"append\");I(a,\"search\");I(a,\"update\");I(a,\"remove\")}function I(a,b){a[b+\"Async\"]=function(){const c=this,d=arguments;var e=d[d.length-1];let f;D(e)&&(f=e,delete d[d.length-1]);e=new Promise(function(g){setTimeout(function(){c.async=!0;const h=c[b].apply(c,d);c.async=!1;g(h)})});return f?(e.then(f),this):e}};function ma(a,b,c,d){const e=a.length;let f=[],g,h,k=0;d&&(d=[]);for(let m=e-1;0<=m;m--){const n=a[m],w=n.length,q=v();let r=!g;for(let l=0;l<w;l++){const p=n[l],z=p.length;if(z)for(let B=0,A,y;B<z;B++)if(y=p[B],g){if(g[y]){if(!m)if(c)c--;else if(f[k++]=y,k===b)return f;if(m||d)q[y]=1;r=!0}if(d&&(h[y]=(A=h[y])?++A:A=1,A<e)){const H=d[A-2]||(d[A-2]=[]);H[H.length]=y}}else q[y]=1}if(d)g||(h=q);else if(!r)return[];g=q}if(d)for(let m=d.length-1,n,w;0<=m;m--){n=d[m];w=n.length;for(let q=0,r;q<w;q++)if(r=\nn[q],!g[r]){if(c)c--;else if(f[k++]=r,k===b)return f;g[r]=1}}return f}function na(a,b){const c=v(),d=v(),e=[];for(let f=0;f<a.length;f++)c[a[f]]=1;for(let f=0,g;f<b.length;f++){g=b[f];for(let h=0,k;h<g.length;h++)k=g[h],c[k]&&!d[k]&&(d[k]=1,e[e.length]=k)}return e};function J(a){this.l=!0!==a&&a;this.cache=v();this.h=[]}function oa(a,b,c){C(a)&&(a=a.query);let d=this.cache.get(a);d||(d=this.search(a,b,c),this.cache.set(a,d));return d}J.prototype.set=function(a,b){if(!this.cache[a]){var c=this.h.length;c===this.l?delete this.cache[this.h[c-1]]:c++;for(--c;0<c;c--)this.h[c]=this.h[c-1];this.h[0]=a}this.cache[a]=b};J.prototype.get=function(a){const b=this.cache[a];if(this.l&&b&&(a=this.h.indexOf(a))){const c=this.h[a-1];this.h[a-1]=this.h[a];this.h[a]=c}return b};const qa={memory:{charset:\"latin:extra\",D:3,B:4,m:!1},performance:{D:3,B:3,s:!1,context:{depth:2,D:1}},match:{charset:\"latin:extra\",G:\"reverse\"},score:{charset:\"latin:advanced\",D:20,B:3,context:{depth:3,D:9}},\"default\":{}};function ra(a,b,c,d,e,f){setTimeout(function(){const g=a(c,JSON.stringify(f));g&&g.then?g.then(function(){b.export(a,b,c,d,e+1)}):b.export(a,b,c,d,e+1)})};function K(a,b){if(!(this instanceof K))return new K(a);var c;if(a){x(a)?a=qa[a]:(c=a.preset)&&(a=Object.assign({},c[c],a));c=a.charset;var d=a.lang;x(c)&&(-1===c.indexOf(\":\")&&(c+=\":default\"),c=G[c]);x(d)&&(d=ka[d])}else a={};let e,f,g=a.context||{};this.encode=a.encode||c&&c.encode||ia;this.register=b||v();this.D=e=a.resolution||9;this.G=b=c&&c.G||a.tokenize||\"strict\";this.depth=\"strict\"===b&&g.depth;this.l=u(g.bidirectional);this.s=f=u(a.optimize);this.m=u(a.fastupdate);this.B=a.minlength||1;this.C=\na.boost;this.map=f?aa(e):v();this.A=e=g.resolution||1;this.h=f?aa(e):v();this.F=c&&c.F||a.rtl;this.H=(b=a.matcher||d&&d.H)&&fa(b,!1);this.J=(b=a.stemmer||d&&d.J)&&fa(b,!0);if(c=b=a.filter||d&&d.filter){c=b;d=v();for(let h=0,k=c.length;h<k;h++)d[c[h]]=1;c=d}this.filter=c;this.cache=(b=a.cache)&&new J(b)}t=K.prototype;t.append=function(a,b){return this.add(a,b,!0)};\nt.add=function(a,b,c,d){if(b&&(a||0===a)){if(!d&&!c&&this.register[a])return this.update(a,b);b=this.encode(b);if(d=b.length){const m=v(),n=v(),w=this.depth,q=this.D;for(let r=0;r<d;r++){let l=b[this.F?d-1-r:r];var e=l.length;if(l&&e>=this.B&&(w||!n[l])){var f=L(q,d,r),g=\"\";switch(this.G){case \"full\":if(3<e){for(f=0;f<e;f++)for(var h=e;h>f;h--)if(h-f>=this.B){var k=L(q,d,r,e,f);g=l.substring(f,h);M(this,n,g,k,a,c)}break}case \"reverse\":if(2<e){for(h=e-1;0<h;h--)g=l[h]+g,g.length>=this.B&&M(this,n,\ng,L(q,d,r,e,h),a,c);g=\"\"}case \"forward\":if(1<e){for(h=0;h<e;h++)g+=l[h],g.length>=this.B&&M(this,n,g,f,a,c);break}default:if(this.C&&(f=Math.min(f/this.C(b,l,r)|0,q-1)),M(this,n,l,f,a,c),w&&1<d&&r<d-1)for(e=v(),g=this.A,f=l,h=Math.min(w+1,d-r),e[f]=1,k=1;k<h;k++)if((l=b[this.F?d-1-r-k:r+k])&&l.length>=this.B&&!e[l]){e[l]=1;const p=this.l&&l>f;M(this,m,p?f:l,L(g+(d/2>g?0:1),d,r,h-1,k-1),a,c,p?l:f)}}}}this.m||(this.register[a]=1)}}return this};\nfunction L(a,b,c,d,e){return c&&1<a?b+(d||0)<=a?c+(e||0):(a-1)/(b+(d||0))*(c+(e||0))+1|0:0}function M(a,b,c,d,e,f,g){let h=g?a.h:a.map;if(!b[c]||g&&!b[c][g])a.s&&(h=h[d]),g?(b=b[c]||(b[c]=v()),b[g]=1,h=h[g]||(h[g]=v())):b[c]=1,h=h[c]||(h[c]=[]),a.s||(h=h[d]||(h[d]=[])),f&&-1!==h.indexOf(e)||(h[h.length]=e,a.m&&(a=a.register[e]||(a.register[e]=[]),a[a.length]=h))}\nt.search=function(a,b,c){c||(!b&&C(a)?(c=a,a=c.query):C(b)&&(c=b));let d=[],e;let f,g=0;if(c){b=c.limit;g=c.offset||0;var h=c.context;f=c.suggest}if(a&&(a=this.encode(a),e=a.length,1<e)){c=v();var k=[];for(let n=0,w=0,q;n<e;n++)if((q=a[n])&&q.length>=this.B&&!c[q])if(this.s||f||this.map[q])k[w++]=q,c[q]=1;else return d;a=k;e=a.length}if(!e)return d;b||(b=100);h=this.depth&&1<e&&!1!==h;c=0;let m;h?(m=a[0],c=1):1<e&&a.sort(ba);for(let n,w;c<e;c++){w=a[c];h?(n=sa(this,d,f,b,g,2===e,w,m),f&&!1===n&&d.length||\n(m=w)):n=sa(this,d,f,b,g,1===e,w);if(n)return n;if(f&&c===e-1){k=d.length;if(!k){if(h){h=0;c=-1;continue}return d}if(1===k)return ta(d[0],b,g)}}return ma(d,b,g,f)};\nfunction sa(a,b,c,d,e,f,g,h){let k=[],m=h?a.h:a.map;a.s||(m=ua(m,g,h,a.l));if(m){let n=0;const w=Math.min(m.length,h?a.A:a.D);for(let q=0,r=0,l,p;q<w;q++)if(l=m[q])if(a.s&&(l=ua(l,g,h,a.l)),e&&l&&f&&(p=l.length,p<=e?(e-=p,l=null):(l=l.slice(e),e=0)),l&&(k[n++]=l,f&&(r+=l.length,r>=d)))break;if(n){if(f)return ta(k,d,0);b[b.length]=k;return}}return!c&&k}function ta(a,b,c){a=1===a.length?a[0]:[].concat.apply([],a);return c||a.length>b?a.slice(c,c+b):a}\nfunction ua(a,b,c,d){c?(d=d&&b>c,a=(a=a[d?b:c])&&a[d?c:b]):a=a[b];return a}t.contain=function(a){return!!this.register[a]};t.update=function(a,b){return this.remove(a).add(a,b)};\nt.remove=function(a,b){const c=this.register[a];if(c){if(this.m)for(let d=0,e;d<c.length;d++)e=c[d],e.splice(e.indexOf(a),1);else N(this.map,a,this.D,this.s),this.depth&&N(this.h,a,this.A,this.s);b||delete this.register[a];if(this.cache){b=this.cache;for(let d=0,e,f;d<b.h.length;d++)f=b.h[d],e=b.cache[f],-1!==e.indexOf(a)&&(b.h.splice(d--,1),delete b.cache[f])}}return this};\nfunction N(a,b,c,d,e){let f=0;if(a.constructor===Array)if(e)b=a.indexOf(b),-1!==b?1<a.length&&(a.splice(b,1),f++):f++;else{e=Math.min(a.length,c);for(let g=0,h;g<e;g++)if(h=a[g])f=N(h,b,c,d,e),d||f||delete a[g]}else for(let g in a)(f=N(a[g],b,c,d,e))||delete a[g];return f}t.searchCache=oa;\nt.export=function(a,b,c,d,e){let f,g;switch(e||(e=0)){case 0:f=\"reg\";if(this.m){g=v();for(let h in this.register)g[h]=1}else g=this.register;break;case 1:f=\"cfg\";g={doc:0,opt:this.s?1:0};break;case 2:f=\"map\";g=this.map;break;case 3:f=\"ctx\";g=this.h;break;default:return}ra(a,b||this,c?c+\".\"+f:f,d,e,g);return!0};t.import=function(a,b){if(b)switch(x(b)&&(b=JSON.parse(b)),a){case \"cfg\":this.s=!!b.opt;break;case \"reg\":this.m=!1;this.register=b;break;case \"map\":this.map=b;break;case \"ctx\":this.h=b}};la(K.prototype);function va(a){a=a.data;var b=self._index;const c=a.args;var d=a.task;switch(d){case \"init\":d=a.options||{};a=a.factory;b=d.encode;d.cache=!1;b&&0===b.indexOf(\"function\")&&(d.encode=Function(\"return \"+b)());a?(Function(\"return \"+a)()(self),self._index=new self.FlexSearch.Index(d),delete self.FlexSearch):self._index=new K(d);break;default:a=a.id,b=b[d].apply(b,c),postMessage(\"search\"===d?{id:a,msg:b}:{id:a})}};let wa=0;function O(a){if(!(this instanceof O))return new O(a);var b;a?D(b=a.encode)&&(a.encode=b.toString()):a={};(b=(self||window)._factory)&&(b=b.toString());const c=self.exports,d=this;this.o=xa(b,c,a.worker);this.h=v();if(this.o){if(c)this.o.on(\"message\",function(e){d.h[e.id](e.msg);delete d.h[e.id]});else this.o.onmessage=function(e){e=e.data;d.h[e.id](e.msg);delete d.h[e.id]};this.o.postMessage({task:\"init\",factory:b,options:a})}}P(\"add\");P(\"append\");P(\"search\");P(\"update\");P(\"remove\");\nfunction P(a){O.prototype[a]=O.prototype[a+\"Async\"]=function(){const b=this,c=[].slice.call(arguments);var d=c[c.length-1];let e;D(d)&&(e=d,c.splice(c.length-1,1));d=new Promise(function(f){setTimeout(function(){b.h[++wa]=f;b.o.postMessage({task:a,id:wa,args:c})})});return e?(d.then(e),this):d}}\nfunction xa(a,b,c){let d;try{d=b?eval('new (require(\"worker_threads\")[\"Worker\"])(\"../dist/node/node.js\")'):a?new Worker(URL.createObjectURL(new Blob([\"onmessage=\"+va.toString()],{type:\"text/javascript\"}))):new Worker(x(c)?c:\"worker/worker.js\",{type:\"module\"})}catch(e){}return d};function Q(a){if(!(this instanceof Q))return new Q(a);var b=a.document||a.doc||a,c;this.K=[];this.h=[];this.A=[];this.register=v();this.key=(c=b.key||b.id)&&S(c,this.A)||\"id\";this.m=u(a.fastupdate);this.C=(c=b.store)&&!0!==c&&[];this.store=c&&v();this.I=(c=b.tag)&&S(c,this.A);this.l=c&&v();this.cache=(c=a.cache)&&new J(c);a.cache=!1;this.o=a.worker;this.async=!1;c=v();let d=b.index||b.field||b;x(d)&&(d=[d]);for(let e=0,f,g;e<d.length;e++)f=d[e],x(f)||(g=f,f=f.field),g=C(g)?Object.assign({},a,g):a,\nthis.o&&(c[f]=new O(g),c[f].o||(this.o=!1)),this.o||(c[f]=new K(g,this.register)),this.K[e]=S(f,this.A),this.h[e]=f;if(this.C)for(a=b.store,x(a)&&(a=[a]),b=0;b<a.length;b++)this.C[b]=S(a[b],this.A);this.index=c}function S(a,b){const c=a.split(\":\");let d=0;for(let e=0;e<c.length;e++)a=c[e],0<=a.indexOf(\"[]\")&&(a=a.substring(0,a.length-2))&&(b[d]=!0),a&&(c[d++]=a);d<c.length&&(c.length=d);return 1<d?c:c[0]}function T(a,b){if(x(b))a=a[b];else for(let c=0;a&&c<b.length;c++)a=a[b[c]];return a}\nfunction U(a,b,c,d,e){a=a[e];if(d===c.length-1)b[e]=a;else if(a)if(a.constructor===Array)for(b=b[e]=Array(a.length),e=0;e<a.length;e++)U(a,b,c,d,e);else b=b[e]||(b[e]=v()),e=c[++d],U(a,b,c,d,e)}function V(a,b,c,d,e,f,g,h){if(a=a[g])if(d===b.length-1){if(a.constructor===Array){if(c[d]){for(b=0;b<a.length;b++)e.add(f,a[b],!0,!0);return}a=a.join(\" \")}e.add(f,a,h,!0)}else if(a.constructor===Array)for(g=0;g<a.length;g++)V(a,b,c,d,e,f,g,h);else g=b[++d],V(a,b,c,d,e,f,g,h)}t=Q.prototype;\nt.add=function(a,b,c){C(a)&&(b=a,a=T(b,this.key));if(b&&(a||0===a)){if(!c&&this.register[a])return this.update(a,b);for(let d=0,e,f;d<this.h.length;d++)f=this.h[d],e=this.K[d],x(e)&&(e=[e]),V(b,e,this.A,0,this.index[f],a,e[0],c);if(this.I){let d=T(b,this.I),e=v();x(d)&&(d=[d]);for(let f=0,g,h;f<d.length;f++)if(g=d[f],!e[g]&&(e[g]=1,h=this.l[g]||(this.l[g]=[]),!c||-1===h.indexOf(a)))if(h[h.length]=a,this.m){const k=this.register[a]||(this.register[a]=[]);k[k.length]=h}}if(this.store&&(!c||!this.store[a])){let d;\nif(this.C){d=v();for(let e=0,f;e<this.C.length;e++)f=this.C[e],x(f)?d[f]=b[f]:U(b,d,f,0,f[0])}this.store[a]=d||b}}return this};t.append=function(a,b){return this.add(a,b,!0)};t.update=function(a,b){return this.remove(a).add(a,b)};\nt.remove=function(a){C(a)&&(a=T(a,this.key));if(this.register[a]){for(var b=0;b<this.h.length&&(this.index[this.h[b]].remove(a,!this.o),!this.m);b++);if(this.I&&!this.m)for(let c in this.l){b=this.l[c];const d=b.indexOf(a);-1!==d&&(1<b.length?b.splice(d,1):delete this.l[c])}this.store&&delete this.store[a];delete this.register[a]}return this};\nt.search=function(a,b,c,d){c||(!b&&C(a)?(c=a,a=c.query):C(b)&&(c=b,b=0));let e=[],f=[],g,h,k,m,n,w,q=0;if(c)if(c.constructor===Array)k=c,c=null;else{k=(g=c.pluck)||c.index||c.field;m=c.tag;h=this.store&&c.enrich;n=\"and\"===c.bool;b=c.limit||100;w=c.offset||0;if(m&&(x(m)&&(m=[m]),!a)){for(let l=0,p;l<m.length;l++)if(p=ya.call(this,m[l],b,w,h))e[e.length]=p,q++;return q?e:[]}x(k)&&(k=[k])}k||(k=this.h);n=n&&(1<k.length||m&&1<m.length);const r=!d&&(this.o||this.async)&&[];for(let l=0,p,z,B;l<k.length;l++){let A;\nz=k[l];x(z)||(A=z,z=z.field);if(r)r[l]=this.index[z].searchAsync(a,b,A||c);else{d?p=d[l]:p=this.index[z].search(a,b,A||c);B=p&&p.length;if(m&&B){const y=[];let H=0;n&&(y[0]=[p]);for(let X=0,pa,R;X<m.length;X++)if(pa=m[X],B=(R=this.l[pa])&&R.length)H++,y[y.length]=n?[R]:R;H&&(p=n?ma(y,b||100,w||0):na(p,y),B=p.length)}if(B)f[q]=z,e[q++]=p;else if(n)return[]}}if(r){const l=this;return new Promise(function(p){Promise.all(r).then(function(z){p(l.search(a,b,c,z))})})}if(!q)return[];if(g&&(!h||!this.store))return e[0];\nfor(let l=0,p;l<f.length;l++){p=e[l];p.length&&h&&(p=za.call(this,p));if(g)return p;e[l]={field:f[l],result:p}}return e};function ya(a,b,c,d){let e=this.l[a],f=e&&e.length-c;if(f&&0<f){if(f>b||c)e=e.slice(c,c+b);d&&(e=za.call(this,e));return{tag:a,result:e}}}function za(a){const b=Array(a.length);for(let c=0,d;c<a.length;c++)d=a[c],b[c]={id:d,doc:this.store[d]};return b}t.contain=function(a){return!!this.register[a]};t.get=function(a){return this.store[a]};t.set=function(a,b){this.store[a]=b;return this};\nt.searchCache=oa;t.export=function(a,b,c,d,e){e||(e=0);d||(d=0);if(d<this.h.length){const f=this.h[d],g=this.index[f];b=this;setTimeout(function(){g.export(a,b,e?f.replace(\":\",\"-\"):\"\",d,e++)||(d++,e=1,b.export(a,b,f,d,e))})}else{let f;switch(e){case 1:c=\"tag\";f=this.l;break;case 2:c=\"store\";f=this.store;break;default:return}ra(a,this,c,d,e,f)}};\nt.import=function(a,b){if(b)switch(x(b)&&(b=JSON.parse(b)),a){case \"tag\":this.l=b;break;case \"reg\":this.m=!1;this.register=b;for(let d=0,e;d<this.h.length;d++)e=this.index[this.h[d]],e.register=b,e.m=!1;break;case \"store\":this.store=b;break;default:a=a.split(\".\");const c=a[0];a=a[1];c&&a&&this.index[c].import(a,b)}};la(Q.prototype);var Ba={encode:Aa,F:!1,G:\"\"};const Ca=[F(\"[\\u00e0\\u00e1\\u00e2\\u00e3\\u00e4\\u00e5]\"),\"a\",F(\"[\\u00e8\\u00e9\\u00ea\\u00eb]\"),\"e\",F(\"[\\u00ec\\u00ed\\u00ee\\u00ef]\"),\"i\",F(\"[\\u00f2\\u00f3\\u00f4\\u00f5\\u00f6\\u0151]\"),\"o\",F(\"[\\u00f9\\u00fa\\u00fb\\u00fc\\u0171]\"),\"u\",F(\"[\\u00fd\\u0177\\u00ff]\"),\"y\",F(\"\\u00f1\"),\"n\",F(\"[\\u00e7c]\"),\"k\",F(\"\\u00df\"),\"s\",F(\" & \"),\" and \"];function Aa(a){var b=a;b.normalize&&(b=b.normalize(\"NFD\").replace(ea,\"\"));return ca.call(this,b.toLowerCase(),!a.normalize&&Ca)};var Ea={encode:Da,F:!1,G:\"strict\"};const Fa=/[^a-z0-9]+/,Ga={b:\"p\",v:\"f\",w:\"f\",z:\"s\",x:\"s\",\"\\u00df\":\"s\",d:\"t\",n:\"m\",c:\"k\",g:\"k\",j:\"k\",q:\"k\",i:\"e\",y:\"e\",u:\"o\"};function Da(a){a=Aa.call(this,a).join(\" \");const b=[];if(a){const c=a.split(Fa),d=c.length;for(let e=0,f,g=0;e<d;e++)if((a=c[e])&&(!this.filter||!this.filter[a])){f=a[0];let h=Ga[f]||f,k=h;for(let m=1;m<a.length;m++){f=a[m];const n=Ga[f]||f;n&&n!==k&&(h+=n,k=n)}b[g++]=h}}return b};var Ia={encode:Ha,F:!1,G:\"\"};const Ja=[F(\"ae\"),\"a\",F(\"oe\"),\"o\",F(\"sh\"),\"s\",F(\"th\"),\"t\",F(\"ph\"),\"f\",F(\"pf\"),\"f\",F(\"(?![aeo])h(?![aeo])\"),\"\",F(\"(?!^[aeo])h(?!^[aeo])\"),\"\"];function Ha(a,b){a&&(a=Da.call(this,a).join(\" \"),2<a.length&&(a=E(a,Ja)),b||(1<a.length&&(a=ha(a)),a&&(a=a.split(\" \"))));return a};var La={encode:Ka,F:!1,G:\"\"};const Ma=F(\"(?!\\\\b)[aeo]\");function Ka(a){a&&(a=Ha.call(this,a,!0),1<a.length&&(a=a.replace(Ma,\"\")),1<a.length&&(a=ha(a)),a&&(a=a.split(\" \")));return a};G[\"latin:default\"]=ja;G[\"latin:simple\"]=Ba;G[\"latin:balance\"]=Ea;G[\"latin:advanced\"]=Ia;G[\"latin:extra\"]=La;const W=self;let Y;const Z={Index:K,Document:Q,Worker:O,registerCharset:function(a,b){G[a]=b},registerLanguage:function(a,b){ka[a]=b}};(Y=W.define)&&Y.amd?Y([],function(){return Z}):W.exports?W.exports=Z:W.FlexSearch=Z;}(this));\n","/** @license React v17.0.2\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';require(\"object-assign\");var f=require(\"react\"),g=60103;exports.Fragment=60107;if(\"function\"===typeof Symbol&&Symbol.for){var h=Symbol.for;g=h(\"react.element\");exports.Fragment=h(\"react.fragment\")}var m=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,k){var b,d={},e=null,l=null;void 0!==k&&(e=\"\"+k);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(l=a.ref);for(b in a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n"],"names":["__createBinding","this","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__exportStar","exports","p","prototype","hasOwnProperty","call","value","Farming","Swap","SPLT","Lamports","utils","schema","keystore","account","RawWallet","require","rawWallet_1","default","account_1","keystore_1","schema_1","utils_1","lamports_1","splt_1","swap_1","farming_1","ENV","Strategy","CLUSTER_SLUGS","MainnetBeta","testnet","Testnet","devnet","Devnet","queryJsonFiles","files","Promise","all","map","repo","fetch","response","json","console","info","responses","tokenlist","tokens","reduce","acc","arr","concat","TokenListProvider","resolve","strategy","CDN","TokenListContainer","strategies","GitHub","repositories","Static","Solana","Error","tokenList","filterByTag","tag","filter","item","tags","includes","filterByChainId","chainId","excludeByChainId","excludeByTag","filterByClusterSlug","slug","keys","getList","toBuffer","Buffer","constructor","encode","serialize","SOLANA_SCHEMA","decode","deserialize","decodeUnchecked","deserializeUnchecked","key","Map","MAX_SEED_LENGTH","isPublicKeyData","decoded","bs58","equals","_bn","eq","publicKey","toBase58","toBytes","b","toArrayLike","zeroPad","toString","createWithSeed","buffer","fromPublicKey","programId","sha256","Uint8Array","hash","PublicKey","createProgramAddress","seeds","seed","is_on_curve","publicKeyBytes","findProgramAddress","nonce","seedsWithNonce","address","err","isOnCurve","kind","fields","naclLowLevel","nacl","r","t","chk","num","den","den2","den4","den6","neq25519","gf1","I","a","c","d","_keypair","secretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","rustString","rsl","_decode","_encode","data","chars","str","decodeLength","bytes","len","size","elem","encodeLength","rem_len","args","ix","isAccountSigner","index","header","isAccountWritable","numRequiredSignatures","accountKeys","length","isProgramId","indexToProgramIds","has","programIds","nonProgramIds","numKeys","keyCount","shortvec","instructions","instruction","programIdIndex","keyIndicesCount","accounts","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","signDataLayout","Layout","transaction","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","recentBlockhash","signData","from","byteArray","accountCount","i","dataSlice","Message","message","DEFAULT_SIGNATURE","PACKET_DATA_SIZE","opts","signature","signatures","add","items","TransactionInstruction","compileMessage","nonceInfo","feePayer","accountMetas","accountMeta","pubkey","isSigner","isWritable","x","y","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","feePayerIndex","payerMeta","signedKeys","unsignedKeys","meta","invariant","keyIndex","_compile","every","pair","serializeMessage","setSigners","signers","seen","sign","uniqueSigners","signer","partialSign","_partialSign","addSignature","_addSignature","findIndex","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","Transaction","populate","sigPubkeyPair","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","sendOptions","options","skipPreflight","preflightCommitment","commitment","connection","status","JSON","sleep","ms","setTimeout","encodeData","type","allocLength","alloc","layoutFields","decodeData","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","span","fromAccountData","nonceAccount","NonceAccount","authorizedPubkey","feeCalculator","decodeInstructionType","typeIndex","instructionTypeLayout","layout","decodeCreateAccount","SYSTEM_INSTRUCTION_LAYOUTS","fromPubkey","newAccountPubkey","lamports","space","decodeTransfer","toPubkey","decodeTransferWithSeed","basePubkey","decodeAllocate","accountPubkey","decodeAllocateWithSeed","decodeAssign","decodeAssignWithSeed","decodeCreateWithSeed","decodeNonceInitialize","authorized","noncePubkey","decodeNonceAdvance","decodeNonceWithdraw","decodeNonceAuthorize","newAuthorizedPubkey","checkProgramId","SystemProgram","checkKeyLength","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","createAccount","params","transfer","assign","base","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","getMinNumSignatures","Math","Loader","load","balanceNeeded","program","programInfo","payer","sendAndConfirmTransaction","dataLayout","chunkSize","offset","array","transactions","BPF_LOADER_PROGRAM_ID","global","self","__self__","F","DOMException","support","Symbol","Blob","e","viewClasses","isArrayBufferView","ArrayBuffer","isView","obj","indexOf","normalizeName","name","String","test","TypeError","toLowerCase","normalizeValue","iteratorFor","iterator","next","shift","done","Headers","headers","forEach","append","Array","isArray","getOwnPropertyNames","consumed","body","bodyUsed","reject","fileReaderReady","reader","onload","result","onerror","error","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","buf","slice","view","byteLength","set","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","DataView","_bodyArrayBuffer","rejected","arrayBuffer","then","text","readAsText","readBlobAsText","fromCharCode","join","readArrayBufferAsText","formData","parse","oldValue","callback","thisArg","push","values","entries","methods","Request","input","url","credentials","method","mode","signal","upcased","toUpperCase","normalizeMethod","referrer","form","trim","split","replace","decodeURIComponent","parseHeaders","rawHeaders","line","parts","Response","bodyInit","ok","statusText","clone","redirectStatuses","redirect","RangeError","location","stack","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","ponyfill","ctx","module","trailingZeros","n","getEpoch","getEpochAndSlotIndex","slot","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","firstNormalEpoch","getFirstSlotInEpoch","getLastSlotInEpoch","promiseTimeout","timeoutPromise","timeoutId","clearTimeout","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","code","unknown","optional","any","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","boolean","firstNormalSlot","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","logs","executable","owner","rentEpoch","unitsConsumed","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","version","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","writable","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockSignaturesRpcResult","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","lastFetch","transactionSignatures","simulatedSignatures","client","URL","commitmentOrConfig","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","endpoint","useHttps","Number","makeWebsocketUrl","fetchWithMiddleware","clientBrowser","agent","too_many_requests_retries","waitTime","res","createRpcClient","requests","batch","createRpcBatchRequest","autoconnect","max_reconnects","Infinity","_wsOnOpen","bind","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","getBalanceAndContext","_buildArgs","_rpcRequest","unsafeRes","getBalance","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","_args","ownerAddress","getParsedTokenAccountsByOwner","getLargestAccounts","arg","config","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getAccountInfo","getMultipleAccountsInfo","publicKeys","getStakeActivation","getProgramAccounts","extra","configOrCommitment","encoding","getParsedProgramAccounts","confirmTransaction","decodedSignature","assert","start","Date","subscriptionCommitment","confirmPromise","subscriptionId","timeoutMs","_confirmTransactionInitialTimeout","duration","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","getSignatureStatus","getSignatureStatuses","getTransactionCount","getTotalSupply","getInflationGovernor","getInflationReward","addresses","getEpochInfo","getEpochSchedule","epochSchedule","EpochSchedule","getLeaderSchedule","getMinimumBalanceForRentExemption","getRecentBlockhashAndContext","getRecentPerformanceSamples","limit","getFeeCalculatorForBlockhash","getRecentBlockhash","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","getTransaction","getConfirmedBlock","getBlocks","endSlot","getConfirmedBlockSignatures","transactionDetails","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","methodName","_rpcBatchRequest","getConfirmedSignaturesForAddress","firstAvailableBlock","block","highestConfirmedRoot","getConfirmedSignaturesForAddress2","confirmedSignatureInfo","getSignaturesForAddress","getNonceAndContext","accountInfo","getNonce","requestAirdrop","to","_recentBlockhash","timeSinceFetch","_blockhashInfo","expired","_pollNewBlockhash","startTime","MS_PER_SLOT","simulateTransaction","transactionOrMessage","disableCache","encodedTransaction","logTrace","traceIndent","SendTransactionError","sendTransaction","sendRawTransaction","sendEncodedTransaction","setInterval","clearInterval","_subscribe","sub","_rpcWebSocket","rpcMethod","_unsubscribe","unsubscribeId","_resetSubscriptions","s","_updateSubscriptions","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","_rpcWebSocketIdleTimeout","_accountChangeSubscriptions","_programAccountChangeSubscriptions","filters","_slotSubscriptions","_slotUpdateSubscriptions","_signatureSubscriptions","_rootSubscriptions","_logsSubscriptions","mentions","notification","onAccountChange","removeAccountChangeListener","subInfo","accountId","onProgramAccountChange","removeProgramAccountChangeListener","onLogs","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","override","onSignature","onSignatureWithOptions","removeSignatureListener","onRootChange","removeRootChangeListener","generate","Keypair","fromSecretKey","keypair","encoder","fromSeed","ED25519_INSTRUCTION_LAYOUT","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","Ed25519Program","createInstructionWithPrivateKey","privateKey","STAKE_CONFIG_ID","Lockup","decodeInitialize","STAKE_INSTRUCTION_LAYOUTS","lockup","stakePubkey","Authorized","decodeDelegate","decodeAuthorize","stakeAuthorizationType","decodeAuthorizeWithSeed","authorityOwner","authorityBase","authoritySeed","decodeSplit","splitStakePubkey","decodeMerge","sourceStakePubKey","decodeWithdraw","decodeDeactivate","StakeProgram","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeAuthorizationLayout","Staker","Withdrawer","initialize","staker","withdrawer","unixTimestamp","custodian","delegate","authorize","custodianPubkey","newAuthorized","authorizeWithSeed","merge","withdraw","deactivate","ecdsaSign","SECP256K1_INSTRUCTION_LAYOUT","publicKeyToEthAddress","keccak_256","Secp256k1Program","ethAddress","recoveryId","createInstructionWithEthAddress","rawAddress","ethAddressOffset","ethAddressInstructionIndex","pkey","publicKeyCreate","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","fromConfigData","configKeys","rawInfo","assertType","ValidatorInfo","VOTE_PROGRAM_ID","VoteAccountLayout","va","VoteAccount","authorizedVoterPubkey","authorizedWithdrawerPubkey","votes","credits","lastEpochCredits","http","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL","_f","u","aa","v","ba","C","D","ca","da","E","H","J","f","g","_factory","ea","fa","h","RegExp","ha","ja","ia","G","ka","la","arguments","async","apply","ma","w","q","l","z","A","B","na","cache","oa","query","search","qa","memory","charset","performance","depth","match","score","ra","stringify","export","K","preset","lang","register","resolution","tokenize","bidirectional","optimize","fastupdate","minlength","boost","rtl","matcher","stemmer","L","M","sa","ua","min","ta","N","splice","_index","task","factory","Function","FlexSearch","Index","postMessage","msg","update","substring","suggest","sort","contain","remove","searchCache","doc","opt","import","wa","O","window","xa","worker","on","onmessage","P","eval","Worker","createObjectURL","Q","document","S","store","field","T","U","V","ya","za","pluck","enrich","bool","searchAsync","pa","R","X","Ba","Aa","Ca","normalize","Ea","Da","Fa","Ga","j","Ia","Ha","Ja","La","Ka","Ma","W","Y","Z","Document","registerCharset","registerLanguage","define","amd","for","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","ref","__self","__source","defaultProps","$$typeof","props","_owner","jsx"],"sourceRoot":""}