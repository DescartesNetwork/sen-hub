{"version":3,"file":"static/js/99.e144cdbc.chunk.js","mappings":"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","sources":["../../src/util/to-buffer.ts","../../node_modules/minimalistic-assert/index.js","../../node_modules/inherits/inherits_browser.js","../../node_modules/hash.js/lib/hash/utils.js","../../node_modules/hash.js/lib/hash/common.js","../../node_modules/hash.js/lib/hash/sha/common.js","../../node_modules/hash.js/lib/hash/sha/1.js","../../node_modules/hash.js/lib/hash/sha/256.js","../../node_modules/hash.js/lib/hash/sha/224.js","../../node_modules/hash.js/lib/hash/sha/512.js","../../node_modules/hash.js/lib/hash/sha/384.js","../../node_modules/hash.js/lib/hash/sha.js","../../node_modules/hash.js/lib/hash/ripemd.js","../../node_modules/hash.js/lib/hash/hmac.js","../../node_modules/hash.js/lib/hash.js","../../node_modules/@ethersproject/logger/lib.esm/index.js","../../node_modules/@ethersproject/logger/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/index.js","../../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../../node_modules/@ethersproject/sha2/lib.esm/_version.js","../../src/util/borsh-schema.ts","../../src/publickey.ts","../../src/account.ts","../../src/bpf-loader-deprecated.ts","../../src/layout.ts","../../src/util/shortvec-encoding.ts","../../src/message.ts","../../src/util/assert.ts","../../src/transaction.ts","../../src/sysvar.ts","../../src/util/send-and-confirm-transaction.ts","../../src/util/sleep.ts","../../src/instruction.ts","../../src/fee-calculator.ts","../../src/nonce-account.ts","../../src/system-program.ts","../../src/loader.ts","../../src/bpf-loader.ts","../../node_modules/cross-fetch/dist/browser-ponyfill.js","../../src/epoch-schedule.ts","../../src/errors.ts","../../src/connection.ts","../../src/util/url.ts","../../src/util/promise-timeout.ts","../../src/keypair.ts","../../src/ed25519-program.ts","../../src/stake-program.ts","../../src/secp256k1-program.ts","../../src/validator-info.ts","../../src/vote-account.ts","../../src/vote-program.ts","../../src/util/send-and-confirm-raw-transaction.ts","../../src/util/cluster.ts","../../src/index.ts","../node_modules/react/jsx-runtime.js"],"sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.6.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"bytes/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        }\n        else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        }\n        else {\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","export const version = \"sha2/5.6.0\";\n//# sourceMappingURL=_version.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Connection} from './connection';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signatures: {publicKey: string; signature: number[] | null}[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signatures: this.signatures.map(({publicKey, signature}) => ({\n        publicKey: publicKey.toJSON(),\n        signature: signature ? [...signature] : null,\n      })),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (this._message) {\n      if (JSON.stringify(this.toJSON()) !== JSON.stringify(this._json)) {\n        throw new Error(\n          'Transaction mutated after being populated from Message',\n        );\n      }\n      return this._message;\n    }\n\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const pubkeySorting = x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58());\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? pubkeySorting : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: number;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        BufferLayout.ns64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport crossFetch from 'cross-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  customFetch?: typeof crossFetch,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : crossFetch;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware:\n    | ((url: string, options: any) => Promise<Response>)\n    | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (url: string, options: any) => {\n      const modifiedFetchArgs = await new Promise<[string, any]>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(url, options, (modifiedUrl, modifiedOptions) =>\n              resolve([modifiedUrl, modifiedOptions]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: (modifiedUrl: string, modifiedOptions: any) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: typeof crossFetch;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitment,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n  async getLatestBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; lastValidBlockHeight: number}> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n  async getLatestBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; lastValidBlockHeight: number}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block height information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block production information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction({\n        recentBlockhash: originalTx.recentBlockhash,\n        nonceInfo: originalTx.nonceInfo,\n        feePayer: originalTx.feePayer,\n        signatures: [...originalTx.signatures],\n      });\n      transaction.instructions = transactionOrMessage.instructions;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        if (err instanceof Error) {\n          console.error(\n            `${rpcMethod} error for argument`,\n            rpcArgs,\n            err.message,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._logsSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './vote-program';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n"],"names":["toBuffer","arr","Buffer","Uint8Array","buffer","byteOffset","byteLength","minimalisticAssert","assert","val","msg","Error","equal","l","r","Object","create","inherits_browserModule","ctor","superCtor","super_","prototype","constructor","value","enumerable","writable","configurable","TempCtor","require$$0","inherits","require$$1","isSurrogatePair","i","charCodeAt","length","htonl","w","zero2","word","zero8","enc","Array","isArray","slice","res","replace","push","parseInt","p","c","toString","endian","start","end","len","k","m","b","a","d","e","buf","pos","ah","al","bh","lo","hi","bl","ch","cl","dh","dl","carry","eh","el","num","utils","BlockHash","this","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","update","toArray","concat","join32","_update","digest","_pad","_digest","bytes","t","rotr32","ch32","x","y","z","maj32","p32","s","common","shaCommon","require$$2","rotl32","sum32","sum32_5","ft_1","sha1_K","SHA1","call","h","W","_1","toHex32","split32","require$$3","sum32_4","s0_256","s1_256","g0_256","g1_256","sha256_K","SHA256","_256","f","g","T1","T2","SHA224","_224","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","sha512_K","SHA512","_512","ch64_hi","xh","xl","yh","yl","zh","ch64_lo","zl","maj64_hi","maj64_lo","s0_512_hi","s0_512_lo","s1_512_hi","s1_512_lo","g0_512_hi","g0_512_lo","g1_512_hi","g1_512_lo","_prepareBlock","c0_hi","c0_lo","c1_hi","c1_lo","c2_hi","c2_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","c4_hi","c4_lo","T1_hi","T1_lo","T2_hi","T2_lo","SHA384","_384","require$$4","sum32_3","RIPEMD160","j","K","Kh","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","T","rh","sh","Hmac","hash","key","Hash","inner","outer","_init","hmac","exports","sha","ripemd","sha1","sha256","sha224","sha384","sha512","ripemd160","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","_normalizeError","missing","forEach","form","normalize","join","String","fromCharCode","message","_checkNormalize","LogLevel","ErrorCode","HEX","Logger","version","defineProperty","_log","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","hex","JSON","stringify","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","throwError","name","INVALID_ARGUMENT","argument","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","checkAbstract","censorship","permanent","globalLogger","logger","addSlice","array","arguments","isInteger","arrayify","options","result","unshift","allowMissingPrefix","substring","toHexString","isHexable","match","isHexString","hexPad","v","isBytes","data","Struct","properties","assign","encode","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","Enum","super","enum","map","Map","MAX_SEED_LENGTH","PublicKey","_bn","undefined","isPublicKeyData","decoded","bs58","BN","equals","publicKey","eq","toBase58","toBytes","toJSON","toArrayLike","zeroPad","copy","fromPublicKey","seed","programId","seeds","TypeError","publicKeyBytes","is_on_curve","address","nonce","seedsWithNonce","createProgramAddress","err","pubkey","default","set","fields","naclLowLevel","nacl","gf","chk","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","Z","pow2523","neq25519","I","pack25519","crypto_verify_32","Account","secretKey","_keypair","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","rustString","rsl","_decode","decode","bind","_encode","rslShim","offset","str","chars","alloc","span","decodeLength","size","elem","shift","encodeLength","rem_len","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","accounts","from","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","signDataLayout","Layout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","isSigner","isWritable","Transaction","signature","signatures","feePayer","nonceInfo","_message","_json","nonceInstruction","add","items","item","compileMessage","accountMetas","accountMeta","includes","sort","pubkeySorting","localeCompare","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","payerMeta","splice","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","every","pair","serializeMessage","connection","getFeeForMessage","setSigners","signers","seen","Set","sign","uniqueSigners","signer","_partialSign","_verifySignatures","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","async","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","sleep","ms","Promise","resolve","setTimeout","encodeData","type","allocLength","layout","layoutFields","decodeData","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","SystemInstruction","checkProgramId","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","Transfer","toPubkey","TransferWithSeed","basePubkey","Allocate","accountPubkey","base","AllocateWithSeed","Assign","AssignWithSeed","CreateWithSeed","authorized","InitializeNonceAccount","noncePubkey","AdvanceNonceAccount","WithdrawNonceAccount","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","createAccountWithSeed","createAccount","initParams","nonceInitialize","instructionData","CHUNK_SIZE","Loader","Math","ceil","chunkSize","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","allocate","owner","transfer","dataLayout","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","getMinNumSignatures","elf","loaderProgramId","load","global","self","__self__","F","fetch","DOMException","support","Symbol","Blob","viewClasses","isArrayBufferView","ArrayBuffer","isView","obj","normalizeName","test","normalizeValue","iteratorFor","iterator","next","done","Headers","headers","append","getOwnPropertyNames","consumed","body","bodyUsed","reject","fileReaderReady","reader","onload","onerror","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","view","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","DataView","_bodyArrayBuffer","get","rejected","arrayBuffer","then","text","readAsText","readBlobAsText","readArrayBufferAsText","formData","json","parse","oldValue","hasOwnProperty","callback","thisArg","methods","Request","input","credentials","method","mode","signal","upcased","toUpperCase","normalizeMethod","referrer","trim","split","decodeURIComponent","parseHeaders","rawHeaders","line","parts","Response","bodyInit","ok","statusText","clone","response","redirectStatuses","redirect","RangeError","location","stack","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","ponyfill","ctx","module","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","lastValidBlockHeight","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","endpoint","commitmentOrConfig","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","lastFetch","transactionSignatures","simulatedSignatures","_accountChangeSubscriptionCounter","_accountChangeSubscriptions","_programAccountChangeSubscriptionCounter","_programAccountChangeSubscriptions","_rootSubscriptionCounter","_rootSubscriptions","_signatureSubscriptionCounter","_signatureSubscriptions","_slotSubscriptionCounter","_slotSubscriptions","_logsSubscriptionCounter","_logsSubscriptions","_slotUpdateSubscriptionCounter","_slotUpdateSubscriptions","URL","protocol","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","client","confirmTransactionInitialTimeout","useHttps","host","port","Number","makeWebsocketUrl","customFetch","crossFetch","fetchWithMiddleware","modifiedFetchArgs","modifiedUrl","modifiedOptions","RpcClient","agent","too_many_requests_retries","waitTime","createRpcClient","requests","batch","methodName","createRpcBatchRequest","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","_buildArgs","unsafeRes","getBalanceAndContext","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","getMultipleAccountsInfoAndContext","configOrCommitment","extra","encoding","filters","decodedSignature","Date","now","subscriptionCommitment","subscriptionId","confirmPromise","onSignature","timeoutMs","timeoutId","timeoutPromise","race","clearTimeout","promiseTimeout","removeSignatureListener","duration","toFixed","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","addresses","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","_buildArgsAtLeastConfirmed","rest","block","endSlot","transactionDetails","firstAvailableBlock","getFirstAvailableBlock","getConfirmedBlockSignatures","until","highestConfirmedRoot","getSlot","before","getConfirmedSignaturesForAddress2","accountInfo","fromAccountData","getNonceAndContext","to","disableCache","expired","_pollNewBlockhash","startTime","getRecentBlockhash","MS_PER_SLOT","transactionOrMessage","includeAccounts","originalTx","_recentBlockhash","encodedTransaction","sigVerify","traceIndent","logTrace","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","_resetSubscriptions","sub","rpcMethod","rpcArgs","unsubscribeId","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","_subscribe","mentions","connect","close","notification","onAccountChange","subInfo","_unsubscribe","accountId","onProgramAccountChange","onLogs","onSlotChange","onSlotUpdate","override","onSignatureWithOptions","onRootChange","Keypair","keypair","skipValidation","TextEncoder","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","fromSecretKey","createInstructionWithPublicKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","lockup","Initialize","stakePubkey","Delegate","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","Split","splitStakePubkey","Merge","sourceStakePubKey","Withdraw","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","maybeLockup","initialize","splitInstruction","publicKeyCreate","ecdsaSign","secp256k1","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","sha3","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","startsWith","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","configKeys","rawInfo","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedWithdrawer","votes","authorizedVoters","priorVoters","lastTimestamp","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","authorizedVoter","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","VoteInit","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","voteInit","InitializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","sendAndConfirmRawTransaction","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"sourceRoot":""}