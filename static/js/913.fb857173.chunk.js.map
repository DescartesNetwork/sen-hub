{"version":3,"file":"static/js/913.fb857173.chunk.js","mappings":"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","sources":["../node_modules/@project-serum/sol-wallet-adapter/src/index.ts","../node_modules/@solana/web3.js/src/util/to-buffer.ts","../node_modules/@solana/web3.js/src/util/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/account.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/util/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/message.ts","../node_modules/@solana/web3.js/src/util/assert.ts","../node_modules/@solana/web3.js/src/transaction.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/util/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/util/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/system-program.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/@solana/web3.js/node_modules/cross-fetch/dist/browser-ponyfill.js","../node_modules/@solana/web3.js/src/epoch-schedule.ts","../node_modules/@solana/web3.js/src/errors.ts","../node_modules/@solana/web3.js/src/util/promise-timeout.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/util/url.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/ed25519-program.ts","../node_modules/@solana/web3.js/src/stake-program.ts","../node_modules/@solana/web3.js/src/secp256k1-program.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@solana/web3.js/src/util/send-and-confirm-raw-transaction.ts","../node_modules/@solana/web3.js/src/util/cluster.ts","../node_modules/@solana/web3.js/src/index.ts","../node_modules/js-file-download/file-download.js","../node_modules/numbro/dist/node_modules/browser-pack/_prelude.js","../node_modules/numbro/dist/node_modules/bignumber.js/bignumber.js","../node_modules/numbro/dist/src/en-US.js","../node_modules/numbro/dist/src/formatting.js","../node_modules/numbro/dist/src/globalState.js","../node_modules/numbro/dist/src/loading.js","../node_modules/numbro/dist/src/manipulating.js","../node_modules/numbro/dist/src/numbro.js","../node_modules/numbro/dist/src/parsing.js","../node_modules/numbro/dist/src/unformatting.js","../node_modules/numbro/dist/src/validating.js","../node_modules/react-dynamic-remote-component/src/utils.ts","../node_modules/react-dynamic-remote-component/src/attach-script.ts","../node_modules/react-dynamic-remote-component/src/load-module.ts","../node_modules/react-dynamic-remote-component/src/RemoteComponent.tsx","../node_modules/react-dynamic-remote-component/src/suspend.ts","../node_modules/react/jsx-runtime.js"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { PublicKey, Transaction } from '@solana/web3.js';\nimport bs58 from 'bs58';\n\ntype InjectedProvider = { postMessage: (params: unknown) => void };\n\nexport default class Wallet extends EventEmitter {\n  private _providerUrl: URL | undefined;\n  private _injectedProvider?: InjectedProvider;\n  private _publicKey: PublicKey | null = null;\n  private _popup: Window | null = null;\n  private _handlerAdded = false;\n  private _nextRequestId = 1;\n  private _autoApprove = false;\n  private _responsePromises: Map<\n    number,\n    [(value: string) => void, (reason: Error) => void]\n  > = new Map();\n\n  constructor(provider: unknown, private _network: string) {\n    super();\n    if (isInjectedProvider(provider)) {\n      this._injectedProvider = provider;\n    } else if (isString(provider)) {\n      this._providerUrl = new URL(provider);\n      this._providerUrl.hash = new URLSearchParams({\n        origin: window.location.origin,\n        network: this._network,\n      }).toString();\n    } else {\n      throw new Error(\n        'provider parameter must be an injected provider or a URL string.',\n      );\n    }\n  }\n\n  handleMessage = (\n    e: MessageEvent<{\n      id: number;\n      method: string;\n      params: {\n        autoApprove: boolean;\n        publicKey: string;\n      };\n      result?: string;\n      error?: string;\n    }>,\n  ): void => {\n    if (\n      (this._injectedProvider && e.source === window) ||\n      (e.origin === this._providerUrl?.origin && e.source === this._popup)\n    ) {\n      if (e.data.method === 'connected') {\n        const newPublicKey = new PublicKey(e.data.params.publicKey);\n        if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {\n          if (this._publicKey && !this._publicKey.equals(newPublicKey)) {\n            this.handleDisconnect();\n          }\n          this._publicKey = newPublicKey;\n          this._autoApprove = !!e.data.params.autoApprove;\n          this.emit('connect', this._publicKey);\n        }\n      } else if (e.data.method === 'disconnected') {\n        this.handleDisconnect();\n      } else if (e.data.result || e.data.error) {\n        const promises = this._responsePromises.get(e.data.id);\n        if (promises) {\n          const [resolve, reject] = promises;\n          if (e.data.result) {\n            resolve(e.data.result);\n          } else {\n            reject(new Error(e.data.error));\n          }\n        }\n      }\n    }\n  };\n\n  private handleConnect() {\n    if (!this._handlerAdded) {\n      this._handlerAdded = true;\n      window.addEventListener('message', this.handleMessage);\n      window.addEventListener('beforeunload', this._beforeUnload);\n    }\n    if (this._injectedProvider) {\n      return new Promise<void>((resolve) => {\n        void this.sendRequest('connect', {});\n        resolve();\n      });\n    } else {\n      window.name = 'parent';\n      this._popup = window.open(\n        this._providerUrl?.toString(),\n        '_blank',\n        'location,resizable,width=460,height=675',\n      );\n      return new Promise((resolve) => {\n        this.once('connect', resolve);\n      });\n    }\n  }\n\n  private handleDisconnect() {\n    if (this._handlerAdded) {\n      this._handlerAdded = false;\n      window.removeEventListener('message', this.handleMessage);\n      window.removeEventListener('beforeunload', this._beforeUnload);\n    }\n    if (this._publicKey) {\n      this._publicKey = null;\n      this.emit('disconnect');\n    }\n    this._responsePromises.forEach(([, reject], id) => {\n      this._responsePromises.delete(id);\n      reject(new Error('Wallet disconnected'));\n    });\n  }\n\n  private async sendRequest(method: string, params: Record<string, unknown>) {\n    if (method !== 'connect' && !this.connected) {\n      throw new Error('Wallet not connected');\n    }\n    const requestId = this._nextRequestId;\n    ++this._nextRequestId;\n    return new Promise((resolve, reject) => {\n      this._responsePromises.set(requestId, [resolve, reject]);\n      if (this._injectedProvider) {\n        this._injectedProvider.postMessage({\n          jsonrpc: '2.0',\n          id: requestId,\n          method,\n          params: {\n            network: this._network,\n            ...params,\n          },\n        });\n      } else {\n        this._popup?.postMessage(\n          {\n            jsonrpc: '2.0',\n            id: requestId,\n            method,\n            params,\n          },\n          this._providerUrl?.origin ?? '',\n        );\n\n        if (!this.autoApprove) {\n          this._popup?.focus();\n        }\n      }\n    });\n  }\n\n  get publicKey(): PublicKey | null {\n    return this._publicKey;\n  }\n\n  get connected(): boolean {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove(): boolean {\n    return this._autoApprove;\n  }\n\n  async connect(): Promise<void> {\n    if (this._popup) {\n      this._popup.close();\n    }\n    await this.handleConnect();\n  }\n\n  async disconnect(): Promise<void> {\n    if (this._injectedProvider) {\n      await this.sendRequest('disconnect', {});\n    }\n    if (this._popup) {\n      this._popup.close();\n    }\n    this.handleDisconnect();\n  }\n\n  private _beforeUnload = (): void => {\n    void this.disconnect();\n  };\n\n  async sign(\n    data: Uint8Array,\n    display: unknown,\n  ): Promise<{\n    signature: Buffer;\n    publicKey: PublicKey;\n  }> {\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Data must be an instance of Uint8Array');\n    }\n\n    const response = (await this.sendRequest('sign', {\n      data,\n      display,\n    })) as { publicKey: string; signature: string };\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    return {\n      signature,\n      publicKey,\n    };\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const response = (await this.sendRequest('signTransaction', {\n      message: bs58.encode(transaction.serializeMessage()),\n    })) as { publicKey: string; signature: string };\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    transaction.addSignature(publicKey, signature);\n    return transaction;\n  }\n\n  async signAllTransactions(\n    transactions: Transaction[],\n  ): Promise<Transaction[]> {\n    const response = (await this.sendRequest('signAllTransactions', {\n      messages: transactions.map((tx) => bs58.encode(tx.serializeMessage())),\n    })) as { publicKey: string; signatures: string[] };\n    const signatures = response.signatures.map((s) => bs58.decode(s));\n    const publicKey = new PublicKey(response.publicKey);\n    transactions = transactions.map((tx, idx) => {\n      tx.addSignature(publicKey, signatures[idx]);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async diffieHellman(\n    publicKey: Uint8Array,\n  ): Promise<{ publicKey: Uint8Array; secretKey: Uint8Array }> {\n    if (!(publicKey instanceof Uint8Array)) {\n      throw new Error('Data must be an instance of Uint8Array');\n    }\n    const response = (await this.sendRequest('diffieHellman', {\n      publicKey,\n    })) as {\n      publicKey: Uint8Array;\n      secretKey: Uint8Array;\n    };\n    return response;\n  }\n}\n\nfunction isString(a: unknown): a is string {\n  return typeof a === 'string';\n}\n\nfunction isInjectedProvider(a: unknown): a is InjectedProvider {\n  return (\n    isObject(a) && 'postMessage' in a && typeof a.postMessage === 'function'\n  );\n}\n\nfunction isObject(a: unknown): a is Record<string, unknown> {\n  return typeof a === 'object' && a !== null;\n}\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from 'crypto-hash';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import * as nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (\n  property: string = 'publicKey',\n): BufferLayout.Layout => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): BufferLayout.Layout => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: any, offset: any) => {\n    const data = _decode(buffer, offset);\n    return data['chars'].toString('utf8');\n  };\n\n  rsl.encode = (str: any, buffer: any, offset: any) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  (rsl as any).alloc = (str: any) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS: {\n  [type in SystemInstructionType]: InstructionType;\n} = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n}({}));\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport fetch from 'cross-fetch';\nimport type {Response} from 'cross-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: SimulatedTransactionAccountInfo[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          pick({\n            executable: boolean(),\n            owner: string(),\n            lamports: number(),\n            data: array(string()),\n            rentEpoch: optional(number()),\n          }),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger with signatures only\n */\nexport type ConfirmedBlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: (url: string, options: any) => Promise<Response>;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = (url: string, options: any) => {\n      return new Promise<Response>((resolve, reject) => {\n        fetchMiddleware(url, options, async (url: string, options: any) => {\n          try {\n            resolve(await fetch(url, options));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      });\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlockSignatures\" message\n */\nconst GetConfirmedBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch infor for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: Function,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retring calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get total supply: ' + res.error.message);\n    }\n    return res.result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a processed transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const result = await this.getBlock(slot, {commitment});\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const result = await this.getTransaction(signature, {commitment});\n    if (!result) return result;\n    const {message, signatures} = result.transaction;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        if (err instanceof Error) {\n          console.error(\n            `${rpcMethod} error for argument`,\n            rpcArgs,\n            err.message,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import * as nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        publicKeyOffset,\n        publicKeyInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  | 'AuthorizeWithSeed'\n  | 'Authorize'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Split'\n  | 'Withdraw'\n  | 'Merge';\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS: {\n  [type in StakeInstructionType]: InstructionType;\n} = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport {keccak_256} from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256.update(toBuffer(publicKey)).digest()).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedVoterPubkey = args.authorizedVoterPubkey;\n    this.authorizedWithdrawerPubkey = args.authorizedWithdrawerPubkey;\n    this.commission = args.commission;\n    this.votes = args.votes;\n    this.rootSlot = args.rootSlot;\n    this.epoch = args.epoch;\n    this.credits = args.credits;\n    this.lastEpochCredits = args.lastEpochCredits;\n    this.epochCredits = args.epochCredits;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedVoterPubkey: new PublicKey(va.authorizedVoterPubkey),\n      authorizedWithdrawerPubkey: new PublicKey(va.authorizedWithdrawerPubkey),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      epoch: va.epoch,\n      credits: va.credits,\n      lastEpochCredits: va.lastEpochCredits,\n      epochCredits: va.epochCredits,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n","module.exports = function(data, filename, mime, bom) {\n    var blobData = (typeof bom !== 'undefined') ? [bom, data] : [data]\n    var blob = new Blob(blobData, {type: mime || 'application/octet-stream'});\n    if (typeof window.navigator.msSaveBlob !== 'undefined') {\n        // IE workaround for \"HTML7007: One or more blob URLs were\n        // revoked by closing the blob for which they were created.\n        // These URLs will no longer resolve as the data backing\n        // the URL has been freed.\"\n        window.navigator.msSaveBlob(blob, filename);\n    }\n    else {\n        var blobURL = (window.URL && window.URL.createObjectURL) ? window.URL.createObjectURL(blob) : window.webkitURL.createObjectURL(blob);\n        var tempLink = document.createElement('a');\n        tempLink.style.display = 'none';\n        tempLink.href = blobURL;\n        tempLink.setAttribute('download', filename);\n\n        // Safari thinks _blank anchor are pop ups. We only want to set _blank\n        // target if the browser does not support the HTML5 download attribute.\n        // This allows you to download files in desktop safari if pop up blocking\n        // is enabled.\n        if (typeof tempLink.download === 'undefined') {\n            tempLink.setAttribute('target', '_blank');\n        }\n\n        document.body.appendChild(tempLink);\n        tempLink.click();\n\n        // Fixes \"webkit blob resource error 1\"\n        setTimeout(function() {\n            document.body.removeChild(tempLink);\n            window.URL.revokeObjectURL(blobURL);\n        }, 200)\n    }\n}\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    hasSymbol = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol',\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (hasSymbol) {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nmodule.exports = {\n    languageTag: \"en-US\",\n    delimiters: {\n        thousands: \",\",\n        decimal: \".\"\n    },\n    abbreviations: {\n        thousand: \"k\",\n        million: \"m\",\n        billion: \"b\",\n        trillion: \"t\"\n    },\n    spaceSeparated: false,\n    ordinal: function(number) {\n        let b = number % 10;\n        return (~~(number % 100 / 10) === 1) ? \"th\" : (b === 1) ? \"st\" : (b === 2) ? \"nd\" : (b === 3) ? \"rd\" : \"th\";\n    },\n    bytes: {\n        binarySuffixes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"],\n        decimalSuffixes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n    },\n    currency: {\n        symbol: \"$\",\n        position: \"prefix\",\n        code: \"USD\"\n    },\n    currencyFormat: {\n        thousandSeparated: true,\n        totalLength: 4,\n        spaceSeparated: true,\n        spaceSeparatedCurrency: true\n    },\n    formats: {\n        fourDigits: {\n            totalLength: 4,\n            spaceSeparated: true\n        },\n        fullWithTwoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithTwoDecimalsNoCurrency: {\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithNoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 0\n        }\n    }\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst globalState = require(\"./globalState\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nconst powers = {\n    trillion: Math.pow(10, 12),\n    billion: Math.pow(10, 9),\n    million: Math.pow(10, 6),\n    thousand: Math.pow(10, 3)\n};\n\nconst defaultOptions = {\n    totalLength: 0,\n    characteristic: 0,\n    forceAverage: false,\n    average: false,\n    mantissa: -1,\n    optionalMantissa: true,\n    thousandSeparated: false,\n    spaceSeparated: false,\n    negative: \"sign\",\n    forceSign: false,\n    roundingFunction: Math.round,\n    spaceSeparatedAbbreviation: false\n};\n\nconst { binarySuffixes, decimalSuffixes } = globalState.currentBytes();\n\nconst bytes = {\n    general: { scale: 1024, suffixes: decimalSuffixes, marker: \"bd\" },\n    binary: { scale: 1024, suffixes: binarySuffixes, marker: \"b\" },\n    decimal: { scale: 1000, suffixes: decimalSuffixes, marker: \"d\" }\n};\n\n/**\n * Entry point. Format the provided INSTANCE according to the PROVIDEDFORMAT.\n * This method ensure the prefix and postfix are added as the last step.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {NumbroFormat|string} [providedFormat] - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction format(instance, providedFormat = {}, numbro) {\n    if (typeof providedFormat === \"string\") {\n        providedFormat = parsing.parseFormat(providedFormat);\n    }\n\n    let valid = validating.validateFormat(providedFormat);\n\n    if (!valid) {\n        return \"ERROR: invalid format\";\n    }\n\n    let prefix = providedFormat.prefix || \"\";\n    let postfix = providedFormat.postfix || \"\";\n\n    let output = formatNumbro(instance, providedFormat, numbro);\n    output = insertPrefix(output, prefix);\n    output = insertPostfix(output, postfix);\n    return output;\n}\n\n/**\n * Format the provided INSTANCE according to the PROVIDEDFORMAT.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatNumbro(instance, providedFormat, numbro) {\n    switch (providedFormat.output) {\n        case \"currency\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentCurrencyDefaultFormat());\n            return formatCurrency(instance, providedFormat, globalState, numbro);\n        }\n        case \"percent\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentPercentageDefaultFormat());\n            return formatPercentage(instance, providedFormat, globalState, numbro);\n        }\n        case \"byte\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentByteDefaultFormat());\n            return formatByte(instance, providedFormat, globalState, numbro);\n        case \"time\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentTimeDefaultFormat());\n            return formatTime(instance, providedFormat, globalState, numbro);\n        case \"ordinal\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentOrdinalDefaultFormat());\n            return formatOrdinal(instance, providedFormat, globalState, numbro);\n        case \"number\":\n        default:\n            return formatNumber({\n                instance,\n                providedFormat,\n                numbro\n            });\n    }\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1000).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getDecimalByteUnit(instance) {\n    let data = bytes.decimal;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the binary byte unit (MiB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getBinaryByteUnit(instance) {\n    let data = bytes.binary;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getByteUnit(instance) {\n    let data = bytes.general;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Return the value and the suffix computed in byte.\n * It uses the SUFFIXES and the SCALE provided.\n *\n * @param {number} value - Number to format\n * @param {[String]} suffixes - List of suffixes\n * @param {number} scale - Number in-between two units\n * @return {{value: Number, suffix: String}}\n */\nfunction getFormatByteUnits(value, suffixes, scale) {\n    let suffix = suffixes[0];\n    let abs = Math.abs(value);\n\n    if (abs >= scale) {\n        for (let power = 1; power < suffixes.length; ++power) {\n            let min = Math.pow(scale, power);\n            let max = Math.pow(scale, power + 1);\n\n            if (abs >= min && abs < max) {\n                suffix = suffixes[power];\n                value = value / min;\n                break;\n            }\n        }\n\n        // values greater than or equal to [scale] YB never set the suffix\n        if (suffix === suffixes[0]) {\n            value = value / Math.pow(scale, suffixes.length - 1);\n            suffix = suffixes[suffixes.length - 1];\n        }\n    }\n\n    return { value, suffix };\n}\n\n/**\n * Format the provided INSTANCE as bytes using the PROVIDEDFORMAT, and STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatByte(instance, providedFormat, state, numbro) {\n    let base = providedFormat.base || \"binary\";\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    const { binarySuffixes: localBinarySuffixes, decimalSuffixes: localDecimalSuffixes } = state.currentBytes();\n\n    const localBytes = {\n        general: { scale: 1024, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"bd\" },\n        binary: { scale: 1024, suffixes: localBinarySuffixes || binarySuffixes, marker: \"b\" },\n        decimal: { scale: 1000, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"d\" }\n    };\n    let baseInfo = localBytes[base];\n\n    let { value, suffix } = getFormatByteUnits(instance._value, baseInfo.suffixes, baseInfo.scale);\n\n    let output = formatNumber({\n        instance: numbro(value),\n        providedFormat,\n        state,\n        defaults: state.currentByteDefaultFormat()\n    });\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${suffix}`;\n}\n\n/**\n * Format the provided INSTANCE as an ordinal using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatOrdinal(instance, providedFormat, state) {\n    let ordinalFn = state.currentOrdinal();\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state\n    });\n    let ordinal = ordinalFn(instance._value);\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${ordinal}`;\n}\n\n/**\n * Format the provided INSTANCE as a time HH:MM:SS.\n *\n * @param {Numbro} instance - numbro instance to format\n * @return {string}\n */\nfunction formatTime(instance) {\n    let hours = Math.floor(instance._value / 60 / 60);\n    let minutes = Math.floor((instance._value - (hours * 60 * 60)) / 60);\n    let seconds = Math.round(instance._value - (hours * 60 * 60) - (minutes * 60));\n    return `${hours}:${(minutes < 10) ? \"0\" : \"\"}${minutes}:${(seconds < 10) ? \"0\" : \"\"}${seconds}`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatPercentage(instance, providedFormat, state, numbro) {\n    let prefixSymbol = providedFormat.prefixSymbol;\n\n    let output = formatNumber({\n        instance: numbro(instance._value * 100),\n        providedFormat,\n        state\n    });\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    if (prefixSymbol) {\n        return `%${options.spaceSeparated ? \" \" : \"\"}${output}`;\n    }\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}%`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatCurrency(instance, providedFormat, state) {\n    const currentCurrency = state.currentCurrency();\n    let clonedFormat = Object.assign({}, providedFormat);\n    let options = Object.assign({}, defaultOptions, clonedFormat);\n    let decimalSeparator = undefined;\n    let space = \"\";\n    let average = !!options.totalLength || !!options.forceAverage || options.average;\n    let position = clonedFormat.currencyPosition || currentCurrency.position;\n    let symbol = clonedFormat.currencySymbol || currentCurrency.symbol;\n    const spaceSeparatedCurrency = options.spaceSeparatedCurrency !== void 0\n        ? options.spaceSeparatedCurrency : options.spaceSeparated;\n\n    if (clonedFormat.lowPrecision === undefined) {\n        clonedFormat.lowPrecision = false;\n    }\n\n    if (spaceSeparatedCurrency) {\n        space = \" \";\n    }\n\n    if (position === \"infix\") {\n        decimalSeparator = space + symbol + space;\n    }\n\n    let output = formatNumber({\n        instance,\n        providedFormat: clonedFormat,\n        state,\n        decimalSeparator\n    });\n\n    if (position === \"prefix\") {\n        if (instance._value < 0 && options.negative === \"sign\") {\n            output = `-${space}${symbol}${output.slice(1)}`;\n        } else if (instance._value > 0 && options.forceSign) {\n            output = `+${space}${symbol}${output.slice(1)}`;\n        } else {\n            output = symbol + space + output;\n        }\n    }\n\n    if (!position || position === \"postfix\") {\n        space = !options.spaceSeparatedAbbreviation && average ? \"\" : space;\n        output = output + space + symbol;\n    }\n\n    return output;\n}\n\n/**\n * Compute the average value out of VALUE.\n * The other parameters are computation options.\n *\n * @param {number} value - value to compute\n * @param {string} [forceAverage] - forced unit used to compute\n * @param {boolean} [lowPrecision=true] - reduce average precision\n * @param {{}} abbreviations - part of the language specification\n * @param {boolean} spaceSeparated - `true` if a space must be inserted between the value and the abbreviation\n * @param {number} [totalLength] - total length of the output including the characteristic and the mantissa\n * @param {function} roundingFunction - function used to round numbers\n * @return {{value: number, abbreviation: string, mantissaPrecision: number}}\n */\nfunction computeAverage({ value, forceAverage, lowPrecision = true, abbreviations, spaceSeparated = false, totalLength = 0, roundingFunction = Math.round }) {\n    let abbreviation = \"\";\n    let abs = Math.abs(value);\n    let mantissaPrecision = -1;\n\n    if (forceAverage && abbreviations[forceAverage] && powers[forceAverage]) {\n        abbreviation = abbreviations[forceAverage];\n        value = value / powers[forceAverage];\n    } else {\n        if (abs >= powers.trillion || (lowPrecision && roundingFunction(abs / powers.trillion) === 1)) {\n            // trillion\n            abbreviation = abbreviations.trillion;\n            value = value / powers.trillion;\n        } else if (abs < powers.trillion && abs >= powers.billion || (lowPrecision && roundingFunction(abs / powers.billion) === 1)) {\n            // billion\n            abbreviation = abbreviations.billion;\n            value = value / powers.billion;\n        } else if (abs < powers.billion && abs >= powers.million || (lowPrecision && roundingFunction(abs / powers.million) === 1)) {\n            // million\n            abbreviation = abbreviations.million;\n            value = value / powers.million;\n        } else if (abs < powers.million && abs >= powers.thousand || (lowPrecision && roundingFunction(abs / powers.thousand) === 1)) {\n            // thousand\n            abbreviation = abbreviations.thousand;\n            value = value / powers.thousand;\n        }\n    }\n\n    let optionalSpace = spaceSeparated ? \" \" : \"\";\n\n    if (abbreviation) {\n        abbreviation = optionalSpace + abbreviation;\n    }\n\n    if (totalLength) {\n        let isNegative = value < 0;\n        let characteristic = value.toString().split(\".\")[0];\n\n        let characteristicLength = isNegative\n            ? characteristic.length - 1\n            : characteristic.length;\n\n        mantissaPrecision = Math.max(totalLength - characteristicLength, 0);\n    }\n\n    return { value, abbreviation, mantissaPrecision };\n}\n\n/**\n * Compute an exponential form for VALUE, taking into account CHARACTERISTIC\n * if provided.\n * @param {number} value - value to compute\n * @param {number} [characteristicPrecision] - optional characteristic length\n * @return {{value: number, abbreviation: string}}\n */\nfunction computeExponential({ value, characteristicPrecision = 0 }) {\n    let [numberString, exponential] = value.toExponential().split(\"e\");\n    let number = +numberString;\n\n    if (!characteristicPrecision) {\n        return {\n            value: number,\n            abbreviation: `e${exponential}`\n        };\n    }\n\n    let characteristicLength = 1; // see `toExponential`\n\n    if (characteristicLength < characteristicPrecision) {\n        number = number * Math.pow(10, characteristicPrecision - characteristicLength);\n        exponential = +exponential - (characteristicPrecision - characteristicLength);\n        exponential = exponential >= 0 ? `+${exponential}` : exponential;\n    }\n\n    return {\n        value: number,\n        abbreviation: `e${exponential}`\n    };\n}\n\n/**\n * Return a string of NUMBER zero.\n *\n * @param {number} number - Length of the output\n * @return {string}\n */\nfunction zeroes(number) {\n    let result = \"\";\n    for (let i = 0; i < number; i++) {\n        result += \"0\";\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n * This method is for large/small numbers only (a.k.a. including a \"e\").\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixedLarge(value, precision) {\n    let result = value.toString();\n\n    let [base, exp] = result.split(\"e\");\n\n    let [characteristic, mantissa = \"\"] = base.split(\".\");\n\n    if (+exp > 0) {\n        result = characteristic + mantissa + zeroes(exp - mantissa.length);\n    } else {\n        let prefix = \".\";\n\n        if (+characteristic < 0) {\n            prefix = `-0${prefix}`;\n        } else {\n            prefix = `0${prefix}`;\n        }\n\n        let suffix = (zeroes(-exp - 1) + Math.abs(characteristic) + mantissa).substr(0, precision);\n        if (suffix.length < precision) {\n            suffix += zeroes(precision - suffix.length);\n        }\n        result = prefix + suffix;\n    }\n\n    if (+exp > 0 && precision > 0) {\n        result += `.${zeroes(precision)}`;\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @param {function} roundingFunction - rounding function to be used\n * @return {string}\n */\nfunction toFixed(value, precision, roundingFunction = Math.round) {\n    if (value.toString().indexOf(\"e\") !== -1) {\n        return toFixedLarge(value, precision);\n    }\n\n    return (roundingFunction(+`${value}e+${precision}`) / (Math.pow(10, precision))).toFixed(precision);\n}\n\n/**\n * Return the current OUTPUT with a mantissa precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalMantissa - if `true`, the mantissa is omitted when it's only zeroes\n * @param {number} precision - desired precision of the mantissa\n * @param {boolean} trim - if `true`, trailing zeroes are removed from the mantissa\n * @return {string}\n */\nfunction setMantissaPrecision(output, value, optionalMantissa, precision, trim, roundingFunction) {\n    if (precision === -1) {\n        return output;\n    }\n\n    let result = toFixed(value, precision, roundingFunction);\n    let [currentCharacteristic, currentMantissa = \"\"] = result.toString().split(\".\");\n\n    if (currentMantissa.match(/^0+$/) && (optionalMantissa || trim)) {\n        return currentCharacteristic;\n    }\n\n    let hasTrailingZeroes = currentMantissa.match(/0+$/);\n    if (trim && hasTrailingZeroes) {\n        return `${currentCharacteristic}.${currentMantissa.toString().slice(0, hasTrailingZeroes.index)}`;\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the current OUTPUT with a characteristic precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalCharacteristic - `true` if the characteristic is omitted when it's only zeroes\n * @param {number} precision - desired precision of the characteristic\n * @return {string}\n */\nfunction setCharacteristicPrecision(output, value, optionalCharacteristic, precision) {\n    let result = output;\n    let [currentCharacteristic, currentMantissa] = result.toString().split(\".\");\n\n    if (currentCharacteristic.match(/^-?0$/) && optionalCharacteristic) {\n        if (!currentMantissa) {\n            return currentCharacteristic.replace(\"0\", \"\");\n        }\n\n        return `${currentCharacteristic.replace(\"0\", \"\")}.${currentMantissa}`;\n    }\n\n    const hasNegativeSign = value < 0 && currentCharacteristic.indexOf(\"-\") === 0;\n    if (hasNegativeSign) {\n            // Remove the negative sign\n            currentCharacteristic = currentCharacteristic.slice(1);\n            result = result.slice(1);\n    }\n\n    if (currentCharacteristic.length < precision) {\n        let missingZeros = precision - currentCharacteristic.length;\n        for (let i = 0; i < missingZeros; i++) {\n            result = `0${result}`;\n        }\n    }\n\n    if (hasNegativeSign) {\n        // Add back the minus sign\n        result = `-${result}`;\n    }\n    return result.toString();\n}\n\n/**\n * Return the indexes where are the group separations after splitting\n * `totalLength` in group of `groupSize` size.\n * Important: we start grouping from the right hand side.\n *\n * @param {number} totalLength - total length of the characteristic to split\n * @param {number} groupSize - length of each group\n * @return {[number]}\n */\nfunction indexesOfGroupSpaces(totalLength, groupSize) {\n    let result = [];\n    let counter = 0;\n    for (let i = totalLength; i > 0; i--) {\n        if (counter === groupSize) {\n            result.unshift(i);\n            counter = 0;\n        }\n        counter++;\n    }\n\n    return result;\n}\n\n/**\n * Replace the decimal separator with DECIMALSEPARATOR and insert thousand\n * separators.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} thousandSeparated - `true` if the characteristic must be separated\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @return {string}\n */\nfunction replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator) {\n    let delimiters = state.currentDelimiters();\n    let thousandSeparator = delimiters.thousands;\n    decimalSeparator = decimalSeparator || delimiters.decimal;\n    let thousandsSize = delimiters.thousandsSize || 3;\n\n    let result = output.toString();\n    let characteristic = result.split(\".\")[0];\n    let mantissa = result.split(\".\")[1];\n    const hasNegativeSign = value < 0 && characteristic.indexOf(\"-\") === 0;\n\n    if (thousandSeparated) {\n        if (hasNegativeSign) {\n            // Remove the negative sign\n            characteristic = characteristic.slice(1);\n        }\n\n        let indexesToInsertThousandDelimiters = indexesOfGroupSpaces(characteristic.length, thousandsSize);\n        indexesToInsertThousandDelimiters.forEach((position, index) => {\n            characteristic = characteristic.slice(0, position + index) + thousandSeparator + characteristic.slice(position + index);\n        });\n\n        if (hasNegativeSign) {\n            // Add back the negative sign\n            characteristic = `-${characteristic}`;\n        }\n    }\n\n    if (!mantissa) {\n        result = characteristic;\n    } else {\n        result = characteristic + decimalSeparator + mantissa;\n    }\n    return result;\n}\n\n/**\n * Insert the provided ABBREVIATION at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} abbreviation - abbreviation to append\n * @return {*}\n */\nfunction insertAbbreviation(output, abbreviation) {\n    return output + abbreviation;\n}\n\n/**\n * Insert the positive/negative sign according to the NEGATIVE flag.\n * If the value is negative but still output as 0, the negative sign is removed.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {string} negative - flag for the negative form (\"sign\" or \"parenthesis\")\n * @return {*}\n */\nfunction insertSign(output, value, negative) {\n    if (value === 0) {\n        return output;\n    }\n\n    if (+output === 0) {\n        return output.replace(\"-\", \"\");\n    }\n\n    if (value > 0) {\n        return `+${output}`;\n    }\n\n    if (negative === \"sign\") {\n        return output;\n    }\n\n    return `(${output.replace(\"-\", \"\")})`;\n}\n\n/**\n * Insert the provided PREFIX at the start of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} prefix - abbreviation to prepend\n * @return {*}\n */\nfunction insertPrefix(output, prefix) {\n    return prefix + output;\n}\n\n/**\n * Insert the provided POSTFIX at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} postfix - abbreviation to append\n * @return {*}\n */\nfunction insertPostfix(output, postfix) {\n    return output + postfix;\n}\n\n/**\n * Format the provided INSTANCE as a number using the PROVIDEDFORMAT,\n * and the STATE.\n * This is the key method of the framework!\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} [providedFormat] - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @param {{}} defaults - Set of default values used for formatting\n * @return {string}\n */\nfunction formatNumber({ instance, providedFormat, state = globalState, decimalSeparator, defaults = state.currentDefaults() }) {\n    let value = instance._value;\n\n    if (value === 0 && state.hasZeroFormat()) {\n        return state.getZeroFormat();\n    }\n\n    if (!isFinite(value)) {\n        return value.toString();\n    }\n\n    let options = Object.assign({}, defaultOptions, defaults, providedFormat);\n\n    let totalLength = options.totalLength;\n    let characteristicPrecision = totalLength ? 0 : options.characteristic;\n    let optionalCharacteristic = options.optionalCharacteristic;\n    let forceAverage = options.forceAverage;\n    let lowPrecision = options.lowPrecision;\n    let average = !!totalLength || !!forceAverage || options.average;\n\n    // default when averaging is to chop off decimals\n    let mantissaPrecision = totalLength ? -1 : (average && providedFormat.mantissa === undefined ? 0 : options.mantissa);\n    let optionalMantissa = totalLength ? false : (providedFormat.optionalMantissa === undefined ? mantissaPrecision === -1 : options.optionalMantissa);\n    let trimMantissa = options.trimMantissa;\n    let thousandSeparated = options.thousandSeparated;\n    let spaceSeparated = options.spaceSeparated;\n    let negative = options.negative;\n    let forceSign = options.forceSign;\n    let exponential = options.exponential;\n    let roundingFunction = options.roundingFunction;\n\n    let abbreviation = \"\";\n    if (average) {\n        let data = computeAverage({\n            value,\n            forceAverage,\n            lowPrecision,\n            abbreviations: state.currentAbbreviations(),\n            spaceSeparated,\n            roundingFunction,\n            totalLength\n        });\n\n        value = data.value;\n        abbreviation += data.abbreviation;\n\n        if (totalLength) {\n            mantissaPrecision = data.mantissaPrecision;\n        }\n    }\n\n    if (exponential) {\n        let data = computeExponential({\n            value,\n            characteristicPrecision\n        });\n\n        value = data.value;\n        abbreviation = data.abbreviation + abbreviation;\n    }\n\n    let output = setMantissaPrecision(value.toString(), value, optionalMantissa, mantissaPrecision, trimMantissa, roundingFunction);\n    output = setCharacteristicPrecision(output, value, optionalCharacteristic, characteristicPrecision);\n    output = replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator);\n\n    if (average || exponential) {\n        output = insertAbbreviation(output, abbreviation);\n    }\n\n    if (forceSign || value < 0) {\n        output = insertSign(output, value, negative);\n    }\n\n    return output;\n}\n\n/**\n * If FORMAT is non-null and not just an output, return FORMAT.\n * Return DEFAULTFORMAT otherwise.\n *\n * @param providedFormat\n * @param defaultFormat\n */\nfunction formatOrDefault(providedFormat, defaultFormat) {\n    if (!providedFormat) {\n        return defaultFormat;\n    }\n\n    let keys = Object.keys(providedFormat);\n    if (keys.length === 1 && keys[0] === \"output\") {\n        return defaultFormat;\n    }\n\n    return providedFormat;\n}\n\nmodule.exports = (numbro) => ({\n    format: (...args) => format(...args, numbro),\n    getByteUnit: (...args) => getByteUnit(...args, numbro),\n    getBinaryByteUnit: (...args) => getBinaryByteUnit(...args, numbro),\n    getDecimalByteUnit: (...args) => getDecimalByteUnit(...args, numbro),\n    formatOrDefault\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst enUS = require(\"./en-US\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nlet state = {};\n\nlet currentLanguageTag = undefined;\nlet languages = {};\n\nlet zeroFormat = null;\n\nlet globalDefaults = {};\n\nfunction chooseLanguage(tag) { currentLanguageTag = tag; }\n\nfunction currentLanguageData() { return languages[currentLanguageTag]; }\n\n/**\n * Return all the register languages\n *\n * @return {{}}\n */\nstate.languages = () => Object.assign({}, languages);\n\n//\n// Current language accessors\n//\n\n/**\n * Return the current language tag\n *\n * @return {string}\n */\nstate.currentLanguage = () => currentLanguageTag;\n\n/**\n * Return the current language bytes data\n *\n * @return {{}}\n */\nstate.currentBytes = () => currentLanguageData().bytes || {};\n\n/**\n * Return the current language currency data\n *\n * @return {{}}\n */\nstate.currentCurrency = () => currentLanguageData().currency;\n\n/**\n * Return the current language abbreviations data\n *\n * @return {{}}\n */\nstate.currentAbbreviations = () => currentLanguageData().abbreviations;\n\n/**\n * Return the current language delimiters data\n *\n * @return {{}}\n */\nstate.currentDelimiters = () => currentLanguageData().delimiters;\n\n/**\n * Return the current language ordinal function\n *\n * @return {function}\n */\nstate.currentOrdinal = () => currentLanguageData().ordinal;\n\n//\n// Defaults\n//\n\n/**\n * Return the current formatting defaults.\n * First use the current language default, then fallback to the globally defined defaults.\n *\n * @return {{}}\n */\nstate.currentDefaults = () => Object.assign({}, currentLanguageData().defaults, globalDefaults);\n\n/**\n * Return the ordinal default-format.\n * First use the current language ordinal default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentOrdinalDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().ordinalFormat);\n\n/**\n * Return the byte default-format.\n * First use the current language byte default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentByteDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().byteFormat);\n\n/**\n * Return the percentage default-format.\n * First use the current language percentage default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentPercentageDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().percentageFormat);\n\n/**\n * Return the currency default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentCurrencyDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().currencyFormat);\n\n/**\n * Return the time default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentTimeDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().timeFormat);\n\n/**\n * Set the global formatting defaults.\n *\n * @param {{}|string} format - formatting options to use as defaults\n */\nstate.setDefaults = (format) => {\n    format = parsing.parseFormat(format);\n    if (validating.validateFormat(format)) {\n        globalDefaults = format;\n    }\n};\n\n//\n// Zero format\n//\n\n/**\n * Return the format string for 0.\n *\n * @return {string}\n */\nstate.getZeroFormat = () => zeroFormat;\n\n/**\n * Set a STRING to output when the value is 0.\n *\n * @param {{}|string} string - string to set\n */\nstate.setZeroFormat = (string) => zeroFormat = typeof(string) === \"string\" ? string : null;\n\n/**\n * Return true if a format for 0 has been set already.\n *\n * @return {boolean}\n */\nstate.hasZeroFormat = () => zeroFormat !== null;\n\n//\n// Getters/Setters\n//\n\n/**\n * Return the language data for the provided TAG.\n * Return the current language data if no tag is provided.\n *\n * Throw an error if the tag doesn't match any registered language.\n *\n * @param {string} [tag] - language tag of a registered language\n * @return {{}}\n */\nstate.languageData = (tag) => {\n    if (tag) {\n        if (languages[tag]) {\n            return languages[tag];\n        }\n        throw new Error(`Unknown tag \"${tag}\"`);\n    }\n\n    return currentLanguageData();\n};\n\n/**\n * Register the provided DATA as a language if and only if the data is valid.\n * If the data is not valid, an error is thrown.\n *\n * When USELANGUAGE is true, the registered language is then used.\n *\n * @param {{}} data - language data to register\n * @param {boolean} [useLanguage] - `true` if the provided data should become the current language\n */\nstate.registerLanguage = (data, useLanguage = false) => {\n    if (!validating.validateLanguage(data)) {\n        throw new Error(\"Invalid language data\");\n    }\n\n    languages[data.languageTag] = data;\n\n    if (useLanguage) {\n        chooseLanguage(data.languageTag);\n    }\n};\n\n/**\n * Set the current language according to TAG.\n * If TAG doesn't match a registered language, another language matching\n * the \"language\" part of the tag (according to BCP47: https://tools.ietf.org/rfc/bcp/bcp47.txt).\n * If none, the FALLBACKTAG is used. If the FALLBACKTAG doesn't match a register language,\n * `en-US` is finally used.\n *\n * @param tag\n * @param fallbackTag\n */\nstate.setLanguage = (tag, fallbackTag = enUS.languageTag) => {\n    if (!languages[tag]) {\n        let suffix = tag.split(\"-\")[0];\n\n        let matchingLanguageTag = Object.keys(languages).find(each => {\n            return each.split(\"-\")[0] === suffix;\n        });\n\n        if (!languages[matchingLanguageTag]) {\n            chooseLanguage(fallbackTag);\n            return;\n        }\n\n        chooseLanguage(matchingLanguageTag);\n        return;\n    }\n\n    chooseLanguage(tag);\n};\n\nstate.registerLanguage(enUS);\ncurrentLanguageTag = enUS.languageTag;\n\nmodule.exports = state;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Load languages matching TAGS. Silently pass over the failing load.\n *\n * We assume here that we are in a node environment, so we don't check for it.\n * @param {[String]} tags - list of tags to load\n * @param {Numbro} numbro - the numbro singleton\n */\nfunction loadLanguagesInNode(tags, numbro) {\n    tags.forEach((tag) => {\n        let data = undefined;\n        try {\n            data = require(`../languages/${tag}`);\n        } catch (e) {\n            console.error(`Unable to load \"${tag}\". No matching language file found.`); // eslint-disable-line no-console\n        }\n\n        if (data) {\n            numbro.registerLanguage(data);\n        }\n    });\n}\n\nmodule.exports = (numbro) => ({\n    loadLanguagesInNode: (tags) => loadLanguagesInNode(tags, numbro)\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst BigNumber = require(\"bignumber.js\");\n\n/**\n * Add a number or a numbro to N.\n *\n * @param {Numbro} n - augend\n * @param {number|Numbro} other - addend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction add(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.plus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Subtract a number or a numbro from N.\n *\n * @param {Numbro} n - minuend\n * @param {number|Numbro} other - subtrahend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction subtract(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.minus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Multiply N by a number or a numbro.\n *\n * @param {Numbro} n - multiplicand\n * @param {number|Numbro} other - multiplier\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction multiply(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.times(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Divide N by a number or a numbro.\n *\n * @param {Numbro} n - dividend\n * @param {number|Numbro} other - divisor\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction divide(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.dividedBy(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Set N to the OTHER (or the value of OTHER when it's a numbro instance).\n *\n * @param {Numbro} n - numbro instance to mutate\n * @param {number|Numbro} other - new value to assign to N\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction set (n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    n._value = value;\n    return n;\n}\n\n/**\n * Return the distance between N and OTHER.\n *\n * @param {Numbro} n\n * @param {number|Numbro} other\n * @param {numbro} numbro - numbro singleton\n * @return {number}\n */\nfunction difference(n, other, numbro) {\n    let clone = numbro(n._value);\n    subtract(clone, other, numbro);\n\n    return Math.abs(clone._value);\n}\n\nmodule.exports = numbro => ({\n    add: (n, other) => add(n, other, numbro),\n    subtract: (n, other) => subtract(n, other, numbro),\n    multiply: (n, other) => multiply(n, other, numbro),\n    divide: (n, other) => divide(n, other, numbro),\n    set: (n, other) => set(n, other, numbro),\n    difference: (n, other) => difference(n, other, numbro),\n    BigNumber: BigNumber\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst VERSION = \"2.3.5\";\n\nconst globalState = require(\"./globalState\");\nconst validator = require(\"./validating\");\nconst loader = require(\"./loading\")(numbro);\nconst unformatter = require(\"./unformatting\");\nlet formatter = require(\"./formatting\")(numbro);\nlet manipulate = require(\"./manipulating\")(numbro);\nconst parsing = require(\"./parsing\");\n\nclass Numbro {\n    constructor(number) {\n        this._value = number;\n    }\n\n    clone() { return numbro(this._value); }\n\n    format(format = {}) { return formatter.format(this, format); }\n\n    formatCurrency(format) {\n        if (typeof format === \"string\") {\n            format = parsing.parseFormat(format);\n        }\n        format = formatter.formatOrDefault(format, globalState.currentCurrencyDefaultFormat());\n        format.output = \"currency\";\n        return formatter.format(this, format);\n    }\n\n    formatTime(format = {}) {\n        format.output = \"time\";\n        return formatter.format(this, format);\n    }\n\n    binaryByteUnits() { return formatter.getBinaryByteUnit(this);}\n\n    decimalByteUnits() { return formatter.getDecimalByteUnit(this);}\n\n    byteUnits() { return formatter.getByteUnit(this);}\n\n    difference(other) { return manipulate.difference(this, other); }\n\n    add(other) { return manipulate.add(this, other); }\n\n    subtract(other) { return manipulate.subtract(this, other); }\n\n    multiply(other) { return manipulate.multiply(this, other); }\n\n    divide(other) { return manipulate.divide(this, other); }\n\n    set(input) { return manipulate.set(this, normalizeInput(input)); }\n\n    value() { return this._value; }\n\n    valueOf() { return this._value; }\n}\n\n/**\n * Make its best to convert input into a number.\n *\n * @param {numbro|string|number} input - Input to convert\n * @return {number}\n */\nfunction normalizeInput(input) {\n    let result = input;\n    if (numbro.isNumbro(input)) {\n        result = input._value;\n    } else if (typeof input === \"string\") {\n        result = numbro.unformat(input);\n    } else if (isNaN(input)) {\n        result = NaN;\n    }\n\n    return result;\n}\n\nfunction numbro(input) {\n    return new Numbro(normalizeInput(input));\n}\n\nnumbro.version = VERSION;\n\nnumbro.isNumbro = function(object) {\n    return object instanceof Numbro;\n};\n\n//\n// `numbro` static methods\n//\n\nnumbro.language = globalState.currentLanguage;\nnumbro.registerLanguage = globalState.registerLanguage;\nnumbro.setLanguage = globalState.setLanguage;\nnumbro.languages = globalState.languages;\nnumbro.languageData = globalState.languageData;\nnumbro.zeroFormat = globalState.setZeroFormat;\nnumbro.defaultFormat = globalState.currentDefaults;\nnumbro.setDefaults = globalState.setDefaults;\nnumbro.defaultCurrencyFormat = globalState.currentCurrencyDefaultFormat;\nnumbro.validate = validator.validate;\nnumbro.loadLanguagesInNode = loader.loadLanguagesInNode;\nnumbro.unformat = unformatter.unformat;\nnumbro.BigNumber = manipulate.BigNumber;\n\nmodule.exports = numbro;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Parse the format STRING looking for a prefix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePrefix(string, result) {\n    let match = string.match(/^{([^}]*)}/);\n    if (match) {\n        result.prefix = match[1];\n        return string.slice(match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for a postfix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePostfix(string, result) {\n    let match = string.match(/{([^}]*)}$/);\n    if (match) {\n        result.postfix = match[1];\n\n        return string.slice(0, -match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for the output value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseOutput(string, result) {\n    if (string.indexOf(\"$\") !== -1) {\n        result.output = \"currency\";\n        return;\n    }\n\n    if (string.indexOf(\"%\") !== -1) {\n        result.output = \"percent\";\n        return;\n    }\n\n    if (string.indexOf(\"bd\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"general\";\n        return;\n    }\n\n    if (string.indexOf(\"b\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"binary\";\n        return;\n\n    }\n\n    if (string.indexOf(\"d\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"decimal\";\n        return;\n\n    }\n\n    if (string.indexOf(\":\") !== -1) {\n        result.output = \"time\";\n        return;\n    }\n\n    if (string.indexOf(\"o\") !== -1) {\n        result.output = \"ordinal\";\n    }\n}\n\n/**\n * Parse the format STRING looking for the thousand separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseThousandSeparated(string, result) {\n    if (string.indexOf(\",\") !== -1) {\n        result.thousandSeparated = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for the space separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseSpaceSeparated(string, result) {\n    if (string.indexOf(\" \") !== -1) {\n        result.spaceSeparated = true;\n        result.spaceSeparatedCurrency = true;\n\n        if (result.average || result.forceAverage) {\n            result.spaceSeparatedAbbreviation = true;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for the total length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseTotalLength(string, result) {\n    let match = string.match(/[1-9]+[0-9]*/);\n\n    if (match) {\n        result.totalLength = +match[0];\n    }\n}\n\n/**\n * Parse the format STRING looking for the characteristic length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseCharacteristic(string, result) {\n    let characteristic = string.split(\".\")[0];\n    let match = characteristic.match(/0+/);\n    if (match) {\n        result.characteristic = match[0].length;\n    }\n}\n\n/**\n * Parse the format STRING looking for the mantissa length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseMantissa(string, result) {\n    let mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        let match = mantissa.match(/0+/);\n        if (match) {\n            result.mantissa = match[0].length;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for a trimmed mantissa. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseTrimMantissa(string, result) {\n    const mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        result.trimMantissa = mantissa.indexOf(\"[\") !== -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the average value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseAverage(string, result) {\n    if (string.indexOf(\"a\") !== -1) {\n        result.average = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for a forced average precision. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseForceAverage(string, result) {\n    if (string.indexOf(\"K\") !== -1) {\n        result.forceAverage = \"thousand\";\n    } else if (string.indexOf(\"M\") !== -1) {\n        result.forceAverage = \"million\";\n    } else if (string.indexOf(\"B\") !== -1) {\n        result.forceAverage = \"billion\";\n    } else if (string.indexOf(\"T\") !== -1) {\n        result.forceAverage = \"trillion\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the mantissa is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalMantissa(string, result) {\n    if (string.match(/\\[\\.]/)) {\n        result.optionalMantissa = true;\n    } else if (string.match(/\\./)) {\n        result.optionalMantissa = false;\n    }\n}\n\n/**\n * Parse the format STRING finding if the characteristic is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalCharacteristic(string, result) {\n    if (string.indexOf(\".\") !== -1) {\n        let characteristic = string.split(\".\")[0];\n        result.optionalCharacteristic = characteristic.indexOf(\"0\") === -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the negative format. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseNegative(string, result) {\n    if (string.match(/^\\+?\\([^)]*\\)$/)) {\n        result.negative = \"parenthesis\";\n    }\n    if (string.match(/^\\+?-/)) {\n        result.negative = \"sign\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the sign is mandatory. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseForceSign(string, result) {\n    if (string.match(/^\\+/)) {\n        result.forceSign = true;\n    }\n}\n\n/**\n * Parse the format STRING and accumulating the values ie RESULT.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {NumbroFormat} - format\n */\nfunction parseFormat(string, result = {}) {\n    if (typeof string !== \"string\") {\n        return string;\n    }\n\n    string = parsePrefix(string, result);\n    string = parsePostfix(string, result);\n    parseOutput(string, result);\n    parseTotalLength(string, result);\n    parseCharacteristic(string, result);\n    parseOptionalCharacteristic(string, result);\n    parseAverage(string, result);\n    parseForceAverage(string, result);\n    parseMantissa(string, result);\n    parseOptionalMantissa(string, result);\n    parseTrimMantissa(string, result);\n    parseThousandSeparated(string, result);\n    parseSpaceSeparated(string, result);\n    parseNegative(string, result);\n    parseForceSign(string, result);\n\n    return result;\n}\n\nmodule.exports = {\n    parseFormat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst allSuffixes = [\n    {key: \"ZiB\", factor: Math.pow(1024, 7)},\n    {key: \"ZB\", factor: Math.pow(1000, 7)},\n    {key: \"YiB\", factor: Math.pow(1024, 8)},\n    {key: \"YB\", factor: Math.pow(1000, 8)},\n    {key: \"TiB\", factor: Math.pow(1024, 4)},\n    {key: \"TB\", factor: Math.pow(1000, 4)},\n    {key: \"PiB\", factor: Math.pow(1024, 5)},\n    {key: \"PB\", factor: Math.pow(1000, 5)},\n    {key: \"MiB\", factor: Math.pow(1024, 2)},\n    {key: \"MB\", factor: Math.pow(1000, 2)},\n    {key: \"KiB\", factor: Math.pow(1024, 1)},\n    {key: \"KB\", factor: Math.pow(1000, 1)},\n    {key: \"GiB\", factor: Math.pow(1024, 3)},\n    {key: \"GB\", factor: Math.pow(1000, 3)},\n    {key: \"EiB\", factor: Math.pow(1024, 6)},\n    {key: \"EB\", factor: Math.pow(1000, 6)},\n    {key: \"B\", factor: 1}\n];\n\n/**\n * Generate a RegExp where S get all RegExp specific characters escaped.\n *\n * @param {string} s - string representing a RegExp\n * @return {string}\n */\nfunction escapeRegExp(s) {\n    return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n\n/**\n * Recursively compute the unformatted value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction computeUnformattedValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (!isNaN(+inputString)) {\n        return +inputString;\n    }\n\n    let stripped = \"\";\n    // Negative\n\n    let newInput = inputString.replace(/(^[^(]*)\\((.*)\\)([^)]*$)/, \"$1$2$3\");\n\n    if (newInput !== inputString) {\n        return -1 * computeUnformattedValue(newInput, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n    }\n\n    // Byte\n\n    for (let i = 0; i < allSuffixes.length; i++) {\n        let suffix = allSuffixes[i];\n        stripped = inputString.replace(RegExp(`([0-9 ])(${suffix.key})$`), \"$1\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * suffix.factor;\n        }\n    }\n\n    // Percent\n\n    stripped = inputString.replace(\"%\", \"\");\n\n    if (stripped !== inputString) {\n        return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) / 100;\n    }\n\n    // Ordinal\n\n    let possibleOrdinalValue = parseFloat(inputString);\n\n    if (isNaN(possibleOrdinalValue)) {\n        return undefined;\n    }\n\n    let ordinalString = ordinal(possibleOrdinalValue);\n    if (ordinalString && ordinalString !== \".\") { // if ordinal is \".\" it will be caught next round in the +inputString\n        stripped = inputString.replace(new RegExp(`${escapeRegExp(ordinalString)}$`), \"\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    }\n\n    // Average\n\n    let inversedAbbreviations = {};\n    Object.keys(abbreviations).forEach((key) => {\n        inversedAbbreviations[abbreviations[key]] = key;\n    });\n\n    let abbreviationValues = Object.keys(inversedAbbreviations).sort().reverse();\n    let numberOfAbbreviations = abbreviationValues.length;\n\n    for (let i = 0; i < numberOfAbbreviations; i++) {\n        let value = abbreviationValues[i];\n        let key = inversedAbbreviations[value];\n\n        stripped = inputString.replace(value, \"\");\n        if (stripped !== inputString) {\n            let factor = undefined;\n            switch (key) { // eslint-disable-line default-case\n                case \"thousand\":\n                    factor = Math.pow(10, 3);\n                    break;\n                case \"million\":\n                    factor = Math.pow(10, 6);\n                    break;\n                case \"billion\":\n                    factor = Math.pow(10, 9);\n                    break;\n                case \"trillion\":\n                    factor = Math.pow(10, 12);\n                    break;\n            }\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * factor;\n        }\n    }\n\n    return undefined;\n}\n\n/**\n * Removes in one pass all formatting symbols.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @return {string}\n */\nfunction removeFormattingSymbols(inputString, delimiters, currencySymbol = \"\") {\n    // Currency\n\n    let stripped = inputString.replace(currencySymbol, \"\");\n\n    // Thousand separators\n\n    stripped = stripped.replace(new RegExp(`([0-9])${escapeRegExp(delimiters.thousands)}([0-9])`, \"g\"), \"$1$2\");\n\n    // Decimal\n\n    stripped = stripped.replace(delimiters.decimal, \".\");\n\n    return stripped;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction unformatValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (inputString === \"\") {\n        return undefined;\n    }\n\n    // Zero Format\n\n    if (inputString === zeroFormat) {\n        return 0;\n    }\n\n    let value = removeFormattingSymbols(inputString, delimiters, currencySymbol);\n    return computeUnformattedValue(value, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n}\n\n/**\n * Check if the INPUTSTRING represents a time.\n *\n * @param {string} inputString - string to check\n * @param {*} delimiters - Delimiters used while generating the inputString\n * @return {boolean}\n */\nfunction matchesTime(inputString, delimiters) {\n    let separators = inputString.indexOf(\":\") && delimiters.thousands !== \":\";\n\n    if (!separators) {\n        return false;\n    }\n\n    let segments = inputString.split(\":\");\n    if (segments.length !== 3) {\n        return false;\n    }\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return !isNaN(hours) && !isNaN(minutes) && !isNaN(seconds);\n}\n\n/**\n * Unformat a numbro-generated string representing a time to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @return {number}\n */\nfunction unformatTime(inputString) {\n    let segments = inputString.split(\":\");\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return seconds + 60 * minutes + 3600 * hours;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {NumbroFormat} format - format used  while generating the inputString\n * @return {number}\n */\nfunction unformat(inputString, format) {\n    // Avoid circular references\n    const globalState = require(\"./globalState\");\n\n    let delimiters = globalState.currentDelimiters();\n    let currencySymbol = globalState.currentCurrency().symbol;\n    let ordinal = globalState.currentOrdinal();\n    let zeroFormat = globalState.getZeroFormat();\n    let abbreviations = globalState.currentAbbreviations();\n\n    let value = undefined;\n\n    if (typeof inputString === \"string\") {\n        if (matchesTime(inputString, delimiters)) {\n            value = unformatTime(inputString);\n        } else {\n            value = unformatValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    } else if (typeof inputString === \"number\") {\n        value = inputString;\n    } else {\n        return undefined;\n    }\n\n    if (value === undefined) {\n        return undefined;\n    }\n\n    return value;\n}\n\nmodule.exports = {\n    unformat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nlet unformatter = require(\"./unformatting\");\n\n// Simplified regexp supporting only `language`, `script`, and `region`\nconst bcp47RegExp = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/;\n\nconst validOutputValues = [\n    \"currency\",\n    \"percent\",\n    \"byte\",\n    \"time\",\n    \"ordinal\",\n    \"number\"\n];\n\nconst validForceAverageValues = [\n    \"trillion\",\n    \"billion\",\n    \"million\",\n    \"thousand\"\n];\n\nconst validCurrencyPosition = [\n    \"prefix\",\n    \"infix\",\n    \"postfix\"\n];\n\nconst validNegativeValues = [\n    \"sign\",\n    \"parenthesis\"\n];\n\nconst validMandatoryAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: {\n            type: \"string\",\n            mandatory: true\n        },\n        million: {\n            type: \"string\",\n            mandatory: true\n        },\n        billion: {\n            type: \"string\",\n            mandatory: true\n        },\n        trillion: {\n            type: \"string\",\n            mandatory: true\n        }\n    },\n    mandatory: true\n};\n\nconst validAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: \"string\",\n        million: \"string\",\n        billion: \"string\",\n        trillion: \"string\"\n    }\n};\n\nconst validBaseValues = [\n    \"decimal\",\n    \"binary\",\n    \"general\"\n];\n\nconst validFormat = {\n    output: {\n        type: \"string\",\n        validValues: validOutputValues\n    },\n    base: {\n        type: \"string\",\n        validValues: validBaseValues,\n        restriction: (number, format) => format.output === \"byte\",\n        message: \"`base` must be provided only when the output is `byte`\",\n        mandatory: (format) => format.output === \"byte\"\n    },\n    characteristic: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    prefix: \"string\",\n    postfix: \"string\",\n    forceAverage: {\n        type: \"string\",\n        validValues: validForceAverageValues\n    },\n    average: \"boolean\",\n    lowPrecision: {\n        type: \"boolean\",\n        restriction: (number, format) => format.average === true,\n        message: \"`lowPrecision` must be provided only when the option `average` is set\"\n    },\n    currencyPosition: {\n        type: \"string\",\n        validValues: validCurrencyPosition\n    },\n    currencySymbol: \"string\",\n    totalLength: {\n        type: \"number\",\n        restrictions: [\n            {\n                restriction: (number) => number >= 0,\n                message: \"value must be positive\"\n            },\n            {\n                restriction: (number, format) => !format.exponential,\n                message: \"`totalLength` is incompatible with `exponential`\"\n            }\n        ]\n    },\n    mantissa: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    optionalMantissa: \"boolean\",\n    trimMantissa: \"boolean\",\n    roundingFunction: \"function\",\n    optionalCharacteristic: \"boolean\",\n    thousandSeparated: \"boolean\",\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    spaceSeparatedAbbreviation: \"boolean\",\n    abbreviations: validAbbreviations,\n    negative: {\n        type: \"string\",\n        validValues: validNegativeValues\n    },\n    forceSign: \"boolean\",\n    exponential: {\n        type: \"boolean\"\n    },\n    prefixSymbol: {\n        type: \"boolean\",\n        restriction: (number, format) => format.output === \"percent\",\n        message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n    }\n};\n\nconst validLanguage = {\n    languageTag: {\n        type: \"string\",\n        mandatory: true,\n        restriction: (tag) => {\n            return tag.match(bcp47RegExp);\n        },\n        message: \"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)\"\n    },\n    delimiters: {\n        type: \"object\",\n        children: {\n            thousands: \"string\",\n            decimal: \"string\",\n            thousandsSize: \"number\"\n        },\n        mandatory: true\n    },\n    abbreviations: validMandatoryAbbreviations,\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    ordinal: {\n        type: \"function\",\n        mandatory: true\n    },\n    bytes: {\n        type: \"object\",\n        children: {\n            binarySuffixes: \"object\",\n            decimalSuffixes: \"object\"\n        }\n    },\n    currency: {\n        type: \"object\",\n        children: {\n            symbol: \"string\",\n            position: \"string\",\n            code: \"string\"\n        },\n        mandatory: true\n    },\n    defaults: \"format\",\n    ordinalFormat: \"format\",\n    byteFormat: \"format\",\n    percentageFormat: \"format\",\n    currencyFormat: \"format\",\n    timeDefaults: \"format\",\n    formats: {\n        type: \"object\",\n        children: {\n            fourDigits: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimals: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimalsNoCurrency: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithNoDecimals: {\n                type: \"format\",\n                mandatory: true\n            }\n        }\n    }\n};\n\n/**\n * Check the validity of the provided input and format.\n * The check is NOT lazy.\n *\n * @param {string|number|Numbro} input - input to check\n * @param {NumbroFormat} format - format to check\n * @return {boolean} True when everything is correct\n */\nfunction validate(input, format) {\n    let validInput = validateInput(input);\n    let isFormatValid = validateFormat(format);\n\n    return validInput && isFormatValid;\n}\n\n/**\n * Check the validity of the numbro input.\n *\n * @param {string|number|Numbro} input - input to check\n * @return {boolean} True when everything is correct\n */\nfunction validateInput(input) {\n    let value = unformatter.unformat(input);\n\n    return value !== undefined;\n}\n\n/**\n * Check the validity of the provided format TOVALIDATE against SPEC.\n *\n * @param {NumbroFormat} toValidate - format to check\n * @param {*} spec - specification against which to check\n * @param {string} prefix - prefix use for error messages\n * @param {boolean} skipMandatoryCheck - `true` when the check for mandatory key must be skipped\n * @return {boolean} True when everything is correct\n */\nfunction validateSpec(toValidate, spec, prefix, skipMandatoryCheck = false) {\n    let results = Object.keys(toValidate).map((key) => {\n        if (!spec[key]) {\n            console.error(`${prefix} Invalid key: ${key}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        let value = toValidate[key];\n        let data = spec[key];\n\n        if (typeof data === \"string\") {\n            data = {type: data};\n        }\n\n        if (data.type === \"format\") { // all formats are partial (a.k.a will be merged with some default values) thus no need to check mandatory values\n            let valid = validateSpec(value, validFormat, `[Validate ${key}]`, true);\n\n            if (!valid) {\n                return false;\n            }\n        } else if (typeof value !== data.type) {\n            console.error(`${prefix} ${key} type mismatched: \"${data.type}\" expected, \"${typeof value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.restrictions && data.restrictions.length) {\n            let length = data.restrictions.length;\n            for (let i = 0; i < length; i++) {\n                let {restriction, message} = data.restrictions[i];\n                if (!restriction(value, toValidate)) {\n                    console.error(`${prefix} ${key} invalid value: ${message}`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n        }\n\n        if (data.restriction && !data.restriction(value, toValidate)) {\n            console.error(`${prefix} ${key} invalid value: ${data.message}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.validValues && data.validValues.indexOf(value) === -1) {\n            console.error(`${prefix} ${key} invalid value: must be among ${JSON.stringify(data.validValues)}, \"${value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.children) {\n            let valid = validateSpec(value, data.children, `[Validate ${key}]`);\n\n            if (!valid) {\n                return false;\n            }\n        }\n\n        return true;\n    });\n\n    if (!skipMandatoryCheck) {\n        results.push(...Object.keys(spec).map((key) => {\n            let data = spec[key];\n            if (typeof data === \"string\") {\n                data = {type: data};\n            }\n\n            if (data.mandatory) {\n                let mandatory = data.mandatory;\n                if (typeof mandatory === \"function\") {\n                    mandatory = mandatory(toValidate);\n                }\n\n                if (mandatory && toValidate[key] === undefined) {\n                    console.error(`${prefix} Missing mandatory key \"${key}\"`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n\n            return true;\n        }));\n    }\n\n    return results.reduce((acc, current) => {\n        return acc && current;\n    }, true);\n}\n\n/**\n * Check the provided FORMAT.\n *\n * @param {NumbroFormat} format - format to check\n * @return {boolean}\n */\nfunction validateFormat(format) {\n    return validateSpec(format, validFormat, \"[Validate format]\");\n}\n\n/**\n * Check the provided LANGUAGE.\n *\n * @param {NumbroLanguage} language - language to check\n * @return {boolean}\n */\nfunction validateLanguage(language) {\n    return validateSpec(language, validLanguage, \"[Validate language]\");\n}\n\nmodule.exports = {\n    validate,\n    validateFormat,\n    validateInput,\n    validateLanguage\n};\n","import { RemoteModule } from \"./types\";\n\nexport const getRemoteModuleId = ({ url, module, scope }: RemoteModule) =>\n  [url, scope, module].join();\n","import { RemoteModule } from \"./types\";\nimport { getRemoteModuleId } from \"./utils\";\n\nexport const attachScript = (remoteModule: RemoteModule) => {\n  const id = getRemoteModuleId(remoteModule);\n\n  const existingElement = document.getElementById(id);\n\n  if (existingElement) {\n    //@ts-expect-error\n    if (window[remoteModule.scope]) return Promise.resolve(true);\n    else\n      return new Promise((resolve) => {\n        existingElement.onload = (e) => {\n          resolve(true);\n        };\n      });\n  }\n  const element = document.createElement(\"script\");\n  element.src = remoteModule.url;\n  element.type = \"text/javascript\";\n  element.async = true;\n  element.id = id;\n\n  const scriptLoadPromise = new Promise<HTMLScriptElement>(\n    (resolve, reject) => {\n      element.onload = () => resolve(element);\n      element.onerror = (e) => {\n        reject(e);\n      };\n    }\n  );\n\n  document.head.appendChild(element);\n\n  return scriptLoadPromise;\n};\n\nexport const detachScript = (id: string) => {\n  const element = document.getElementById(id);\n  if (element) document.head.removeChild(element);\n};\n","/* eslint-disable no-unreachable */\nexport const loadModule = (url: string, scope: string, module: string) => {\n  return async () => {\n    try {\n      //@ts-expect-error\n      await __webpack_init_sharing__(\"default\");\n      //@ts-expect-error\n      const container = window[scope];\n\n      if (!container.isInitialized) {\n        container.isInitialized = true;\n        //@ts-expect-error\n        await container.init(__webpack_share_scopes__.default);\n      }\n      //@ts-expect-error\n      const factory = await window[scope].get(module);\n\n      const Module = factory();\n\n      return Module;\n    } catch (e) {\n      const error = new Error(\n        `There was a problem loading the remote module. Please check the parameters (url: ${url} scope: ${scope} module: ${module})`\n      );\n      error.name = \"RemoteModuleLoadingError\";\n      throw error;\n    }\n  };\n};\n","import { FC } from \"react\";\nimport { attachScript } from \"./attach-script\";\nimport { loadModule } from \"./load-module\";\nimport { RemoteModule } from \"./types\";\nimport { suspend } from \"./suspend\";\nimport { getRemoteModuleId } from \"./utils\";\n\nexport type RemoteComponentProps = RemoteModule & {\n  unLoadScriptOnUnmount?: boolean;\n  exportName?: \"string\";\n};\n\nexport const getModule = (remoteModule: RemoteModule) => {\n  window.remoteModuleDictionary = window.remoteModuleDictionary || {};\n  const id = getRemoteModuleId(remoteModule);\n  const existingModule = window.remoteModuleDictionary[id];\n\n  if (existingModule) return existingModule;\n  else {\n    window.remoteModuleDictionary[id] = new Promise(async (resolve, reject) => {\n      try {\n        await attachScript(remoteModule);\n\n        const _module = await loadModule(\n          remoteModule.url,\n          remoteModule.scope,\n          remoteModule.module\n        )();\n\n        resolve(_module);\n      } catch (e) {\n        reject(e);\n      }\n    });\n    return window.remoteModuleDictionary[id];\n  }\n};\n\nconst getModuleSuspended = (remoteModule: RemoteModule) => {\n  window.remoteObjectDictionary = window.remoteObjectDictionary || {};\n  const id = getRemoteModuleId(remoteModule);\n  const existingCaller = window.remoteObjectDictionary[id];\n  if (existingCaller) return existingCaller();\n  else {\n    const caller = suspend(getModule(remoteModule));\n    window.remoteObjectDictionary[id] = caller;\n    return caller();\n  }\n};\n\nexport const useRemoteModule = (remoteModule: RemoteModule) => {\n  return getModuleSuspended(remoteModule);\n};\n\nexport const RemoteComponent: FC<RemoteComponentProps> = ({\n  unLoadScriptOnUnmount = true,\n  exportName = \"default\",\n  ...remoteModule\n}) => {\n  const { [exportName]: Component } = getModuleSuspended(remoteModule);\n\n  return <Component />;\n};\n","export const suspend = (promise: Promise<any>) => {\n  let result: any;\n  let status = \"pending\";\n\n  const suspender = promise.then(\n    (response) => {\n      status = \"success\";\n      result = response;\n    },\n    (error) => {\n      status = \"error\";\n      result = error;\n    }\n  );\n\n  return () => {\n    switch (status) {\n      case \"pending\": {\n        throw suspender;\n      }\n      case \"error\": {\n        throw result;\n      }\n      default: {\n        return result;\n      }\n    }\n  };\n};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n"],"names":["Wallet","provider","_network","a","_publicKey","_popup","_handlerAdded","_nextRequestId","_autoApprove","_responsePromises","Map","handleMessage","e","_injectedProvider","source","window","origin","_providerUrl","data","method","newPublicKey","PublicKey","params","publicKey","equals","handleDisconnect","autoApprove","emit","result","error","promises","get","id","resolve","reject","Error","_beforeUnload","disconnect","isObject","postMessage","isString","URL","hash","URLSearchParams","location","network","toString","this","addEventListener","Promise","sendRequest","name","open","once","removeEventListener","forEach","delete","connected","requestId","set","jsonrpc","focus","close","handleConnect","display","Uint8Array","response","signature","transaction","message","serializeMessage","addSignature","transactions","messages","map","tx","signatures","s","idx","toBuffer","arr","Buffer","constructor","Object","encode","serialize","SOLANA_SCHEMA","decode","deserialize","decodeUnchecked","deserializeUnchecked","key","MAX_SEED_LENGTH","value","isPublicKeyData","decoded","bs58","_bn","eq","toBase58","toBytes","b","toArrayLike","zeroPad","createWithSeed","buffer","fromPublicKey","programId","sha256","createProgramAddress","seeds","seed","is_on_curve","publicKeyBytes","findProgramAddress","nonce","seedsWithNonce","address","err","isOnCurve","kind","fields","naclLowLevel","nacl","p","r","t","chk","num","den","den2","den4","den6","neq25519","gf1","I","c","d","_keypair","secretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","rustString","rsl","_decode","_encode","chars","str","decodeLength","bytes","len","size","elem","encodeLength","rem_len","args","account","ix","isAccountSigner","index","header","isAccountWritable","numRequiredSignatures","accountKeys","length","isProgramId","indexToProgramIds","has","programIds","nonProgramIds","filter","numKeys","keyCount","shortvec","instructions","instruction","programIdIndex","keyIndicesCount","accounts","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","signDataLayout","Layout","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","keys","recentBlockhash","signData","from","byteArray","accountCount","i","dataSlice","Message","DEFAULT_SIGNATURE","PACKET_DATA_SIZE","opts","add","items","item","TransactionInstruction","compileMessage","nonceInfo","console","feePayer","accountMetas","accountMeta","pubkey","isSigner","isWritable","x","y","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","feePayerIndex","payerMeta","signedKeys","unsignedKeys","meta","invariant","keyIndex","_compile","every","pair","setSigners","signers","seen","sign","uniqueSigners","signer","partialSign","_partialSign","_addSignature","findIndex","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","Transaction","populate","sigPubkeyPair","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","sendOptions","options","skipPreflight","preflightCommitment","commitment","connection","status","JSON","sleep","ms","setTimeout","encodeData","type","allocLength","alloc","layoutFields","decodeData","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","span","fromAccountData","nonceAccount","NonceAccount","authorizedPubkey","feeCalculator","decodeInstructionType","typeIndex","instructionTypeLayout","layout","decodeCreateAccount","SYSTEM_INSTRUCTION_LAYOUTS","fromPubkey","newAccountPubkey","lamports","space","decodeTransfer","toPubkey","decodeTransferWithSeed","basePubkey","decodeAllocate","accountPubkey","decodeAllocateWithSeed","decodeAssign","decodeAssignWithSeed","decodeCreateWithSeed","decodeNonceInitialize","authorized","noncePubkey","decodeNonceAdvance","decodeNonceWithdraw","decodeNonceAuthorize","newAuthorizedPubkey","checkProgramId","SystemProgram","checkKeyLength","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","createAccount","transfer","assign","base","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","getMinNumSignatures","Math","Loader","load","balanceNeeded","program","programInfo","payer","sendAndConfirmTransaction","dataLayout","chunkSize","offset","array","BPF_LOADER_PROGRAM_ID","global","self","__self__","F","fetch","DOMException","prototype","exports","support","Symbol","Blob","viewClasses","isArrayBufferView","ArrayBuffer","isView","obj","indexOf","call","normalizeName","String","test","TypeError","toLowerCase","normalizeValue","iteratorFor","iterator","next","shift","done","undefined","Headers","headers","append","Array","isArray","getOwnPropertyNames","consumed","body","bodyUsed","fileReaderReady","reader","onload","onerror","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","buf","slice","view","byteLength","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","DataView","_bodyArrayBuffer","rejected","arrayBuffer","then","text","readAsText","readBlobAsText","fromCharCode","join","readArrayBufferAsText","formData","json","parse","oldValue","hasOwnProperty","callback","thisArg","push","values","entries","methods","Request","input","url","credentials","mode","signal","upcased","toUpperCase","normalizeMethod","referrer","form","trim","split","replace","decodeURIComponent","parseHeaders","rawHeaders","line","parts","Response","bodyInit","ok","statusText","clone","redirectStatuses","redirect","RangeError","stack","create","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","withCredentials","responseType","setRequestHeader","onreadystatechange","readyState","send","polyfill","defineProperty","ponyfill","ctx","module","trailingZeros","n","getEpoch","getEpochAndSlotIndex","slot","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","firstNormalEpoch","getFirstSlotInEpoch","getLastSlotInEpoch","promiseTimeout","timeoutPromise","timeoutId","clearTimeout","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","code","unknown","optional","any","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","boolean","firstNormalSlot","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","logs","executable","owner","rentEpoch","unitsConsumed","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","version","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","writable","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockSignaturesRpcResult","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","lastFetch","transactionSignatures","simulatedSignatures","client","commitmentOrConfig","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","endpoint","useHttps","Number","makeWebsocketUrl","fetchWithMiddleware","clientBrowser","agent","too_many_requests_retries","waitTime","res","createRpcClient","requests","batch","createRpcBatchRequest","autoconnect","max_reconnects","Infinity","_wsOnOpen","bind","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","getBalanceAndContext","_buildArgs","_rpcRequest","unsafeRes","getBalance","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","_args","ownerAddress","getParsedTokenAccountsByOwner","getLargestAccounts","arg","config","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getAccountInfo","getMultipleAccountsInfo","publicKeys","getStakeActivation","getProgramAccounts","extra","configOrCommitment","encoding","getParsedProgramAccounts","confirmTransaction","decodedSignature","assert","start","Date","subscriptionCommitment","confirmPromise","subscriptionId","timeoutMs","_confirmTransactionInitialTimeout","duration","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","getSignatureStatus","getSignatureStatuses","getTransactionCount","getTotalSupply","getInflationGovernor","getInflationReward","addresses","getEpochInfo","getEpochSchedule","epochSchedule","EpochSchedule","getLeaderSchedule","getMinimumBalanceForRentExemption","getRecentBlockhashAndContext","getRecentPerformanceSamples","limit","getFeeCalculatorForBlockhash","getRecentBlockhash","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","getTransaction","getConfirmedBlock","getBlocks","endSlot","getConfirmedBlockSignatures","transactionDetails","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","methodName","_rpcBatchRequest","getConfirmedSignaturesForAddress","firstAvailableBlock","block","highestConfirmedRoot","getConfirmedSignaturesForAddress2","confirmedSignatureInfo","info","getSignaturesForAddress","getNonceAndContext","accountInfo","getNonce","requestAirdrop","to","_recentBlockhash","timeSinceFetch","_blockhashInfo","expired","_pollNewBlockhash","startTime","MS_PER_SLOT","simulateTransaction","transactionOrMessage","disableCache","includes","encodedTransaction","logTrace","traceIndent","SendTransactionError","sendTransaction","sendRawTransaction","sendEncodedTransaction","setInterval","clearInterval","_subscribe","sub","_rpcWebSocket","rpcMethod","_unsubscribe","unsubscribeId","_resetSubscriptions","_updateSubscriptions","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","_rpcWebSocketIdleTimeout","_accountChangeSubscriptions","_programAccountChangeSubscriptions","filters","_slotSubscriptions","_slotUpdateSubscriptions","_signatureSubscriptions","_rootSubscriptions","_logsSubscriptions","mentions","notification","onAccountChange","removeAccountChangeListener","subInfo","accountId","onProgramAccountChange","removeProgramAccountChangeListener","onLogs","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","override","onSignature","onSignatureWithOptions","removeSignatureListener","onRootChange","removeRootChangeListener","generate","Keypair","fromSecretKey","keypair","encoder","fromSeed","ED25519_INSTRUCTION_LAYOUT","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","Ed25519Program","createInstructionWithPrivateKey","privateKey","STAKE_CONFIG_ID","Lockup","decodeInitialize","STAKE_INSTRUCTION_LAYOUTS","lockup","stakePubkey","Authorized","decodeDelegate","decodeAuthorize","stakeAuthorizationType","o","decodeAuthorizeWithSeed","authorityOwner","authorityBase","authoritySeed","decodeSplit","splitStakePubkey","decodeMerge","sourceStakePubKey","decodeWithdraw","decodeDeactivate","StakeProgram","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeAuthorizationLayout","Staker","Withdrawer","initialize","staker","withdrawer","unixTimestamp","custodian","delegate","authorize","custodianPubkey","newAuthorized","authorizeWithSeed","merge","withdraw","deactivate","ecdsaSign","SECP256K1_INSTRUCTION_LAYOUT","publicKeyToEthAddress","keccak_256","Secp256k1Program","ethAddress","recoveryId","createInstructionWithEthAddress","rawAddress","ethAddressOffset","ethAddressInstructionIndex","pkey","publicKeyCreate","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","fromConfigData","configKeys","rawInfo","assertType","ValidatorInfo","VOTE_PROGRAM_ID","VoteAccountLayout","va","VoteAccount","authorizedVoterPubkey","authorizedWithdrawerPubkey","votes","credits","lastEpochCredits","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL","filename","mime","bom","navigator","msSaveBlob","blobURL","createObjectURL","webkitURL","tempLink","document","createElement","style","href","setAttribute","download","appendChild","click","removeChild","revokeObjectURL","isNumeric","hasSymbol","mathceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","j","z","xc","yc","k","l","BigNumber","pow2_53","random53bitInt","decimal","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","v","intCheck","alphabet","caseChanged","isNum","arrL","carry","klo","khi","temp","xlo","m","xhi","cmp","c0","ne","toExponential","toFixedPoint","pows10","out","rd","ni","rm","sd","crypto","EXPONENTIAL_AT","RANGE","rand","dp","sum","convertBase","div","yL","qc","q","more","xL","xi","remL","rem","yz","yc0","rem0","prodL","prod","subtract","round","parseNumeric","nIsBig","nIsNeg","isModExp","nIsOdd","half","ye","xe","xLTy","reverse","normalise","xcL","ycL","zc","sqrtBase","ylo","yhi","rep","format","g1","g2","intPart","fractionPart","isNeg","intDigits","isInteger","n1","d1","md","exp","n0","d2","d0","globalObject","languageTag","delimiters","thousands","abbreviations","thousand","million","billion","trillion","spaceSeparated","ordinal","binarySuffixes","decimalSuffixes","currency","symbol","position","currencyFormat","thousandSeparated","totalLength","spaceSeparatedCurrency","formats","fourDigits","fullWithTwoDecimals","output","mantissa","fullWithTwoDecimalsNoCurrency","fullWithNoDecimals","globalState","require","validating","parsing","powers","pow","defaultOptions","characteristic","forceAverage","average","optionalMantissa","negative","forceSign","roundingFunction","spaceSeparatedAbbreviation","currentBytes","general","scale","suffixes","marker","binary","_format","providedFormat","numbro","parseFormat","validateFormat","postfix","currentCurrency","clonedFormat","currencyPosition","currencySymbol","lowPrecision","formatNumber","_value","formatOrDefault","currentCurrencyDefaultFormat","prefixSymbol","currentPercentageDefaultFormat","_state$currentBytes","localBinarySuffixes","localDecimalSuffixes","baseInfo","getFormatByteUnits","defaults","currentByteDefaultFormat","currentTimeDefaultFormat","hours","floor","minutes","seconds","ordinalFn","currentOrdinal","currentOrdinalDefaultFormat","abs","power","min","max","zeroes","toFixed","precision","_result$split2","substr","replaceDelimiters","currentDelimiters","thousandSeparator","thousandsSize","hasNegativeSign","counter","unshift","currentDefaults","hasZeroFormat","getZeroFormat","isFinite","_ref2","_ref2$characteristicP","characteristicPrecision","numberString","exponential","optionalCharacteristic","mantissaPrecision","trimMantissa","abbreviation","isNegative","characteristicLength","currentAbbreviations","_data","_result$toString$spli2","currentCharacteristic","currentMantissa","match","hasTrailingZeroes","_result$toString$spli5","missingZeros","defaultFormat","apply","getByteUnit","getBinaryByteUnit","getDecimalByteUnit","enUS","currentLanguageTag","languages","zeroFormat","globalDefaults","chooseLanguage","tag","currentLanguageData","currentLanguage","ordinalFormat","byteFormat","percentageFormat","timeFormat","setDefaults","setZeroFormat","languageData","registerLanguage","useLanguage","validateLanguage","setLanguage","fallbackTag","matchingLanguageTag","find","each","loadLanguagesInNode","tags","_subtract","other","otherValue","isNumbro","minus","toNumber","plus","multiply","times","divide","dividedBy","difference","validator","loader","unformatter","formatter","manipulate","Numbro","_classCallCheck","normalizeInput","unformat","isNaN","NaN","object","language","defaultCurrencyFormat","validate","allSuffixes","factor","escapeRegExp","unformatValue","inputString","computeUnformattedValue","stripped","newInput","RegExp","possibleOrdinalValue","parseFloat","ordinalString","inversedAbbreviations","abbreviationValues","sort","numberOfAbbreviations","_i","segments","bcp47RegExp","validFormat","validValues","restriction","mandatory","restrictions","children","validLanguage","timeDefaults","validateInput","validateSpec","toValidate","spec","skipMandatoryCheck","results","_typeof","stringify","_toConsumableArray","reduce","acc","validInput","isFormatValid","getRemoteModuleId","attachScript","remoteModule","existingElement","element","scriptLoadPromise","loadModule","__webpack_init_sharing__","container","__webpack_share_scopes__","factory","Module","getModuleSuspended","existingCaller","caller","suspender","suspend","_module","getModule","useRemoteModule"],"sourceRoot":""}