{"version":3,"file":"static/js/219.cbbb7ab3.chunk.js","mappings":"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","sources":["../node_modules/@senswap/sen-js/dist/index.js","../node_modules/@solana/web3.js/src/util/to-buffer.ts","../node_modules/@solana/web3.js/src/util/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/account.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/util/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/message.ts","../node_modules/@solana/web3.js/src/util/assert.ts","../node_modules/@solana/web3.js/src/transaction.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/util/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/util/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/system-program.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/@solana/web3.js/node_modules/cross-fetch/dist/browser-ponyfill.js","../node_modules/@solana/web3.js/src/epoch-schedule.ts","../node_modules/@solana/web3.js/src/errors.ts","../node_modules/@solana/web3.js/src/util/promise-timeout.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/util/url.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/ed25519-program.ts","../node_modules/@solana/web3.js/src/stake-program.ts","../node_modules/@solana/web3.js/src/secp256k1-program.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@solana/web3.js/src/util/send-and-confirm-raw-transaction.ts","../node_modules/@solana/web3.js/src/util/cluster.ts","../node_modules/@solana/web3.js/src/index.ts"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Farming = exports.Swap = exports.SPLT = exports.Lamports = exports.utils = exports.schema = exports.keystore = exports.account = exports.RawWallet = void 0;\n__exportStar(require(\"./rawWallet\"), exports);\nvar rawWallet_1 = require(\"./rawWallet\");\nObject.defineProperty(exports, \"RawWallet\", { enumerable: true, get: function () { return rawWallet_1.default; } });\nvar account_1 = require(\"./account\");\nObject.defineProperty(exports, \"account\", { enumerable: true, get: function () { return account_1.default; } });\n__exportStar(require(\"./default\"), exports);\n__exportStar(require(\"./keystore\"), exports);\nvar keystore_1 = require(\"./keystore\");\nObject.defineProperty(exports, \"keystore\", { enumerable: true, get: function () { return keystore_1.default; } });\n__exportStar(require(\"./schema\"), exports);\nvar schema_1 = require(\"./schema\");\nObject.defineProperty(exports, \"schema\", { enumerable: true, get: function () { return schema_1.default; } });\nvar utils_1 = require(\"./utils\");\nObject.defineProperty(exports, \"utils\", { enumerable: true, get: function () { return utils_1.default; } });\nvar lamports_1 = require(\"./lamports\");\nObject.defineProperty(exports, \"Lamports\", { enumerable: true, get: function () { return lamports_1.default; } });\n__exportStar(require(\"./splt\"), exports);\nvar splt_1 = require(\"./splt\");\nObject.defineProperty(exports, \"SPLT\", { enumerable: true, get: function () { return splt_1.default; } });\n__exportStar(require(\"./swap\"), exports);\nvar swap_1 = require(\"./swap\");\nObject.defineProperty(exports, \"Swap\", { enumerable: true, get: function () { return swap_1.default; } });\n__exportStar(require(\"./farming\"), exports);\nvar farming_1 = require(\"./farming\");\nObject.defineProperty(exports, \"Farming\", { enumerable: true, get: function () { return farming_1.default; } });\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from 'crypto-hash';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import * as nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (\n  property: string = 'publicKey',\n): BufferLayout.Layout => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): BufferLayout.Layout => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: any, offset: any) => {\n    const data = _decode(buffer, offset);\n    return data['chars'].toString('utf8');\n  };\n\n  rsl.encode = (str: any, buffer: any, offset: any) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  (rsl as any).alloc = (str: any) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS: {\n  [type in SystemInstructionType]: InstructionType;\n} = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n}({}));\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport fetch from 'cross-fetch';\nimport type {Response} from 'cross-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: SimulatedTransactionAccountInfo[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          pick({\n            executable: boolean(),\n            owner: string(),\n            lamports: number(),\n            data: array(string()),\n            rentEpoch: optional(number()),\n          }),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger with signatures only\n */\nexport type ConfirmedBlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: (url: string, options: any) => Promise<Response>;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = (url: string, options: any) => {\n      return new Promise<Response>((resolve, reject) => {\n        fetchMiddleware(url, options, async (url: string, options: any) => {\n          try {\n            resolve(await fetch(url, options));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      });\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlockSignatures\" message\n */\nconst GetConfirmedBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch infor for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: Function,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retring calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get total supply: ' + res.error.message);\n    }\n    return res.result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a processed transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const result = await this.getBlock(slot, {commitment});\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const result = await this.getTransaction(signature, {commitment});\n    if (!result) return result;\n    const {message, signatures} = result.transaction;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        if (err instanceof Error) {\n          console.error(\n            `${rpcMethod} error for argument`,\n            rpcArgs,\n            err.message,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import * as nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        publicKeyOffset,\n        publicKeyInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  | 'AuthorizeWithSeed'\n  | 'Authorize'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Split'\n  | 'Withdraw'\n  | 'Merge';\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS: {\n  [type in StakeInstructionType]: InstructionType;\n} = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport {keccak_256} from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256.update(toBuffer(publicKey)).digest()).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedVoterPubkey = args.authorizedVoterPubkey;\n    this.authorizedWithdrawerPubkey = args.authorizedWithdrawerPubkey;\n    this.commission = args.commission;\n    this.votes = args.votes;\n    this.rootSlot = args.rootSlot;\n    this.epoch = args.epoch;\n    this.credits = args.credits;\n    this.lastEpochCredits = args.lastEpochCredits;\n    this.epochCredits = args.epochCredits;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedVoterPubkey: new PublicKey(va.authorizedVoterPubkey),\n      authorizedWithdrawerPubkey: new PublicKey(va.authorizedWithdrawerPubkey),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      epoch: va.epoch,\n      credits: va.credits,\n      lastEpochCredits: va.lastEpochCredits,\n      epochCredits: va.epochCredits,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["__createBinding","this","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__exportStar","exports","p","prototype","hasOwnProperty","call","value","Farming","Swap","SPLT","Lamports","utils","schema","keystore","account","RawWallet","require","rawWallet_1","default","account_1","keystore_1","schema_1","utils_1","lamports_1","splt_1","swap_1","farming_1","toBuffer","arr","Buffer","constructor","encode","serialize","SOLANA_SCHEMA","decode","deserialize","decodeUnchecked","deserializeUnchecked","Error","key","Map","MAX_SEED_LENGTH","isPublicKeyData","decoded","bs58","equals","_bn","eq","publicKey","toBase58","toBytes","b","toArrayLike","zeroPad","toString","createWithSeed","buffer","fromPublicKey","programId","sha256","Uint8Array","hash","PublicKey","createProgramAddress","seeds","seed","is_on_curve","publicKeyBytes","findProgramAddress","nonce","seedsWithNonce","address","err","isOnCurve","kind","fields","naclLowLevel","nacl","r","t","chk","num","den","den2","den4","den6","neq25519","gf1","I","a","c","d","_keypair","secretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","rustString","rsl","_decode","_encode","data","chars","str","decodeLength","bytes","len","size","elem","encodeLength","rem_len","args","ix","isAccountSigner","index","header","isAccountWritable","numRequiredSignatures","accountKeys","length","isProgramId","indexToProgramIds","has","programIds","nonProgramIds","filter","numKeys","keyCount","shortvec","instructions","map","instruction","programIdIndex","keyIndicesCount","accounts","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","signDataLayout","Layout","transaction","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","keys","recentBlockhash","signData","from","byteArray","accountCount","i","dataSlice","Message","message","DEFAULT_SIGNATURE","PACKET_DATA_SIZE","opts","signature","signatures","add","items","item","TransactionInstruction","compileMessage","nonceInfo","console","feePayer","accountMetas","accountMeta","pubkey","isSigner","isWritable","x","y","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","feePayerIndex","payerMeta","signedKeys","unsignedKeys","meta","invariant","keyIndex","_compile","every","pair","serializeMessage","setSigners","signers","seen","sign","uniqueSigners","signer","partialSign","_partialSign","addSignature","_addSignature","findIndex","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","Transaction","populate","sigPubkeyPair","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","sendOptions","options","skipPreflight","preflightCommitment","commitment","connection","status","JSON","sleep","ms","Promise","resolve","setTimeout","encodeData","type","allocLength","alloc","layoutFields","decodeData","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","span","fromAccountData","nonceAccount","NonceAccount","authorizedPubkey","feeCalculator","decodeInstructionType","typeIndex","instructionTypeLayout","layout","decodeCreateAccount","SYSTEM_INSTRUCTION_LAYOUTS","fromPubkey","newAccountPubkey","lamports","space","decodeTransfer","toPubkey","decodeTransferWithSeed","basePubkey","decodeAllocate","accountPubkey","decodeAllocateWithSeed","decodeAssign","decodeAssignWithSeed","decodeCreateWithSeed","decodeNonceInitialize","authorized","noncePubkey","decodeNonceAdvance","decodeNonceWithdraw","decodeNonceAuthorize","newAuthorizedPubkey","checkProgramId","SystemProgram","checkKeyLength","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","createAccount","params","transfer","assign","base","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","getMinNumSignatures","Math","Loader","load","balanceNeeded","program","programInfo","payer","sendAndConfirmTransaction","dataLayout","chunkSize","offset","array","transactions","BPF_LOADER_PROGRAM_ID","global","self","__self__","F","fetch","DOMException","support","Symbol","Blob","e","viewClasses","isArrayBufferView","ArrayBuffer","isView","obj","indexOf","normalizeName","name","String","test","TypeError","toLowerCase","normalizeValue","iteratorFor","iterator","next","shift","done","Headers","headers","forEach","append","Array","isArray","getOwnPropertyNames","consumed","body","bodyUsed","reject","fileReaderReady","reader","onload","result","onerror","error","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","buf","slice","view","byteLength","set","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","DataView","_bodyArrayBuffer","rejected","arrayBuffer","then","text","readAsText","readBlobAsText","fromCharCode","join","readArrayBufferAsText","formData","json","parse","oldValue","callback","thisArg","push","values","entries","methods","Request","input","url","credentials","method","mode","signal","upcased","toUpperCase","normalizeMethod","referrer","form","trim","split","replace","decodeURIComponent","parseHeaders","rawHeaders","line","parts","Response","bodyInit","ok","statusText","clone","response","redirectStatuses","redirect","RangeError","location","stack","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","ponyfill","ctx","module","trailingZeros","n","getEpoch","getEpochAndSlotIndex","slot","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","firstNormalEpoch","getFirstSlotInEpoch","getLastSlotInEpoch","promiseTimeout","timeoutPromise","timeoutId","clearTimeout","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","code","unknown","optional","any","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","boolean","firstNormalSlot","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","logs","executable","owner","rentEpoch","unitsConsumed","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","version","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","writable","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockSignaturesRpcResult","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","lastFetch","transactionSignatures","simulatedSignatures","client","URL","commitmentOrConfig","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","endpoint","useHttps","Number","makeWebsocketUrl","fetchWithMiddleware","clientBrowser","agent","too_many_requests_retries","waitTime","res","createRpcClient","requests","batch","createRpcBatchRequest","autoconnect","max_reconnects","Infinity","_wsOnOpen","bind","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","getBalanceAndContext","_buildArgs","_rpcRequest","unsafeRes","getBalance","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","_args","ownerAddress","getParsedTokenAccountsByOwner","getLargestAccounts","arg","config","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getAccountInfo","getMultipleAccountsInfo","publicKeys","getStakeActivation","getProgramAccounts","extra","configOrCommitment","encoding","getParsedProgramAccounts","confirmTransaction","decodedSignature","assert","start","Date","subscriptionCommitment","confirmPromise","subscriptionId","timeoutMs","_confirmTransactionInitialTimeout","duration","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","getSignatureStatus","getSignatureStatuses","getTransactionCount","getTotalSupply","getInflationGovernor","getInflationReward","addresses","getEpochInfo","getEpochSchedule","epochSchedule","EpochSchedule","getLeaderSchedule","getMinimumBalanceForRentExemption","getRecentBlockhashAndContext","getRecentPerformanceSamples","limit","getFeeCalculatorForBlockhash","getRecentBlockhash","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","getTransaction","getConfirmedBlock","getBlocks","endSlot","getConfirmedBlockSignatures","transactionDetails","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","methodName","_rpcBatchRequest","getConfirmedSignaturesForAddress","firstAvailableBlock","block","highestConfirmedRoot","getConfirmedSignaturesForAddress2","confirmedSignatureInfo","info","getSignaturesForAddress","getNonceAndContext","accountInfo","getNonce","requestAirdrop","to","_recentBlockhash","timeSinceFetch","_blockhashInfo","expired","_pollNewBlockhash","startTime","MS_PER_SLOT","simulateTransaction","transactionOrMessage","disableCache","includes","encodedTransaction","logTrace","traceIndent","SendTransactionError","sendTransaction","sendRawTransaction","sendEncodedTransaction","setInterval","clearInterval","_subscribe","sub","_rpcWebSocket","rpcMethod","_unsubscribe","unsubscribeId","_resetSubscriptions","s","_updateSubscriptions","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","_rpcWebSocketIdleTimeout","_accountChangeSubscriptions","_programAccountChangeSubscriptions","filters","_slotSubscriptions","_slotUpdateSubscriptions","_signatureSubscriptions","_rootSubscriptions","_logsSubscriptions","mentions","notification","onAccountChange","removeAccountChangeListener","subInfo","accountId","onProgramAccountChange","removeProgramAccountChangeListener","onLogs","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","override","onSignature","onSignatureWithOptions","removeSignatureListener","onRootChange","removeRootChangeListener","generate","Keypair","fromSecretKey","keypair","encoder","fromSeed","ED25519_INSTRUCTION_LAYOUT","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","Ed25519Program","createInstructionWithPrivateKey","privateKey","STAKE_CONFIG_ID","Lockup","decodeInitialize","STAKE_INSTRUCTION_LAYOUTS","lockup","stakePubkey","Authorized","decodeDelegate","decodeAuthorize","stakeAuthorizationType","decodeAuthorizeWithSeed","authorityOwner","authorityBase","authoritySeed","decodeSplit","splitStakePubkey","decodeMerge","sourceStakePubKey","decodeWithdraw","decodeDeactivate","StakeProgram","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeAuthorizationLayout","Staker","Withdrawer","initialize","staker","withdrawer","unixTimestamp","custodian","delegate","authorize","custodianPubkey","newAuthorized","authorizeWithSeed","merge","withdraw","deactivate","ecdsaSign","SECP256K1_INSTRUCTION_LAYOUT","publicKeyToEthAddress","keccak_256","Secp256k1Program","ethAddress","recoveryId","createInstructionWithEthAddress","rawAddress","ethAddressOffset","ethAddressInstructionIndex","pkey","publicKeyCreate","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","fromConfigData","configKeys","rawInfo","assertType","ValidatorInfo","VOTE_PROGRAM_ID","VoteAccountLayout","va","VoteAccount","authorizedVoterPubkey","authorizedWithdrawerPubkey","votes","credits","lastEpochCredits","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"sourceRoot":""}