{"version":3,"file":"static/js/956.c41453b4.chunk.js","mappings":"yNAgBMA,EAAW,WACf,IAAMC,EAAQC,OAAOC,WACrB,OAAIF,EAAQ,IAAY,KACpBA,EAAQ,IAAY,KACpBA,EAAQ,IAAY,KACpBA,EAAQ,KAAa,KACrBA,EAAQ,KAAa,KAClB,OAQHG,EAAsB,CAC1BH,MAAOC,OAAOC,WACdE,MAAOL,IACPM,UCjCO,iBAAkBJ,QAAUK,UAAUC,eAAiB,GDwCnDC,GAASC,EAAAA,EAAAA,kBAAiB,GAAD,OAXzB,KAWyB,6BAAmB,6FACjDT,EAAQC,OAAOC,WACfE,EAAQL,IAFyC,kBAGhD,CAAEC,MAAAA,EAAOI,MAAAA,IAHuC,4CAqBzD,GAXcM,EAAAA,EAAAA,aAAY,CACxBC,KAtBW,KAuBXR,aAAAA,EACAS,SAAU,GACVC,cAAe,SAACC,GACTA,EAAQC,QACXP,EAAOQ,WACP,SAACC,EAAD,OAAUC,EAAV,EAAUA,QAAmBC,OAAOC,OAAOH,EAAOC,SAIxD","sources":["store/ui.reducer.tsx","helpers/util.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\nimport { isTouchable } from 'helpers/util'\n\n/**\n * Interface & Utility\n */\n\ntype Infix = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n\nexport type State = {\n  width: number\n  infix: Infix\n  touchable: boolean\n}\n\nconst getInfix = (): Infix => {\n  const width = window.innerWidth\n  if (width < 576) return 'xs'\n  if (width < 768) return 'sm'\n  if (width < 992) return 'md'\n  if (width < 1200) return 'lg'\n  if (width < 1400) return 'xl'\n  return 'xxl'\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'ui'\nconst initialState: State = {\n  width: window.innerWidth,\n  infix: getInfix(),\n  touchable: isTouchable(),\n}\n\n/**\n * Actions\n */\n\nexport const resize = createAsyncThunk(`${NAME}/resize`, async () => {\n  const width = window.innerWidth\n  const infix = getInfix()\n  return { width, infix }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      resize.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","export const isTouchable = () => {\n  return 'ontouchstart' in window || navigator.maxTouchPoints > 0\n}\n\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nexport const openNewTab = (href: string) => {\n  return window.open(href, '_blank')\n}\n"],"names":["getInfix","width","window","innerWidth","initialState","infix","touchable","navigator","maxTouchPoints","resize","createAsyncThunk","createSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","payload","Object","assign"],"sourceRoot":""}