{"version":3,"file":"static/js/459.1572ade0.chunk.js","mappings":"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","sources":["os/providers/ui.provider.tsx","os/providers/pool.provider.tsx","os/providers/wallet.provider.tsx","os/providers/account.provider.tsx","shared/tokenProvider/supplementary.ts","shared/tokenProvider/index.ts","os/providers/mint.provider.tsx","shared/pdb/index.ts"],"sourcesContent":["import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n  CSSProperties,\n} from 'react'\n\nimport { ConfigProvider } from 'antd'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { UIState } from 'os/store/ui.reducer'\nimport { ConfigProviderProps } from 'antd/lib/config-provider'\n\nconst Context = createContext<UIProvider>({} as UIProvider)\n\nexport type UIProvider = {\n  ui: UIState\n}\n\n/**\n * UI Context Provider\n */\nconst UIContextProvider = ({\n  children,\n  appId,\n  style = {},\n  antd = false,\n}: {\n  children: ReactNode\n  appId: string\n  style?: CSSProperties\n  antd?: boolean | ConfigProviderProps\n}) => {\n  const { ui } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ ui }), [ui])\n  const configProvider = antd\n    ? {\n        getPopupContainer: () => document.getElementById(appId) as HTMLElement,\n        ...(typeof antd === 'object' ? antd : {}),\n      }\n    : undefined\n\n  return (\n    <Context.Provider value={provider}>\n      <section\n        id={appId}\n        style={{ height: '100%', backgroundColor: 'transparent', ...style }}\n      >\n        {configProvider ? (\n          <ConfigProvider {...configProvider}>{children}</ConfigProvider>\n        ) : (\n          children\n        )}\n      </section>\n    </Context.Provider>\n  )\n}\nexport default UIContextProvider\n\n/**\n * UI Context Consumer\n */\nconst UIComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * UI HOC\n */\nexport const withUI = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <UIComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </UIComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * UI Hook\n */\nexport const useUI = () => {\n  return useContext<UIProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { PoolsState } from 'os/store/pools.reducer'\n\nconst Context = createContext<PoolProvider>({} as PoolProvider)\n\nexport type PoolProvider = {\n  pools: PoolsState\n}\n\n/**\n * Pool Context Provider\n */\nconst PoolContextProvider = ({ children }: { children: ReactNode }) => {\n  const { pools } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ pools }), [pools])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default PoolContextProvider\n\n/**\n * Pool Context Consumer\n */\nconst PoolContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Pool HOC\n */\nexport const withPool = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <PoolContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </PoolContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Pool Hook\n */\nexport const usePool = () => {\n  return useContext<PoolProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { WalletState } from 'os/store/wallet.reducer'\n\nconst Context = createContext<WalletProvider>({} as WalletProvider)\n\nexport type WalletProvider = {\n  wallet: WalletState\n}\n\n/**\n * Wallet Context Provider\n */\nconst WalletContextProvider = ({ children }: { children: ReactNode }) => {\n  const { wallet } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ wallet }), [wallet])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default WalletContextProvider\n\n/**\n * Wallet Context Consumer\n */\nconst WalletContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Wallet HOC\n */\nexport const withWallet = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <WalletContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </WalletContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Wallet Hook\n */\nexport const useWallet = () => {\n  return useContext<WalletProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { AccountsState } from 'os/store/accounts.reducer'\n\nconst Context = createContext<AccountProvider>({} as AccountProvider)\n\nexport type AccountProvider = {\n  accounts: AccountsState\n}\n\n/**\n * Account Context Provider\n */\nconst AccountContextProvider = ({ children }: { children: ReactNode }) => {\n  const { accounts } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ accounts }), [accounts])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default AccountContextProvider\n\n/**\n * Account Context Consumer\n */\nconst AccountContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Account HOC\n */\nexport const withAccount = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <AccountContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </AccountContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Account Hook\n */\nexport const useAccount = () => {\n  return useContext<AccountProvider>(Context)\n}\n","// Pseudo native sol info\n// It's for all networks\nexport const sol = (chainId: 101 | 102 | 103) => ({\n  symbol: 'SOL',\n  name: 'Solana',\n  address: '11111111111111111111111111111111',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'solana',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/So11111111111111111111111111111111111111112/logo.png',\n})\n\n// Pseudo SNTR info\n// Only for devnet and testnet\nexport const sntr = (chainId: 102 | 103) => ({\n  symbol: 'SNTR',\n  name: 'Sentre',\n  address: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'sentre',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M/logo.png',\n})\n\n// Pseudo token infos for devnet\nconst supplementary = [\n  sol(103),\n  sntr(103),\n  {\n    symbol: 'wBTC',\n    name: 'Wrapped Bitcoin',\n    address: '8jk4eJymMfNZV9mkRNxJEt2VJ3pRvdJvD5FE94GXGBPM',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'bitcoin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/qfnqNqs3nCAHjnyCgLRDbBtq4p2MtHZxw8YjSyYhPoL/logo.png',\n  },\n  {\n    symbol: 'wETH',\n    name: 'Ethereum',\n    address: '27hdcZv7RtuMp75vupThR3T4KLsL61t476eosMdoec4c',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'ethereum',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/FeGn77dhg1KXRRFeSwwMiykZnZPw5JXW6naf2aQgZDQf/logo.png',\n  },\n  {\n    symbol: 'UNI',\n    name: 'Uniswap',\n    address: 'FVZFSXu3yn17YdcxLD72TFDUqkdE5xZvcW18EUpRQEbe',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'uniswap',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/3MVa4e32PaKmPxYUQ6n8vFkWtCma68Ld7e7fTktWDueQ/logo.png',\n  },\n  {\n    symbol: 'USDC',\n    name: 'USD Coin',\n    address: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'usd-coin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v/logo.png',\n  },\n]\n\nexport default supplementary\n","import lunr, { Index } from 'lunr'\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry'\n\nimport { net, chainId, ChainId, Net } from 'shared/runtime'\nimport supplementary, { sntr, sol } from './supplementary'\n\nclass TokenProvider {\n  private tokenMap: Map<string, TokenInfo>\n  private engine: Index | undefined\n  readonly chainId: ChainId\n  readonly cluster: Net\n  private loading: boolean\n  private queue: Array<any>\n\n  constructor() {\n    this.tokenMap = new Map<string, TokenInfo>()\n    this.engine = undefined\n    this.chainId = chainId\n    this.cluster = net\n    this.loading = false\n    this.queue = []\n    // Init\n    this._init()\n  }\n\n  private _init = async (): Promise<[Map<string, TokenInfo>, Index]> => {\n    if (this.tokenMap.size && this.engine) return [this.tokenMap, this.engine]\n    return new Promise(async (resolve) => {\n      // Queue of getters to avoid race condition of multiple _init calling\n      if (this.loading) return this.queue.push(resolve)\n      // Start\n      this.loading = true\n      // Build token list\n      let tokenList = await (await new TokenListProvider().resolve())\n        .filterByChainId(this.chainId)\n        .getList()\n      if (this.cluster === 'devnet') tokenList = tokenList.concat(supplementary)\n      if (this.cluster === 'testnet')\n        tokenList = tokenList.concat([sntr(102), sol(102)])\n      else tokenList = tokenList.concat([sol(101)])\n      // Build token map\n      tokenList.forEach((token) => this.tokenMap.set(token.address, token))\n      // Build search engine\n      this.engine = lunr(function () {\n        this.ref('address')\n        this.field('symbol')\n        this.field('name')\n        tokenList.forEach((doc) => this.add(doc))\n      })\n      // Resolve the main getter\n      resolve([this.tokenMap, this.engine])\n      // Resolve the rest of getters\n      while (this.queue.length) this.queue.shift()([this.tokenMap, this.engine])\n      // Finish\n      this.loading = false\n    })\n  }\n\n  all = async (): Promise<TokenInfo[]> => {\n    const [tokenMap] = await this._init()\n    return Array.from(tokenMap.values())\n  }\n\n  findByAddress = async (addr: string): Promise<TokenInfo | undefined> => {\n    const [tokenMap] = await this._init()\n    return tokenMap.get(addr)\n  }\n\n  find = async (keyword: string, limit = 10): Promise<TokenInfo[]> => {\n    const [tokenMap, engine] = await this._init()\n    let tokens: TokenInfo[] = []\n    if (!keyword) return []\n    engine.search(keyword).forEach(({ ref }) => {\n      if (tokens.findIndex(({ address }) => address === ref) < 0) {\n        const token = tokenMap.get(ref)\n        if (token) tokens.push(token)\n      }\n    })\n    return tokens.slice(0, limit)\n  }\n}\n\nexport default TokenProvider\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  useCallback,\n  ReactNode,\n  useMemo,\n} from 'react'\nimport { account } from '@senswap/sen-js'\n\nimport {\n  useRootDispatch,\n  useRootSelector,\n  RootState,\n  RootDispatch,\n} from 'os/store'\nimport { getMint as _getMint, MintsState } from 'os/store/mints.reducer'\nimport TokenProvider from 'shared/tokenProvider'\n\nconst tokenProvider = new TokenProvider()\nconst Context = createContext<MintProvider>({} as MintProvider)\n\nexport type MintProvider = {\n  mints: MintsState\n  getMint: (...agrs: Parameters<typeof _getMint>) => Promise<MintsState>\n  getDecimals: (mintAddress: string) => Promise<number>\n  tokenProvider: TokenProvider\n}\n\n/**\n * Mint Context Provider\n */\nconst MintContextProvider = ({ children }: { children: ReactNode }) => {\n  const dispatch = useRootDispatch<RootDispatch>()\n  const { mints, pools } = useRootSelector((state: RootState) => state)\n  const getMint = useCallback(\n    async (...agrs: Parameters<typeof _getMint>) =>\n      await dispatch(_getMint(...agrs)).unwrap(),\n    [dispatch],\n  )\n  const getDecimals = useCallback(\n    async (mintAddress: string) => {\n      if (!account.isAddress(mintAddress))\n        throw new Error('Invalid mint address')\n      // If the token is in token provider, return its decimals\n      const tokenInfo = await tokenProvider.findByAddress(mintAddress)\n      if (tokenInfo?.decimals) return tokenInfo.decimals\n      // If the token is lp, return 9 as default\n      const index = Object.values(pools).findIndex(\n        ({ mint_lpt }) => mint_lpt === mintAddress,\n      )\n      if (index >= 0) return 9\n      // Fetch from the clustters\n      const mintData = await getMint({ address: mintAddress })\n      if (mintData[mintAddress]?.decimals) return mintData[mintAddress].decimals\n      throw new Error('Cannot find mint decimals')\n    },\n    [getMint, pools],\n  )\n  const provider = useMemo(\n    () => ({ mints, getMint, getDecimals, tokenProvider }),\n    [mints, getMint, getDecimals],\n  )\n  // Context provider\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default MintContextProvider\n\n/**\n * Mint Context Consumer\n */\nconst MintContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Mint HOC\n */\nexport const withMint = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <MintContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </MintContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Mint Hook\n */\nexport const useMint = () => {\n  return useContext<MintProvider>(Context)\n}\n","import localForage from 'localforage'\nimport { account } from '@senswap/sen-js'\nimport IPFS from './ipfs'\n\n/**\n * Persistent Database\n */\nclass PDB {\n  readonly dbName: string\n  private driver: any\n  private ipfs: IPFS\n\n  constructor(walletAddress: string) {\n    if (!account.isAddress(walletAddress)) throw new Error('Invalid address')\n    this.dbName = walletAddress\n    this.driver = [localForage.WEBSQL, localForage.LOCALSTORAGE]\n    this.ipfs = new IPFS()\n  }\n\n  /**\n   * Local\n   */\n\n  createInstance = (appId: string): LocalForage => {\n    return localForage.createInstance({\n      driver: this.driver,\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  dropInstance = async (appId: string): Promise<void> => {\n    const instance = this.createInstance(appId)\n    await instance.clear()\n    return await localForage.dropInstance({\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  all = async (): Promise<any> => {\n    let data: any = {}\n    const appIds = (\n      ((await this.createInstance('sentre').getItem('appIds')) as string[]) ||\n      []\n    )\n      .flat()\n      .concat(['sentre'])\n    for (const appId of appIds) {\n      data[appId] = {}\n      const instance = this.createInstance(appId)\n      await instance.iterate((value: string, key: string) => {\n        data[appId][key] = value\n      })\n    }\n    return data\n  }\n\n  /**\n   * Cloud\n   */\n\n  fetch = async (cid: string) => {\n    return await this.ipfs.get(cid)\n  }\n\n  backup = async () => {\n    const data = await this.all()\n    return await this.ipfs.set(data)\n  }\n\n  restore = async (cid: string) => {\n    // Download data\n    const data = await this.fetch(cid)\n    // Apply to storage\n    for (const appId in data) {\n      const instance = await this.createInstance(appId)\n      for (const key in data[appId]) {\n        const value = data[appId][key]\n        await instance.setItem(key, value)\n      }\n    }\n    return data\n  }\n}\n\nexport default PDB\n\n/**\n * High abtraction pdb for app\n */\nexport const createPDB = (walletArress: string, appId: string) => {\n  return account.isAddress(walletArress)\n    ? new PDB(walletArress).createInstance(appId)\n    : undefined\n}\n"],"names":["Context","createContext","children","appId","style","antd","ui","useRootSelector","state","provider","useMemo","configProvider","getPopupContainer","document","getElementById","undefined","Provider","value","id","height","backgroundColor","ConfigProvider","UIComsumer","Consumer","Children","child","cloneElement","withUI","WrappedComponent","HOC","Component","render","forwardedRef","rest","this","props","ref","forwardRef","useUI","useContext","pools","PoolContextComsumer","withPool","usePool","wallet","WalletContextComsumer","withWallet","useWallet","accounts","AccountContextComsumer","withAccount","useAccount","sol","chainId","symbol","name","address","decimals","extensions","coingeckoId","logoURI","sntr","tokenProvider","constructor","tokenMap","engine","cluster","loading","queue","_init","async","size","Promise","push","resolve","tokenList","TokenListProvider","filterByChainId","getList","concat","supplementary","forEach","token","set","lunr","field","doc","add","length","shift","all","Array","from","values","findByAddress","get","addr","find","keyword","limit","tokens","search","findIndex","slice","Map","net","dispatch","useRootDispatch","mints","getMint","useCallback","_getMint","unwrap","getDecimals","account","mintAddress","Error","tokenInfo","Object","mint_lpt","mintData","MintContextComsumer","withMint","useMint","PDB","walletAddress","dbName","driver","ipfs","createInstance","localForage","storeName","dropInstance","instance","clear","data","appIds","getItem","flat","iterate","key","fetch","cid","backup","restore","setItem","IPFS","createPDB","walletArress"],"sourceRoot":""}