{"version":3,"file":"static/js/99.d0702e61.chunk.js","mappings":"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","sources":["../../src/util/to-buffer.ts","../../src/util/borsh-schema.ts","../../src/publickey.ts","../../src/account.ts","../../src/bpf-loader-deprecated.ts","../../src/layout.ts","../../src/util/shortvec-encoding.ts","../../src/message.ts","../../src/util/assert.ts","../../src/transaction.ts","../../src/sysvar.ts","../../src/util/send-and-confirm-transaction.ts","../../src/util/sleep.ts","../../src/instruction.ts","../../src/fee-calculator.ts","../../src/nonce-account.ts","../../src/system-program.ts","../../src/loader.ts","../../src/bpf-loader.ts","../../node_modules/cross-fetch/dist/browser-ponyfill.js","../../src/epoch-schedule.ts","../../src/errors.ts","../../src/util/promise-timeout.ts","../../src/connection.ts","../../src/util/url.ts","../../src/keypair.ts","../../src/ed25519-program.ts","../../src/stake-program.ts","../../src/secp256k1-program.ts","../../src/validator-info.ts","../../src/vote-account.ts","../../src/util/send-and-confirm-raw-transaction.ts","../../src/util/cluster.ts","../../src/index.ts","../node_modules/react/jsx-runtime.js"],"sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from 'crypto-hash';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import * as nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (\n  property: string = 'publicKey',\n): BufferLayout.Layout => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): BufferLayout.Layout => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: any, offset: any) => {\n    const data = _decode(buffer, offset);\n    return data['chars'].toString('utf8');\n  };\n\n  rsl.encode = (str: any, buffer: any, offset: any) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  (rsl as any).alloc = (str: any) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS: {\n  [type in SystemInstructionType]: InstructionType;\n} = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n}({}));\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport fetch from 'cross-fetch';\nimport type {Response} from 'cross-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: SimulatedTransactionAccountInfo[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          pick({\n            executable: boolean(),\n            owner: string(),\n            lamports: number(),\n            data: array(string()),\n            rentEpoch: optional(number()),\n          }),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger with signatures only\n */\nexport type ConfirmedBlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: (url: string, options: any) => Promise<Response>;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = (url: string, options: any) => {\n      return new Promise<Response>((resolve, reject) => {\n        fetchMiddleware(url, options, async (url: string, options: any) => {\n          try {\n            resolve(await fetch(url, options));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      });\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlockSignatures\" message\n */\nconst GetConfirmedBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch infor for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: Function,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retring calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get total supply: ' + res.error.message);\n    }\n    return res.result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a processed transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const result = await this.getBlock(slot, {commitment});\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const result = await this.getTransaction(signature, {commitment});\n    if (!result) return result;\n    const {message, signatures} = result.transaction;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        if (err instanceof Error) {\n          console.error(\n            `${rpcMethod} error for argument`,\n            rpcArgs,\n            err.message,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import * as nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        publicKeyOffset,\n        publicKeyInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  | 'AuthorizeWithSeed'\n  | 'Authorize'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Split'\n  | 'Withdraw'\n  | 'Merge';\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS: {\n  [type in StakeInstructionType]: InstructionType;\n} = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport {keccak_256} from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256.update(toBuffer(publicKey)).digest()).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedVoterPubkey = args.authorizedVoterPubkey;\n    this.authorizedWithdrawerPubkey = args.authorizedWithdrawerPubkey;\n    this.commission = args.commission;\n    this.votes = args.votes;\n    this.rootSlot = args.rootSlot;\n    this.epoch = args.epoch;\n    this.credits = args.credits;\n    this.lastEpochCredits = args.lastEpochCredits;\n    this.epochCredits = args.epochCredits;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedVoterPubkey: new PublicKey(va.authorizedVoterPubkey),\n      authorizedWithdrawerPubkey: new PublicKey(va.authorizedWithdrawerPubkey),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      epoch: va.epoch,\n      credits: va.credits,\n      lastEpochCredits: va.lastEpochCredits,\n      epochCredits: va.epochCredits,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n"],"names":["toBuffer","arr","Buffer","constructor","Object","encode","serialize","SOLANA_SCHEMA","decode","deserialize","this","decodeUnchecked","deserializeUnchecked","Error","key","Map","MAX_SEED_LENGTH","value","isPublicKeyData","decoded","bs58","equals","_bn","eq","publicKey","toBase58","toBytes","b","toArrayLike","zeroPad","toString","createWithSeed","buffer","fromPublicKey","programId","sha256","Uint8Array","hash","PublicKey","createProgramAddress","seeds","seed","is_on_curve","publicKeyBytes","findProgramAddress","nonce","seedsWithNonce","address","err","isOnCurve","kind","fields","naclLowLevel","nacl","p","r","t","chk","num","den","den2","den4","den6","neq25519","gf1","I","a","c","d","_keypair","secretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","rustString","rsl","_decode","_encode","data","chars","str","decodeLength","bytes","len","size","elem","encodeLength","rem_len","args","account","ix","isAccountSigner","index","header","isAccountWritable","numRequiredSignatures","accountKeys","length","isProgramId","indexToProgramIds","has","programIds","nonProgramIds","filter","numKeys","keyCount","shortvec","instructions","map","instruction","programIdIndex","keyIndicesCount","accounts","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","signDataLayout","Layout","transaction","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","keys","recentBlockhash","signData","from","byteArray","accountCount","i","dataSlice","Message","message","DEFAULT_SIGNATURE","PACKET_DATA_SIZE","opts","signature","signatures","add","items","item","TransactionInstruction","compileMessage","nonceInfo","console","feePayer","accountMetas","accountMeta","pubkey","isSigner","isWritable","x","y","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","feePayerIndex","payerMeta","signedKeys","unsignedKeys","meta","invariant","keyIndex","_compile","every","pair","serializeMessage","setSigners","signers","seen","sign","uniqueSigners","signer","partialSign","_partialSign","addSignature","_addSignature","findIndex","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","Transaction","populate","sigPubkeyPair","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","sendOptions","options","skipPreflight","preflightCommitment","commitment","connection","status","JSON","sleep","ms","Promise","resolve","setTimeout","encodeData","type","allocLength","alloc","layoutFields","decodeData","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","span","fromAccountData","nonceAccount","NonceAccount","authorizedPubkey","feeCalculator","decodeInstructionType","typeIndex","instructionTypeLayout","layout","decodeCreateAccount","SYSTEM_INSTRUCTION_LAYOUTS","fromPubkey","newAccountPubkey","lamports","space","decodeTransfer","toPubkey","decodeTransferWithSeed","basePubkey","decodeAllocate","accountPubkey","decodeAllocateWithSeed","decodeAssign","decodeAssignWithSeed","decodeCreateWithSeed","decodeNonceInitialize","authorized","noncePubkey","decodeNonceAdvance","decodeNonceWithdraw","decodeNonceAuthorize","newAuthorizedPubkey","checkProgramId","SystemProgram","checkKeyLength","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","createAccount","params","transfer","assign","base","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","getMinNumSignatures","Math","Loader","load","balanceNeeded","program","programInfo","payer","sendAndConfirmTransaction","dataLayout","chunkSize","offset","array","transactions","BPF_LOADER_PROGRAM_ID","global","self","__self__","F","fetch","DOMException","prototype","exports","support","Symbol","Blob","e","viewClasses","isArrayBufferView","ArrayBuffer","isView","obj","indexOf","call","normalizeName","name","String","test","TypeError","toLowerCase","normalizeValue","iteratorFor","iterator","next","shift","done","undefined","Headers","headers","forEach","append","Array","isArray","getOwnPropertyNames","consumed","body","bodyUsed","reject","fileReaderReady","reader","onload","result","onerror","error","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","buf","slice","view","byteLength","set","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","DataView","_bodyArrayBuffer","get","rejected","arrayBuffer","then","text","readAsText","readBlobAsText","fromCharCode","join","readArrayBufferAsText","formData","json","parse","oldValue","hasOwnProperty","callback","thisArg","push","values","entries","methods","Request","input","url","credentials","method","mode","signal","upcased","toUpperCase","normalizeMethod","referrer","form","trim","split","replace","decodeURIComponent","parseHeaders","rawHeaders","line","parts","Response","bodyInit","ok","statusText","clone","response","redirectStatuses","redirect","RangeError","location","stack","create","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","defineProperty","ponyfill","ctx","module","trailingZeros","n","getEpoch","getEpochAndSlotIndex","slot","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","firstNormalEpoch","getFirstSlotInEpoch","getLastSlotInEpoch","promiseTimeout","timeoutPromise","timeoutId","clearTimeout","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","code","unknown","optional","any","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","boolean","firstNormalSlot","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","logs","executable","owner","rentEpoch","unitsConsumed","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","version","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","writable","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockSignaturesRpcResult","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","lastFetch","transactionSignatures","simulatedSignatures","client","URL","commitmentOrConfig","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","endpoint","useHttps","Number","makeWebsocketUrl","fetchWithMiddleware","clientBrowser","agent","too_many_requests_retries","waitTime","res","createRpcClient","requests","batch","createRpcBatchRequest","autoconnect","max_reconnects","Infinity","_wsOnOpen","bind","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","getBalanceAndContext","_buildArgs","_rpcRequest","unsafeRes","getBalance","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","_args","ownerAddress","getParsedTokenAccountsByOwner","getLargestAccounts","arg","config","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getAccountInfo","getMultipleAccountsInfo","publicKeys","getStakeActivation","getProgramAccounts","extra","configOrCommitment","encoding","getParsedProgramAccounts","confirmTransaction","decodedSignature","assert","start","Date","subscriptionCommitment","confirmPromise","subscriptionId","timeoutMs","_confirmTransactionInitialTimeout","duration","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","getSignatureStatus","getSignatureStatuses","getTransactionCount","getTotalSupply","getInflationGovernor","getInflationReward","addresses","getEpochInfo","getEpochSchedule","epochSchedule","EpochSchedule","getLeaderSchedule","getMinimumBalanceForRentExemption","getRecentBlockhashAndContext","getRecentPerformanceSamples","limit","getFeeCalculatorForBlockhash","getRecentBlockhash","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","getTransaction","getConfirmedBlock","getBlocks","endSlot","getConfirmedBlockSignatures","transactionDetails","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","methodName","_rpcBatchRequest","getConfirmedSignaturesForAddress","firstAvailableBlock","block","highestConfirmedRoot","getConfirmedSignaturesForAddress2","confirmedSignatureInfo","info","getSignaturesForAddress","getNonceAndContext","accountInfo","getNonce","requestAirdrop","to","_recentBlockhash","timeSinceFetch","_blockhashInfo","expired","_pollNewBlockhash","startTime","MS_PER_SLOT","simulateTransaction","transactionOrMessage","disableCache","includes","encodedTransaction","logTrace","traceIndent","SendTransactionError","sendTransaction","sendRawTransaction","sendEncodedTransaction","setInterval","clearInterval","_subscribe","sub","_rpcWebSocket","rpcMethod","_unsubscribe","unsubscribeId","_resetSubscriptions","s","_updateSubscriptions","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","_rpcWebSocketIdleTimeout","_accountChangeSubscriptions","_programAccountChangeSubscriptions","filters","_slotSubscriptions","_slotUpdateSubscriptions","_signatureSubscriptions","_rootSubscriptions","_logsSubscriptions","mentions","notification","onAccountChange","removeAccountChangeListener","subInfo","accountId","onProgramAccountChange","removeProgramAccountChangeListener","onLogs","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","override","onSignature","onSignatureWithOptions","removeSignatureListener","onRootChange","removeRootChangeListener","generate","Keypair","fromSecretKey","keypair","encoder","fromSeed","ED25519_INSTRUCTION_LAYOUT","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","Ed25519Program","createInstructionWithPrivateKey","privateKey","STAKE_CONFIG_ID","Lockup","decodeInitialize","STAKE_INSTRUCTION_LAYOUTS","lockup","stakePubkey","Authorized","decodeDelegate","decodeAuthorize","stakeAuthorizationType","o","decodeAuthorizeWithSeed","authorityOwner","authorityBase","authoritySeed","decodeSplit","splitStakePubkey","decodeMerge","sourceStakePubKey","decodeWithdraw","decodeDeactivate","StakeProgram","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeAuthorizationLayout","Staker","Withdrawer","initialize","staker","withdrawer","unixTimestamp","custodian","delegate","authorize","custodianPubkey","newAuthorized","authorizeWithSeed","merge","withdraw","deactivate","ecdsaSign","SECP256K1_INSTRUCTION_LAYOUT","publicKeyToEthAddress","keccak_256","Secp256k1Program","ethAddress","recoveryId","createInstructionWithEthAddress","rawAddress","ethAddressOffset","ethAddressInstructionIndex","pkey","publicKeyCreate","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","fromConfigData","configKeys","rawInfo","assertType","ValidatorInfo","VOTE_PROGRAM_ID","VoteAccountLayout","va","VoteAccount","authorizedVoterPubkey","authorizedWithdrawerPubkey","votes","credits","lastEpochCredits","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"sourceRoot":""}